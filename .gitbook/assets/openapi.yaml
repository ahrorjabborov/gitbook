openapi: 3.0.1
info:
  title: AIKYNETIX WEB API
  description: API documentation
  termsOfService: https://aikynetix.app/terms
  contact:
    email: info@aikynetix.com
  license:
    name: BSD License
  version: v1
servers:
- url: https://aikpy-nsz2.onrender.com
security:
- Bearer: []
paths:
  /admin-management/invitation/:
    get:
      tags:
      - admin-management
      summary: List User Invitations
      description: |-
        This endpoint allows a user to retrieve a list of their pending invitations to become a sub-admin. Each invitation includes details such as the inviter's information and the invitation status.

        **Usage Example:**
        Send a `GET` request to `admin-management/invitations/`.

        **Response Structure:**
        Upon a successful request, the endpoint returns a JSON object containing a list of invitations.

        **Notes:**
        - Proper authentication is required; only authenticated users can access their invitations.
      operationId: admin-management_invitation_list
      responses:
        "200":
          description: Successfully retrieved a list of user invitations.
          content:
            application/json:
              schema:
                required:
                - invitations
                type: object
                properties:
                  invitations:
                    type: array
                    description: List of user invitations.
                    items:
                      required:
                      - admin_display_name
                      - admin_email
                      - admin_uid
                      - created_at
                      - invite_token
                      - invitee_email
                      - status
                      type: object
                      properties:
                        invite_token:
                          type: string
                          description: Unique token identifying the invitation.
                        admin_uid:
                          type: string
                          description: UID of the admin who sent the invitation.
                        admin_email:
                          type: string
                          description: Email address of the admin.
                          format: email
                        admin_display_name:
                          type: string
                          description: Display name of the admin.
                        invitee_email:
                          type: string
                          description: Email address of the invitee.
                          format: email
                        status:
                          type: string
                          description: "Current status of the invitation. Possible\
                            \ values: 'pending', 'accepted', 'declined'."
                        created_at:
                          type: string
                          description: Timestamp when the invitation was created.
                          format: date-time
                example:
                  invitations:
                  - invite_token: 123e4567-e89b-12d3-a456-426614174000
                    admin_uid: adminUid456
                    admin_email: admin@example.com
                    admin_display_name: Admin User
                    invitee_email: user@example.com
                    status: pending
                    created_at: 2025-01-30T12:34:56Z
                  - invite_token: 223e4567-e89b-12d3-a456-426614174001
                    admin_uid: adminUid789
                    admin_email: admin2@example.com
                    admin_display_name: Second Admin
                    invitee_email: anotheruser@example.com
                    status: accepted
                    created_at: 2025-01-29T11:22:33Z
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: No token provided.
                error_code: NO_TOKEN_PROVIDED
        "404":
          description: Not Found - No invitations found for the user.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: No pending invitations found.
                error_code: NO_INVITATIONS_FOUND
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred while retrieving invitations.
                error_code: INVITATION_RETRIEVAL_FAILED
      security:
      - Bearer: []
    post:
      tags:
      - admin-management
      summary: Create a User Invitation
      description: |-
        This endpoint allows a super administrator to create an invitation for a user to become a sub-admin. Provide the `user_email` of the user you wish to invite. Optionally, you can include a `platform_link` to direct the user to your platform upon accepting the invitation.

        **Usage Example:**
        Send a `POST` request to `admin-management/invitations/` with a JSON body containing the `user_email` and optionally the `platform_link`.

        **Request Body:**
        - `user_email` *(string, required)*: The email address of the user to be invited as a sub-admin.
        - `platform_link` *(string, optional)*: A URL to direct the invited user to your platform.

        **Response Structure:**
        Upon a successful request, the endpoint returns a JSON object containing the invitation details.

        **Notes:**
        - The `user_email` must correspond to an existing user or a new user to be invited.
        - Only users with super admin privileges can access this endpoint.
      operationId: admin-management_invitation_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - user_email
              type: object
              properties:
                user_email:
                  type: string
                  description: Email address of the user to be invited as a sub-admin.
                  format: email
                platform_link:
                  type: string
                  description: Optional URL to direct the invited user upon accepting
                    the invitation.
                  format: uri
              example:
                user_email: invitee@example.com
                platform_link: https://yourplatform.com/welcome
        required: true
      responses:
        "201":
          description: Invitation successfully created.
          content:
            application/json:
              schema:
                required:
                - admin_uid
                - created_at
                - invite_token
                - invitee_email
                - status
                type: object
                properties:
                  invite_token:
                    type: string
                    description: Unique token identifying the invitation.
                  admin_uid:
                    type: string
                    description: UID of the admin who created the invitation.
                  invitee_email:
                    type: string
                    description: Email address of the invited user.
                    format: email
                  status:
                    type: string
                    description: "Current status of the invitation. Possible values:\
                      \ 'pending'."
                  created_at:
                    type: string
                    description: Timestamp when the invitation was created.
                    format: date-time
                  platform_link:
                    type: string
                    description: URL to direct the invited user upon accepting the
                      invitation.
                    format: uri
                example:
                  invite_token: 123e4567-e89b-12d3-a456-426614174000
                  admin_uid: adminUid456
                  invitee_email: invitee@example.com
                  status: pending
                  created_at: 2025-01-30T12:34:56Z
                  platform_link: https://yourplatform.com/welcome
        "400":
          description: Bad Request - Missing or invalid parameters.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: User email is required.
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: No token provided.
        "403":
          description: Forbidden - User lacks super admin privileges.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You must be a super admin to access this endpoint.
        "404":
          description: Not Found - Admin or user not found.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Admin does not exist.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred while creating the invitation.
      security:
      - Bearer: []
      x-codegen-request-body-name: data
    delete:
      tags:
      - admin-management
      summary: Remove a User Invitation
      description: |-
        This endpoint allows a super administrator to remove an existing invitation identified by the `invite_token`. Providing a valid `invite_token` will delete the corresponding invitation.

        **Usage Example:**
        Send a `DELETE` request to `admin-management/invitations/` with a JSON body containing the `invite_token`.

        **Request Body:**
        - `invite_token` *(string, required)*: The unique token of the invitation to be removed.

        **Response Structure:**
        Upon a successful request, the endpoint returns a confirmation message.

        **Notes:**
        - The `invite_token` must correspond to an existing invitation.
        - Only users with super admin privileges can access this endpoint.
      operationId: admin-management_invitation_delete
      responses:
        "200":
          description: Invitation successfully removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                example:
                  message: Invitation with token 123e4567-e89b-12d3-a456-426614174000
                    has been removed successfully.
        "400":
          description: Bad Request - Missing or invalid parameters.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invite token is required.
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: No token provided.
        "403":
          description: Forbidden - User lacks super admin privileges.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You must be a super admin to access this endpoint.
        "404":
          description: Not Found - Invitation not found.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invitation not found.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred while removing the invitation.
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /admin-management/invitation/respond/:
    post:
      tags:
      - admin-management
      summary: Respond to an Invitation
      description: |-
        This endpoint allows a user to respond to a specific invitation identified by the `invite_token`. Provide the `user_response` parameter with either 'accept' or 'decline' to respond to the invitation.

        **Usage Example:**
        Send a `POST` request to `admin-management/invitations/respond/` with a JSON body containing the `invite_token` and `user_response`.

        **Request Body:**
        - `invite_token` *(string, required)*: Unique token identifying the invitation to respond to.
        - `user_response` *(string, required)*: The user's response to the invitation. Must be either 'accept' or 'decline'.

        **Response Structure:**
        Upon a successful request, the endpoint returns a confirmation message.

        **Notes:**
        - The `invite_token` must correspond to an existing invitation.
        - Only authenticated users can access this endpoint.
      operationId: admin-management_invitation_respond_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - invite_token
              - user_response
              type: object
              properties:
                invite_token:
                  type: string
                  description: Unique token identifying the invitation to respond
                    to.
                user_response:
                  type: string
                  description: The user's response to the invitation. Must be either
                    'accept' or 'decline'.
                  enum:
                  - accept
                  - decline
              example:
                invite_token: 123e4567-e89b-12d3-a456-426614174000
                user_response: accept
        required: true
      responses:
        "200":
          description: Invitation successfully responded to.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                example:
                  message: Invitation accepted.
        "400":
          description: Bad Request - Missing or invalid parameters.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invalid response. Must be 'accept' or 'decline'.
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: No token provided.
                error_code: NO_TOKEN_PROVIDED
        "403":
          description: Forbidden - User lacks permissions to respond to this invitation.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You do not have permission to respond to this invitation.
        "404":
          description: Not Found - Invitation not found or already responded to.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invitation has already been responded to.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred while responding to the invitation.
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /admin-management/sub-admins/:
    get:
      tags:
      - admin-management
      summary: Retrieve a Paginated List of Sub-Admins
      description: |-
        This endpoint allows super administrators to retrieve a paginated list of sub-admins associated with their account. The response includes user details and supports both forward and backward pagination through the use of `start_after_id` and `end_before_id` parameters.

        **Usage Example:**
        Send a `GET` request to `admin-management/sub-admins/` with optional query parameters to navigate through the list of sub-admins.

        **Query Parameters:**
        - `start_after_id` *(string, optional)*: The UID after which to start the list for forward pagination.
        - `end_before_id` *(string, optional)*: The UID before which to end the list for backward pagination.
        - `limit` *(integer, optional)*: The number of sub-admin records to retrieve. Defaults to 5 if not specified.

        **Response Structure:**
        Upon a successful request, the endpoint returns a JSON object containing the following fields:

        1. **query_count**: Total number of sub-admins available.
        2. **users**: An array of sub-admin objects, each containing `uid`, `email`, and `display_name`.
        3. **last_uid**: The UID of the last sub-admin in the current page, useful for forward pagination.
        4. **first_uid**: The UID of the first sub-admin in the current page, useful for backward pagination.

        **Detailed Description of Response Fields:**
        - **query_count** *(integer)*: Represents the total number of sub-admins associated with the requesting super admin.
        - **users** *(array of objects)*: Each object within the array represents a sub-admin with the following properties:
          - `uid` *(string)*: Unique identifier of the sub-admin.
          - `email` *(string)*: Email address of the sub-admin.
          - `display_name` *(string)*: Display name of the sub-admin.
         - `status` *(string)*: Status of the sub-admin account, which can be 'Active' or 'Invited'.
        - **last_uid** *(string)*: UID of the last sub-admin in the current response, used for fetching the next set of records.
        - **first_uid** *(string)*: UID of the first sub-admin in the current response, used for fetching the previous set of records.

        **Notes:**
        - If both `start_after_id` and `end_before_id` are provided, the API prioritizes `start_after_id` for forward pagination.
        - The `limit` parameter must be a positive integer; otherwise, a `400 Bad Request` error is returned.
        - Proper authorization is required; only users with super admin privileges can access this endpoint.
      operationId: admin-management_sub-admins_list
      parameters:
      - name: start_after_id
        in: query
        description: UID to start after for forward pagination.
        schema:
          type: string
      - name: end_before_id
        in: query
        description: UID to end before for backward pagination.
        schema:
          type: string
      - name: limit
        in: query
        description: Number of sub-admin records to retrieve. Must be a positive integer.
        schema:
          minimum: 1
          type: integer
          default: 5
      responses:
        "200":
          description: Successfully retrieved a paginated list of sub-admins.
          content:
            application/json:
              schema:
                required:
                - first_uid
                - last_uid
                - query_count
                - users
                type: object
                properties:
                  query_count:
                    type: integer
                    description: Total number of sub-admins available.
                  users:
                    type: array
                    description: List of sub-admins retrieved.
                    items:
                      required:
                      - display_name
                      - email
                      - status
                      - uid
                      type: object
                      properties:
                        uid:
                          type: string
                          description: Unique identifier of the sub-admin.
                        email:
                          type: string
                          description: Email address of the sub-admin.
                          format: email
                        display_name:
                          type: string
                          description: Display name of the sub-admin.
                        status:
                          type: string
                          description: "Status of the sub-admin account. Possible\
                            \ values: 'active', 'invited'."
                  last_uid:
                    type: string
                    description: UID of the last sub-admin in the current page for
                      forward pagination.
                  first_uid:
                    type: string
                    description: UID of the first sub-admin in the current page for
                      backward pagination.
              example:
                query_count: 10
                users:
                - uid: userUid1
                  email: user1@example.com
                  display_name: User One
                  status: active
                - uid: userUid2
                  email: user2@example.com
                  display_name: User Two
                  status: Invited
                last_uid: userUid2
                first_uid: userUid1
        "400":
          description: Bad Request - Invalid query parameters provided.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invalid limit parameter
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: No token provided.
        "403":
          description: Forbidden - User lacks super admin privileges.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You must be a super admin to access this data.
        "404":
          description: Not Found - No sub-admins found or retrieval failed.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Failed to retrieve sub-admins or none exist
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred
      security:
      - Bearer: []
    post:
      tags:
      - admin-management
      summary: Add a Sub-Admin
      description: |-
        This endpoint allows a super administrator to add a new sub-admin to their account. Provide the `user_uid` of the user you wish to promote to sub-admin status.

        **Usage Example:**
        Send a `POST` request to `admin-management/sub-admins/` with a JSON body containing the `user_uid`.

        **Request Body:**
        - `user_uid` *(string, required)*: The UID of the user to be added as a sub-admin.

        **Response Structure:**
        Upon a successful request, the endpoint returns a confirmation message.

        **Notes:**
        - The `user_uid` must correspond to an existing user.
        - Only users with super admin privileges can access this endpoint.
      operationId: admin-management_sub-admins_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - user_uid
              type: object
              properties:
                user_uid:
                  type: string
                  description: UID of the user to be set as sub-admin.
              example:
                user_uid: userUid123
        required: true
      responses:
        "201":
          description: Sub-admin successfully added.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                example:
                  message: User with UID userUid123 is now a sub-admin of adminUid456.
        "400":
          description: Bad Request - Missing or invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing what went wrong.
                example:
                  error: User UID is required.
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating missing token.
                example:
                  error: No token provided.
        "403":
          description: Forbidden - User lacks super admin privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges.
                example:
                  error: You must be a super admin to access this endpoint.
        "404":
          description: Not Found - User not found or already a sub-admin.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating the user was not found or
                      already a sub-admin.
                example:
                  error: User with UID userUid123 does not exist.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred while adding sub-admin.
      security:
      - Bearer: []
      x-codegen-request-body-name: data
    delete:
      tags:
      - admin-management
      summary: Remove a Sub-Admin
      description: |-
        This endpoint allows a super administrator to remove an existing sub-admin from their account. Provide the `user_uid` of the sub-admin you wish to remove.

        **Usage Example:**
        Send a `DELETE` request to `admin-management/sub-admins/` with a JSON body containing the `user_uid`.

        **Request Body:**
        - `user_uid` *(string, required)*: The UID of the sub-admin to be removed.

        **Response Structure:**
        Upon a successful request, the endpoint returns a confirmation message.

        **Notes:**
        - The `user_uid` must correspond to an existing sub-admin.
        - Only users with super admin privileges can access this endpoint.
      operationId: admin-management_sub-admins_delete
      responses:
        "200":
          description: Sub-admin successfully removed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message.
                example:
                  message: User with UID userUid123 has been removed from sub-admins.
        "400":
          description: Bad Request - Missing or invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message detailing what went wrong.
                example:
                  error: User UID is required.
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating missing token.
                example:
                  error: No token provided.
        "403":
          description: Forbidden - User lacks super admin privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges.
                example:
                  error: You must be a super admin to access this endpoint.
        "404":
          description: Not Found - Sub-admin not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating the sub-admin was not found.
                example:
                  error: User with UID userUid123 is not a sub-admin.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred while removing sub-admin.
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /helper/html-files/:
    get:
      tags:
      - helper
      summary: Retrieve HTML File
      description: "Retrieves an HTML file stored in Firebase using an encrypted token\
        \ passed as a query parameter. \n\n### Query Parameter\n- **token** *(string,\
        \ required)*: Encrypted token representing the user, session, and file name.\
        \ This token is used to locate and decrypt the corresponding HTML file.\n\n\
        ### Response (HTTP 200)\n\nOn success, returns the content of the HTML file\
        \ with a `Content-Type` of `text/html`.\n\n```html\n<html><body><h1>Example\
        \ HTML</h1></body></html>\n```\n\n### Error Handling\n\n- **400 Bad Request**:\
        \ Returned if the `token` query parameter is missing or empty.\n- **404 Not\
        \ Found**: Returned if the HTML file cannot be retrieved (e.g., invalid token\
        \ or file not found).\n- **500 Internal Server Error**: Returned if an unexpected\
        \ error occurs on the server.\n\n### Security\n\nNo authentication is required\
        \ for this endpoint."
      operationId: helper_html-files_list
      parameters:
      - name: token
        in: query
        description: Encrypted token used to retrieve the HTML file.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: HTML file retrieved successfully.
          content:
            application/json:
              schema:
                type: string
                description: The HTML file content.
                example: <html><body><h1>Example HTML</h1></body></html>
        "400":
          description: Bad Request - Returned if the `token` parameter is missing
            or empty. Ensure that the token is provided in the query string.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message explaining that the token is required.
              example:
                error: Token is required
        "404":
          description: Not Found - Returned if the HTML file cannot be retrieved.
            This may be due to an invalid token or if the file does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the HTML file could
                      not be found.
              example:
                error: "Error retrieving file: <error>"
        "500":
          description: Internal Server Error - Returned if an unexpected error occurred
            on the server. Check the error details for further information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message describing the server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security: []
    post:
      tags:
      - helper
      summary: Upload HTML File
      description: |-
        Uploads an HTML file to Firebase for a specific session. The file must be provided as form-data with a key `html_file` and have a content type of 'text/html'. Additionally, the `session_id` must be included in the form-data to associate the file with a session.

        ### Form Data
        - **html_file** *(file, required)*: The HTML file to be uploaded. Only files with content type 'text/html' are accepted.
        - **session_id** *(string, required)*: The session ID associated with the uploaded HTML file.

        ### Response (HTTP 201)
        On success, returns a JSON object containing:
        - **message** *(string)*: A confirmation message indicating that the file was uploaded successfully.
        - **token** *(string)*: An encrypted token representing the file and session information.

        ### Error Handling

        - **400 Bad Request**: Returned if required fields are missing (e.g. no file or session ID provided), if the file type is not 'text/html', or if the admin UID is invalid.
        - **422 Unprocessable Entity**: Returned if the HTML file processing (e.g., encryption) fails.
        - **500 Internal Server Error**: Returned if an unexpected error occurs on the server.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: helper_html-files_create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - html_file
              - session_id
              type: object
              properties:
                html_file:
                  type: string
                  description: The HTML file to upload. Must have the content type
                    'text/html'.
                  format: binary
                session_id:
                  type: string
                  description: The session ID to associate with the uploaded HTML
                    file.
          application/x-www-form-urlencoded:
            schema:
              required:
              - html_file
              - session_id
              type: object
              properties:
                html_file:
                  type: string
                  description: The HTML file to upload. Must have the content type
                    'text/html'.
                  format: binary
                session_id:
                  type: string
                  description: The session ID to associate with the uploaded HTML
                    file.
        required: true
      responses:
        "201":
          description: File uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A confirmation message.
                  token:
                    type: string
                    description: Encrypted token representing the file and session
                      information.
              example:
                message: File uploaded successfully
                token: gAAAAABhX9s8...
        "400":
          description: "Bad Request - Returned if required fields are missing (e.g.,\
            \ no file provided, session ID missing), if the file type is invalid (only\
            \ HTML files are allowed), or if the admin UID is invalid."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message explaining the invalid request.
              example:
                error: No file provided
        "422":
          description: "Unprocessable Entity - Returned if the HTML file processing\
            \ (e.g., encryption) fails."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the processing
                      failure.
              example:
                error: Encryption failed
        "500":
          description: Internal Server Error - Returned if an unexpected error occurs
            on the server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /ios/generate_summary:
    post:
      tags:
      - ios
      description: Generate a summary for a session for iOS user
      operationId: ios_generate_summary_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - cadence
              - contact_angle
              - contact_time
              - power
              - rbalance
              type: object
              properties:
                rbalance:
                  required:
                  - avg
                  - max
                  - min
                  type: object
                  properties:
                    avg:
                      type: number
                      format: float
                    min:
                      type: number
                      format: float
                    max:
                      type: number
                      format: float
                contact_angle:
                  required:
                  - avg
                  - max
                  - min
                  type: object
                  properties:
                    avg:
                      type: number
                      format: float
                    min:
                      type: number
                      format: float
                    max:
                      type: number
                      format: float
                contact_time:
                  required:
                  - avg
                  - max
                  - min
                  type: object
                  properties:
                    avg:
                      type: number
                      format: float
                    min:
                      type: number
                      format: float
                    max:
                      type: number
                      format: float
                cadence:
                  required:
                  - avg
                  - max
                  - min
                  type: object
                  properties:
                    avg:
                      type: number
                      format: float
                    min:
                      type: number
                      format: float
                    max:
                      type: number
                      format: float
                power:
                  required:
                  - avg
                  - max
                  - min
                  type: object
                  properties:
                    avg:
                      type: number
                      format: float
                    min:
                      type: number
                      format: float
                    max:
                      type: number
                      format: float
        required: true
      responses:
        "200":
          description: Summary for the session
          content:
            application/json:
              example:
                summary:
                  full_original: Full original text
                  en: Summary text in English
                  ru: Summary text in Russian
                  token_used: Number of tokens used
        "400":
          description: Error with data structure
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: You must be an admin to access this data.
          content: {}
        "404":
          description: Error generating summary
          content: {}
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /ios/process_video_ios:
    post:
      tags:
      - ios
      description: Start the video processing task for iOS
      operationId: ios_process_video_ios_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - leg_length
              - shoeSize
              - video_url
              - weight
              - ycom
              type: object
              properties:
                video_url:
                  type: string
                  description: URL of the video to be processed
                session_name:
                  type: string
                  description: Name of the session
                incline_degree:
                  type: number
                  description: Incline degree of the treadmill
                ycom:
                  type: number
                  description: User parameter ycom
                weight:
                  type: number
                  description: User weight
                shoeSize:
                  type: number
                  description: User shoe size
                leg_length:
                  type: number
                  description: User leg length
        required: true
      responses:
        "200":
          description: Video processing started successfully
          content:
            application/json:
              example:
                session_id: 1234567890abcdef
                title: Session Name
        "400":
          description: Video URL is required
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: You must be an admin to access this page.
          content: {}
        "404":
          description: User parameters not found or maximum sessions reached
          content: {}
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /jumping/management/sessions/:
    post:
      tags:
      - jumping
      summary: Create a New Video Processing Session (Admin on Behalf of Another User)
      description: |
        This endpoint allows an **admin** (or sub-admin) to upload a **video file** for processing and create a new "session" resource **on behalf of another user**. The server will return a `session_id` that can be used to poll or retrieve the session details/results.

        ### Request Body (Multipart/Form-Data)

        You must supply the following fields:

        - **user_id** *(string, required)*: The ID of the user on whose behalf this session is created.
        - **video** *(file, required)*: The raw video file to be processed.
        - **session_name** *(string, optional)*: A human-readable name/title for the session.
        ### Response Structure

        On success (HTTP 200), the response is a JSON object with:

        - **session_id** *(string)*: A unique identifier for the created session.
        - **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).

        ### Workflow
        1. **POST** a multipart/form-data request containing the required fields `user_id` and `video`, plus any optional fields.
        2. Provide a valid Bearer token in the `Authorization` header.
        3. The caller must have admin privileges to successfully create a session for another user.
        4. If successful, the server responds with `session_id` and `title`.
        5. If an error occurs (e.g., missing fields, lack of permissions), a JSON object with an `error` key is returned.

        #### Example cURL:

        ```bash
        curl -X POST \
             -H 'Content-Type: multipart/form-data' \
             -H 'Authorization: Bearer <YOUR_ADMIN_TOKEN>' \
             -F 'user_id=someUserId123' \
             -F 'video=@/path/to/video.mp4' \
             -F 'session_name=Custom Session' \
             https://<backend-link>/jumping/management/sessions/
        ```
      operationId: jumping_management_sessions_create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - user_id
              - video
              type: object
              properties:
                user_id:
                  type: string
                  description: "**Required.** The ID of the user for whom this session\
                    \ is created (form field: text)."
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field: text)."
          application/x-www-form-urlencoded:
            schema:
              required:
              - user_id
              - video
              type: object
              properties:
                user_id:
                  type: string
                  description: "**Required.** The ID of the user for whom this session\
                    \ is created (form field: text)."
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field: text)."
        required: true
      responses:
        "200":
          description: Video processing session created successfully (HTTP 200).
          content:
            application/json:
              schema:
                required:
                - session_id
                - title
                type: object
                properties:
                  session_id:
                    type: string
                    description: The unique identifier for the created session.
                  title:
                    type: string
                    description: The session title (defaults if not provided).
              example:
                session_id: abcd1234efgh5678
                title: Custom Session
        "400":
          description: "Bad Request - Possibly due to missing `user_id`, missing `video`,\
            \ or invalid form data."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: user_id is required
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating a missing or invalid token.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have admin permission to create
            sessions for others.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: "Not Found - Indicates business logic issues or resource limitations\
            \ (e.g., session limit)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
              example:
                error: User has reached the maximum number of sessions.
        "500":
          description: Internal Server Error - Unexpected error occurred on the server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating a server-side failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /jumping/sessions/:
    post:
      tags:
      - jumping
      summary: Create a New Video Processing Session
      description: "This endpoint allows an authenticated (and authorized) user to\
        \ upload a **video file** for processing and create a new \"session\" resource.\
        \ The server will return a `session_id` that can be used to poll or retrieve\
        \ the session details/results.\n\n### Request Body (Multipart/Form-Data)\n\
        \nYou must supply the following fields:\n\n- **video** *(file, required)*:\
        \ The raw video file to be processed. \n- **session_name** *(string, optional)*:\
        \ A human-readable name/title for the session. \n### Response Structure\n\n\
        On success (HTTP 200), the response is a JSON object with:\n\n- **session_id**\
        \ *(string)*: A unique identifier for the created session.\n- **title** *(string)*:\
        \ The session title (defaults to a fallback if `session_name` was not provided).\n\
        \n### Workflow\n1. **POST** a multipart/form-data request containing the required\
        \ `video` field and any optional fields.\n2. Provide a valid Bearer token\
        \ in the `Authorization` header.\n3. If successful, the server responds with\
        \ `session_id` and `title`.\n4. If an error occurs (e.g., missing video, lack\
        \ of permissions), a JSON object with an `error` key is returned.\n\n####\
        \ Example cURL:\n\n```bash\ncurl -X POST \\\n     -H 'Content-Type: multipart/form-data'\
        \ \\\n     -H 'Authorization: Bearer <YOUR_TOKEN>' \\\n     -F 'video=@/path/to/video.mp4'\
        \ \\\n     -F 'session_name=Morning Run' \\\n     https://<backend-link>/jumping/sessions/\n\
        ```\n"
      operationId: jumping_sessions_create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - video
              type: object
              properties:
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field type: text)."
          application/x-www-form-urlencoded:
            schema:
              required:
              - video
              type: object
              properties:
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field type: text)."
        required: true
      responses:
        "200":
          description: Video processing session created successfully (HTTP 200).
          content:
            application/json:
              schema:
                required:
                - session_id
                - title
                type: object
                properties:
                  session_id:
                    type: string
                    description: The unique identifier for the created session.
                  title:
                    type: string
                    description: The session title (defaults if not provided).
              example:
                session_id: abcd1234efgh5678
                title: My Morning Run
        "400":
          description: Bad Request - Possibly due to missing video file or invalid
            form data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: No video file was provided
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating a missing or invalid token.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have permission to create sessions
            (admin-only).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: "Not Found - Indicates business logic issues or resource limitations\
            \ (e.g., session limit)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
              example:
                error: User has reached the maximum number of sessions.
        "500":
          description: Internal Server Error - Unexpected error occurred on the server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating a server-side failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /jumping/sessions/{session_id}/:
    get:
      tags:
      - jumping
      summary: Get Jumping Session Data
      description: |-
        Retrieve detailed information about a specific processed jumping session using its unique `session_id`.

        **Usage Example:**
        Send a GET request with the `session_id` as a path parameter to obtain session details.

        **Parameters:**
        - `session_id` *(string, required)*: The unique identifier of the session whose data is being requested.

        **Response Data Type:**
        - **200 OK:** A JSON object with the following structure:
          - `angles` *(object)*: Contains arrays of various angle measurements:
            - `hip_intersection_angle` *(array of numbers)*: Array of hip intersection angles.
            - `ank_angle` *(array of numbers)*: Array of ankle angles.
            - `rkne_angle` *(array of numbers)*: Array of right knee angles.
            - `lkne_angle` *(array of numbers)*: Array of left knee angles.
            - `kne_angle` *(array of numbers)*: Array of knee angles.
            - `rank_angle` *(array of numbers)*: Array of right ankle angles.
            - `lank_angle` *(array of numbers)*: Array of left ankle angles.
          - `whole_report_metrics` *(object)*: Contains arrays of various metrics:
            - `hipy` *(array of numbers)*: Array of hip height values.
            - `grf` *(array of numbers)*: Array of ground reaction forces.
            - `vhipy` *(array of numbers)*: Array of hip speed values.
            - `toey` *(array of numbers)*: Array of toe Y-axis positions.
            - `ahipy` *(array of numbers)*: Array of average hip Y-axis positions.
            - `vtoey` *(array of numbers)*: Array of vertical toe velocities.
          - `all_timestamps` *(array of numbers)*: Array of timestamps for each frame.
          - `analyzed_video_url` *(string, URI)*: URL of the analyzed video.
          - `video_url` *(string, URI)*: URL of the original video.
          - `created_at` *(object)*: Contains the date and time of session creation:
            - `date` *(string, format: YYYY-MM-DD)*: Creation date.
            - `time` *(string, format: HH:MM AM/PM)*: Creation time.
          - `user_name` *(string)*: Name of the user associated with the session.
          - `activity` *(string)*: Type of activity being analyzed in the session.
          - `title` *(string)*: Title of the session.
          - `end_frames` *(array of integers)*: Array of frame numbers where each segment ends.
          - `metrics` *(object)*: Contains various performance metrics as arrays of numbers.
      operationId: jumping_sessions_read
      parameters:
      - name: session_id
        in: path
        description: Unique identifier of the session.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved session data.
          content:
            application/json:
              schema:
                required:
                - activity
                - all_timestamps
                - analyzed_video_url
                - angles
                - created_at
                - end_frames
                - metrics
                - title
                - user_name
                - video_url
                - whole_report_metrics
                type: object
                properties:
                  angles:
                    required:
                    - ank_angle
                    - hip_intersection_angle
                    - kne_angle
                    - lank_angle
                    - lkne_angle
                    - rank_angle
                    - rkne_angle
                    type: object
                    properties:
                      hip_intersection_angle:
                        type: array
                        description: Array of hip intersection angles.
                        items:
                          type: number
                      ank_angle:
                        type: array
                        description: Array of ankle angles.
                        items:
                          type: number
                      rkne_angle:
                        type: array
                        description: Array of right knee angles.
                        items:
                          type: number
                      lkne_angle:
                        type: array
                        description: Array of left knee angles.
                        items:
                          type: number
                      kne_angle:
                        type: array
                        description: Array of knee angles.
                        items:
                          type: number
                      rank_angle:
                        type: array
                        description: Array of right ankle angles.
                        items:
                          type: number
                      lank_angle:
                        type: array
                        description: Array of left ankle angles.
                        items:
                          type: number
                  whole_report_metrics:
                    required:
                    - ahipy
                    - grf
                    - hipy
                    - toey
                    - vhipy
                    - vtoey
                    type: object
                    properties:
                      hipy:
                        type: array
                        description: Array of hip height values.
                        items:
                          type: number
                      grf:
                        type: array
                        description: Array of ground reaction forces.
                        items:
                          type: number
                      vhipy:
                        type: array
                        description: Array of hip speed values.
                        items:
                          type: number
                      toey:
                        type: array
                        description: Array of toe Y-axis positions.
                        items:
                          type: number
                      ahipy:
                        type: array
                        description: Array of average hip Y-axis positions.
                        items:
                          type: number
                      vtoey:
                        type: array
                        description: Array of vertical toe velocities.
                        items:
                          type: number
                  all_timestamps:
                    type: array
                    description: Array of timestamps for each frame.
                    items:
                      type: number
                  analyzed_video_url:
                    type: string
                    description: URL of the analyzed video.
                    format: uri
                  video_url:
                    type: string
                    description: URL of the original video.
                    format: uri
                  created_at:
                    required:
                    - date
                    - time
                    type: object
                    properties:
                      date:
                        type: string
                        description: "Date when the session was created, in 'YYYY-MM-DD'\
                          \ format."
                        format: date
                      time:
                        type: string
                        description: "Time when the session was created, in 'HH:MM\
                          \ AM/PM' format."
                        format: time
                    description: Object containing the date and time of session creation.
                  user_name:
                    type: string
                    description: Name of the user associated with the session.
                  activity:
                    type: string
                    description: Type of activity being analyzed in the session.
                  title:
                    type: string
                    description: Title of the session.
                  end_frames:
                    type: array
                    description: Array of frame numbers where each segment ends.
                    items:
                      type: integer
                  metrics:
                    type: object
                    additionalProperties:
                      type: array
                      description: Array of numeric values for each metric.
                      items:
                        type: number
                    description: Object containing various performance metrics.
        "400":
          description: Bad Request - Invalid `session_id` provided.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invalid session ID
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Unauthorized access
        "403":
          description: Forbidden - User lacks necessary permissions.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You must be an admin to access this page.
        "404":
          description: Not Found - No session data found for the provided `session_id`.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred
      security:
      - Bearer: []
  /jumping/sessions/{session_id}/export/:
    get:
      tags:
      - jumping
      summary: Export Jumping Session Data
      description: |-
        Retrieve detailed information about a specific jumping session using its unique `session_id`.

        **Usage Example:**
        Send a GET request with the `session_id` as a path parameter to obtain session details.

        **Parameters:**
        - `session_id` *(string, required)*: The unique identifier of the session whose data is being requested.

        **Note:** This endpoint includes landmark points in the response.

        **Response Data Type:**
        - **200 OK:** A JSON object with the following structure:
          - `keypoints` *(object)*: Contains arrays of landmark points.
            - `lknev` *(array of numbers)*: Array of left knee landmark points.
            - `ltoev` *(array of numbers)*: Array of left toe landmark points.
            - `relbv` *(array of numbers)*: Array of right elbow landmark points.
            - `rtoey` *(array of numbers)*: Array of right toe landmark points.
            - `headv` *(array of numbers)*: Array of head landmark points.
            - `rearv` *(array of numbers)*: Array of right ear landmark points.
            - `rshox` *(array of numbers)*: Array of right shoulder landmark points.
            - `etc` *(array of numbers)*: Array of all other landmark points.
          - `angles` *(object)*: Contains arrays of various angle measurements.
            - `hip_intersection_angle` *(array of numbers)*: Hip intersection angles.
            - `ank_angle` *(array of numbers)*: Ankle angles.
            - `rkne_angle` *(array of numbers)*: Right knee angles.
            - `lkne_angle` *(array of numbers)*: Left knee angles.
            - `kne_angle` *(array of numbers)*: Knee angles.
            - `rank_angle` *(array of numbers)*: Right ankle angles.
            - `lank_angle` *(array of numbers)*: Left ankle angles.
          - `all_timestamps` *(array of numbers)*: Timestamps for each frame.
          - `analyzed_video_url` *(string, URI)*: URL of the analyzed video.
          - `video_url` *(string, URI)*: URL of the original video.
          - `created_at` *(object)*: Contains the date and time of session creation.
            - `date` *(string, format: YYYY-MM-DD)*: Creation date.
            - `time` *(string, format: HH:MM AM/PM)*: Creation time.
          - `user_name` *(string)*: Name of the user associated with the session.
          - `activity` *(string)*: Type of activity being analyzed.
          - `title` *(string)*: Title of the session.
          - `end_frames` *(array of integers)*: Frame numbers where each segment ends.
          - `metrics` *(object)*: Contains various performance metrics as arrays of numbers.
      operationId: jumping_sessions_export_list
      parameters:
      - name: session_id
        in: path
        description: Unique identifier of the session.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved session data.
          content:
            application/json:
              schema:
                required:
                - activity
                - all_timestamps
                - analyzed_video_url
                - angles
                - created_at
                - end_frames
                - keypoints
                - metrics
                - title
                - user_name
                - video_url
                type: object
                properties:
                  keypoints:
                    required:
                    - etc
                    - headv
                    - lknev
                    - ltoev
                    - rearv
                    - relbv
                    - rshox
                    - rtoey
                    type: object
                    properties:
                      lknev:
                        type: array
                        description: Array of left knee landmark points.
                        items:
                          type: number
                      ltoev:
                        type: array
                        description: Array of left toe landmark points.
                        items:
                          type: number
                      relbv:
                        type: array
                        description: Array of right elbow landmark points.
                        items:
                          type: number
                      rtoey:
                        type: array
                        description: Array of right toe landmark points.
                        items:
                          type: number
                      headv:
                        type: array
                        description: Array of head landmark points.
                        items:
                          type: number
                      rearv:
                        type: array
                        description: Array of right ear landmark points.
                        items:
                          type: number
                      rshox:
                        type: array
                        description: Array of right shoulder landmark points.
                        items:
                          type: number
                      etc:
                        type: array
                        description: All other landmark points.
                        items:
                          type: number
                  angles:
                    required:
                    - ank_angle
                    - hip_intersection_angle
                    - kne_angle
                    - lank_angle
                    - lkne_angle
                    - rank_angle
                    - rkne_angle
                    type: object
                    properties:
                      hip_intersection_angle:
                        type: array
                        description: Array of hip intersection angles.
                        items:
                          type: number
                      ank_angle:
                        type: array
                        description: Array of ankle angles.
                        items:
                          type: number
                      rkne_angle:
                        type: array
                        description: Array of right knee angles.
                        items:
                          type: number
                      lkne_angle:
                        type: array
                        description: Array of left knee angles.
                        items:
                          type: number
                      kne_angle:
                        type: array
                        description: Array of knee angles.
                        items:
                          type: number
                      rank_angle:
                        type: array
                        description: Array of right ankle angles.
                        items:
                          type: number
                      lank_angle:
                        type: array
                        description: Array of left ankle angles.
                        items:
                          type: number
                  all_timestamps:
                    type: array
                    description: Array of timestamps for each frame.
                    items:
                      type: number
                  analyzed_video_url:
                    type: string
                    description: URL of the analyzed video.
                    format: uri
                  video_url:
                    type: string
                    description: URL of the original video.
                    format: uri
                  created_at:
                    required:
                    - date
                    - time
                    type: object
                    properties:
                      date:
                        type: string
                        description: "Date when the session was created, in 'YYYY-MM-DD'\
                          \ format."
                        format: date
                      time:
                        type: string
                        description: "Time when the session was created, in 'HH:MM\
                          \ AM/PM' format."
                        format: time
                    description: Object containing the date and time of session creation.
                  user_name:
                    type: string
                    description: Name of the user associated with the session.
                  activity:
                    type: string
                    description: Type of activity being analyzed in the session.
                  title:
                    type: string
                    description: Title of the session.
                  end_frames:
                    type: array
                    description: Array of frame numbers where each segment ends.
                    items:
                      type: integer
                  metrics:
                    type: object
                    additionalProperties:
                      type: array
                      description: Array of numeric values for each metric.
                      items:
                        type: number
                    description: Object containing various performance metrics.
        "400":
          description: Bad Request - Invalid `session_id` provided.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invalid session ID
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Unauthorized access
        "403":
          description: Forbidden - User lacks necessary permissions.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You must be an admin to access this page.
        "404":
          description: Not Found - No session data found for the provided `session_id`.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred
      security:
      - Bearer: []
  /jumping/sessions/{session_id}/jump-analysis/:
    post:
      tags:
      - jumping
      summary: Get Vertical Jump Analysis Report
      description: |-
        This endpoint allows users to retrieve a comprehensive analysis report for a specific vertical jump session. The report includes graphical data, phase details, user information, and additional comments to provide an in-depth understanding of the user's performance during the session.

        **Usage Example:**
        Send a `POST` request to `/jumping/{session_id}/jump-analysis/` where `{session_id}` is the unique identifier of the session.

        **Parameters:**

        - `session_id` *(string, required)*: The unique identifier of the session for which the report is being requested.

        **Response Structure:**
        Upon a successful request, the endpoint returns a JSON object containing the following sections:

        1. **Graph Data**: Visual representations of various metrics collected during the session.
        2. **Frame Information**: Details about the video frames involved in the session.
        3. **Phase Data**: Information about different phases of the vertical jump activity.
        4. **User Information**: Personal details of the user.
        5. **Session Date**: The date when the session took place.
        6. **Comments**: Feedback and comments based on the session performance.

        **Detailed Description of Response Fields:**
        - **graph_data**: Contains nested objects for each metric (e.g., hip_height, hip_speed) with data points over time.
        - **min_frame** & **max_frame**: Indicate the range of frames analyzed in the session video.
        - **phase_data**: Provides detailed information about each phase of the jump, including video frames, graph phases, and associated images.
        - **user_information**: Includes the user's name, age, weight, height, and gender.
        - **session_date**: The date of the session in `DD/MM/YYYY` format.
        - **comments**: Contains feedback related to specific metrics like power and ground reaction force (grf).

        **Note:** Ensure that the `session_id` provided is valid and corresponds to an existing session in the system.
      operationId: jumping_sessions_jump-analysis_create
      parameters:
      - name: session_id
        in: path
        description: Unique identifier of the session.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved user report data.
          content:
            application/json:
              schema:
                required:
                - comments
                - graph_data
                - max_frame
                - min_frame
                - phase_data
                - session_date
                - user_information
                type: object
                properties:
                  graph_data:
                    type: object
                    additionalProperties:
                      required:
                      - jump_1
                      type: object
                      properties:
                        jump_1:
                          required:
                          - data
                          - times
                          type: object
                          properties:
                            times:
                              type: array
                              description: Timestamps corresponding to the data points.
                              items:
                                type: number
                            data:
                              type: array
                              description: Metric values at the corresponding times.
                              items:
                                type: number
                    description: Graphical data representing various metrics from
                      the session.
                  min_frame:
                    type: integer
                    description: The minimum frame number in the session video.
                  max_frame:
                    type: integer
                    description: The maximum frame number in the session video.
                  phase_data:
                    required:
                    - braking
                    - damping
                    - landing
                    - peak
                    - recuperation
                    - start_of_preparation
                    - takeoff
                    - zero_velocity
                    type: object
                    properties:
                      start_of_preparation:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: Frame number where preparation starts.
                          graph_phase:
                            type: integer
                            description: Graphical representation value for the preparation
                              phase.
                          image_url:
                            type: string
                            description: URL of the image representing the start of
                              preparation phase.
                            format: uri
                      braking:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: Frame number where braking occurs.
                          graph_phase:
                            type: integer
                            description: Graphical representation value for the braking
                              phase.
                          image_url:
                            type: string
                            description: URL of the image representing the braking
                              phase.
                            format: uri
                      zero_velocity:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: Frame number where velocity drops to zero.
                          graph_phase:
                            type: integer
                            description: Graphical representation value for the zero
                              velocity phase.
                          image_url:
                            type: string
                            description: URL of the image representing the zero velocity
                              phase.
                            format: uri
                      takeoff:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: Frame number where takeoff occurs.
                          graph_phase:
                            type: integer
                            description: Graphical representation value for the takeoff
                              phase.
                          image_url:
                            type: string
                            description: URL of the image representing the takeoff
                              phase.
                            format: uri
                      peak:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: Frame number where peak occurs.
                          graph_phase:
                            type: integer
                            description: Graphical representation value for the peak
                              phase.
                          image_url:
                            type: string
                            description: URL of the image representing the peak phase.
                            format: uri
                      landing:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: Frame number where landing occurs.
                          graph_phase:
                            type: integer
                            description: Graphical representation value for the landing
                              phase.
                          image_url:
                            type: string
                            description: URL of the image representing the landing
                              phase.
                            format: uri
                      damping:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: Frame number where damping occurs.
                          graph_phase:
                            type: integer
                            description: Graphical representation value for the damping
                              phase.
                          image_url:
                            type: string
                            description: URL of the image representing the damping
                              phase.
                            format: uri
                      recuperation:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: Frame number where recuperation occurs.
                          graph_phase:
                            type: integer
                            description: Graphical representation value for the recuperation
                              phase.
                          image_url:
                            type: string
                            description: URL of the image representing the recuperation
                              phase.
                            format: uri
                    description: Detailed information about different phases of the
                      activity.
                  user_information:
                    required:
                    - age
                    - gender
                    - height
                    - name
                    - weight
                    type: object
                    properties:
                      name:
                        type: string
                        description: Full name of the user.
                      age:
                        type: integer
                        description: Age of the user.
                      weight:
                        type: number
                        description: Weight of the user in kilograms.
                      height:
                        type: number
                        description: Height of the user in centimeters.
                      gender:
                        type: string
                        description: Gender of the user.
                    description: Personal information of the user.
                  session_date:
                    type: string
                    description: Date when the session took place (DD/MM/YYYY).
                    format: date
                  comments:
                    required:
                    - grf
                    - power
                    type: object
                    properties:
                      power:
                        type: string
                        description: Feedback comment on power performance.
                      grf:
                        type: string
                        description: Feedback comment on ground reaction force.
                    description: Feedback comments based on the session performance.
        "400":
          description: Bad Request - Invalid `session_id` provided.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invalid session ID
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Unauthorized access
        "403":
          description: Forbidden - User lacks necessary permissions.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You must be an admin to access this page.
        "404":
          description: Not Found - No session data found for the provided `session_id`.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred
      security:
      - Bearer: []
  /jumping/sessions/{session_id}/recommendation/:
    post:
      tags:
      - jumping
      summary: Create Recommendations Threads
      description: |-
        This endpoint generates personalized recommendation threads based on the user's vertical jump analysis report for a specific session. These threads can be used to provide tailored advice, training suggestions, or performance insights to the user.

        **Usage Example:**
        Send a `POST` request to `/jumping/sessions/{session_id}/recommendation/` where `{session_id}` is the unique identifier of the session.

        **Parameters:**

        - `session_id` *(string, required)*: The unique identifier of the session for which recommendation threads are to be created.

        **Response Structure:**
        Upon a successful request, the endpoint returns a JSON object containing thread IDs mapped to their respective metrics.

        **Example Response:**
        ```json
        {
            "hip_height": "thread_ybIdbAtHLSnHM4BnH551X4fT",
            "hip_speed": "thread_MLGE8nAmLYyW3adwIViKiVpL",
            "grf": "thread_rBIUL25oD3VLtBaPRDLunFsu",
            "power": "thread_UGCg6dZzsRI1YCpSgCf0dgT4",
            "kne_angle": "thread_rEiSblZuq3bzPHRBNXd2etJ6",
            "ank_angle": "thread_QLrCfbBuBBKpmPFFnBkJfcln",
            "hip_angle": "thread_CMWV9HCt85XlpVSORSk4MmCG"
        }
        ```

        **Note:**
        - Ensure that the `session_id` provided is valid and corresponds to an existing session in the system.
        - The user must have an active payment plan to access this feature.
      operationId: jumping_sessions_recommendation_create
      parameters:
      - name: session_id
        in: path
        description: Unique identifier of the session.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Threads created successfully.
          content:
            application/json:
              schema:
                required:
                - ank_angle
                - grf
                - hip_angle
                - hip_height
                - hip_speed
                - kne_angle
                - power
                type: object
                properties:
                  hip_height:
                    type: string
                    description: Unique identifier for the hip height recommendation
                      thread.
                  hip_speed:
                    type: string
                    description: Unique identifier for the hip speed recommendation
                      thread.
                  grf:
                    type: string
                    description: Unique identifier for the ground reaction force (GRF)
                      recommendation thread.
                  power:
                    type: string
                    description: Unique identifier for the power recommendation thread.
                  kne_angle:
                    type: string
                    description: Unique identifier for the knee angle recommendation
                      thread.
                  ank_angle:
                    type: string
                    description: Unique identifier for the ankle angle recommendation
                      thread.
                  hip_angle:
                    type: string
                    description: Unique identifier for the hip angle recommendation
                      thread.
                description: A dictionary mapping each metric to its corresponding
                  thread ID.
              example:
                hip_height: thread_ybIdbAtHLSnHM4BnH551X4fT
                hip_speed: thread_MLGE8nAmLYyW3adwIViKiVpL
                grf: thread_rBIUL25oD3VLtBaPRDLunFsu
                power: thread_UGCg6dZzsRI1YCpSgCf0dgT4
                kne_angle: thread_rEiSblZuq3bzPHRBNXd2etJ6
                ank_angle: thread_QLrCfbBuBBKpmPFFnBkJfcln
                hip_angle: thread_CMWV9HCt85XlpVSORSk4MmCG
        "400":
          description: Bad Request - Invalid `session_id` provided.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invalid session ID
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Unauthorized access
        "403":
          description: Forbidden - User lacks necessary permissions.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You must be an admin to access this page.
        "404":
          description: Not Found - No session data found for the provided `session_id`.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred
      security:
      - Bearer: []
  /jumping/sessions/{session_id}/summary/:
    get:
      tags:
      - jumping
      summary: Get Summary of a Session
      description: |-
        Retrieve a summary of a specific session using its unique `session_id`.

        **Usage Example:**
        Send a GET request with the `session_id` as a path parameter to obtain the session summary.

        **Parameters:**
        - `session_id` *(string, required)*: The unique identifier of the session whose summary is being requested.

        **Response Structure:**
        Upon a successful request, the endpoint returns a JSON object containing the following details:

        1. **Metrics**: Object containing various performance metrics.
        2. **Summary**: Object containing summary details of the session.
        3. **User Info**: Object containing user information.
        4. **Created At**: Object containing the date and time of session creation.

        **Note:** Ensure that the `session_id` provided is valid and corresponds to an existing session in the system.
      operationId: jumping_sessions_summary_list
      parameters:
      - name: session_id
        in: path
        description: Unique identifier of the session.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successfully retrieved session summary.
          content:
            application/json:
              schema:
                required:
                - created_at
                - metrics
                - summary
                - user_info
                type: object
                properties:
                  metrics:
                    type: object
                    additionalProperties:
                      type: array
                      description: Array of numeric values for each metric.
                      items:
                        type: number
                    description: Object containing various performance metrics.
                  summary:
                    type: object
                    additionalProperties:
                      type: string
                      description: Summary information for each key.
                    description: Object containing summary details of the session.
                  user_info:
                    required:
                    - age
                    - gender
                    - height
                    - name
                    - weight
                    type: object
                    properties:
                      name:
                        type: string
                        description: Full name of the user.
                      age:
                        type: integer
                        description: Age of the user.
                      weight:
                        type: number
                        description: Weight of the user in kilograms.
                      height:
                        type: number
                        description: Height of the user in centimeters.
                      gender:
                        type: string
                        description: Gender of the user.
                    description: Object containing user information.
                  created_at:
                    required:
                    - date
                    - time
                    type: object
                    properties:
                      date:
                        type: string
                        description: "Date when the session was created, in 'YYYY-MM-DD'\
                          \ format."
                        format: date
                      time:
                        type: string
                        description: "Time when the session was created, in 'HH:MM\
                          \ AM/PM' format."
                        format: time
                    description: Object containing the date and time of session creation.
                description: Object containing session summary details.
              example:
                metrics:
                  hip_height:
                  - 0.5
                  - 0.6
                  - 0.7
                  hip_speed:
                  - 0.2
                  - 0.3
                  - 0.4
                  grf:
                  - 100
                  - 150
                  - 200
                summary:
                  jump_height: High
                  power: Average
                  balance: Good
                user_info:
                  name: John Doe
                  age: 25
                  weight: 70.5
                  height: 175
                created_at:
                  date: 2022-01-01
                  time: 10:30 AM
        "400":
          description: Bad Request - Invalid `session_id` provided.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invalid session ID
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Unauthorized access
        "403":
          description: Forbidden - User lacks necessary permissions.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You must be an admin to access this page.
        "404":
          description: Not Found - No session data found for the provided `session_id`.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred
      security:
      - Bearer: []
    post:
      tags:
      - jumping
      summary: Generate Summary Threads for a Session
      description: |-
        This endpoint generates summary threads for a given session based on predefined summary blocks and metrics.

        **Usage Example:**
        Send a `POST` request to `/jumping/sessions/{session_id}/summary/` where `{session_id}` is the unique identifier of the session.

        **Parameters:**
        - `session_id` *(string, required)*: The unique identifier of the session for which summary threads are to be generated.

        **Response Structure:**
        Upon a successful request, the endpoint returns a JSON object mapping each block name to its corresponding thread ID.

        **Example Response:**
        ```json
        {
            "jump_flight": "thread_thread_id",
            "jump_forces": "thread_thread_id",
            "control_and_stability": "thread_thread_id",
            "efficiency": "thread_thread_id",
            "final_summary": "thread_thread_id",
        }
        ```

        **Notes:**
        - Ensure that the `session_id` provided is valid and corresponds to an existing session in the system.
        - The user must have the necessary permissions to generate summary threads.
      operationId: jumping_sessions_summary_create
      parameters:
      - name: session_id
        in: path
        description: Unique identifier of the session.
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Successfully generated summary threads.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                  description: Thread ID corresponding to the block name.
                description: "Dictionary mapping block names to their corresponding\
                  \ thread IDs, including a final summary thread."
              example:
                jump_flight: thread_thread_id
                jump_forces: thread_thread_id
                control_and_stability: thread_thread_id
                efficiency: thread_thread_id
                final_summary: thread_thread_id
        "400":
          description: Bad Request - Invalid `session_id` provided.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Invalid session ID
        "401":
          description: Unauthorized - Access token is missing or invalid.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Unauthorized access
        "403":
          description: Forbidden - User lacks necessary permissions.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: You must be an admin to access this page.
        "404":
          description: Not Found - No session data found for the provided `session_id`.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                required:
                - error
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
              example:
                error: An unexpected error occurred
      security:
      - Bearer: []
  /payment/checkout-sessions/:
    post:
      tags:
      - payment
      summary: Create Checkout Session
      description: |-
        This endpoint creates a Stripe checkout session for a subscription plan. It requires the subscription plan, billing interval, a list of selected activities, and the URLs to redirect the user on success or cancellation. A valid Bearer token must be included in the Authorization header.

        **Request Body:**
        - **plan** *(string, required)*: The subscription plan. Allowed values: 'Basic', 'Standard', 'Pro', 'Enterprise'.
        - **interval** *(string, required)*: The billing interval. Allowed values: 'month', 'year'.
        - **activity** *(array of strings, required)*: A list of selected activities (e.g., 'Running', 'VerticalJump', 'Weightlifting').
        - **successUrl** *(string, required)*: The URL to redirect the user after a successful checkout (must be a valid URI).
        - **cancelUrl** *(string, required)*: The URL to redirect the user after a cancelled checkout (must be a valid URI).

        **Response Structure (HTTP 201):**
        - **url** *(string)*: The URL of the created Stripe checkout session.

        **Error Responses:**
        - **400 Bad Request**: Returned when required fields are missing or input data is invalid. The response contains an `error` field (string).
        - **401 Unauthorized**: Returned when a valid Bearer token is not provided. The response contains an `error` field (string).
        - **500 Internal Server Error**: Returned if checkout session creation fails. The response contains an `error` field (string).
        - **404 Not Found**: Returned if the checkout session could not be created (as indicated by your updated view).
      operationId: payment_checkout-sessions_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - activity
              - cancelUrl
              - interval
              - plan
              - successUrl
              type: object
              properties:
                plan:
                  type: string
                  description: "The subscription plan. Allowed values: 'Basic', 'Standard',\
                    \ 'Pro', 'Enterprise'."
                  enum:
                  - Basic
                  - Standard
                  - Pro
                  - Enterprise
                interval:
                  type: string
                  description: "The billing interval. Allowed values: 'month', 'year'."
                  enum:
                  - month
                  - year
                activity:
                  type: array
                  description: A list of selected activities for the plan.
                  items:
                    type: string
                    description: "A selected activity (e.g., 'Running', 'VerticalJump',\
                      \ 'Weightlifting')."
                successUrl:
                  type: string
                  description: URL to redirect the user after a successful checkout.
                  format: uri
                cancelUrl:
                  type: string
                  description: URL to redirect the user after a cancelled checkout.
                  format: uri
              example:
                plan: Pro
                interval: month
                activity:
                - Running
                - Weightlifting
                successUrl: https://example.com/success
                cancelUrl: https://example.com/cancel
        required: true
      responses:
        "201":
          description: Checkout session created successfully. Returns a JSON object
            with the checkout session URL.
          content:
            application/json:
              schema:
                required:
                - url
                type: object
                properties:
                  url:
                    type: string
                    description: The URL of the created Stripe checkout session.
                    format: uri
              example:
                url: https://checkout.stripe.com/cs_test_...
        "400":
          description: Invalid input data. Returns an object with an error message
            (string).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the invalid input.
              example:
                error: "Missing required fields: plan, interval"
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that a valid Bearer token was not
                      provided.
              example:
                error: No token provided.
        "404":
          description: Checkout session not created. Returns an object with an error
            message (string).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating failure to create checkout
                      session.
              example:
                error: Failed to create checkout session
        "500":
          description: Server error. Returns an object with an error message (string).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the failure.
              example:
                error: Failed to create checkout session
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /payment/checkout-sessions/pro/:
    post:
      tags:
      - payment
      summary: Create Pro Checkout Session with Free Trial
      description: |-
        This endpoint creates a Stripe checkout session specifically for the Pro subscription plan with a 2-week free trial period. A valid Bearer token must be included in the Authorization header. The request body must contain the following parameters:

        - **plan** *(string, required)*: The subscription plan. For this endpoint, the only allowed value is 'Pro'.
        - **interval** *(string, required)*: The billing interval for the plan. Allowed values: 'month', 'year'.
        - **activity** *(array of strings, required)*: An array of selected activities (e.g., 'Running', 'VerticalJump', 'Weightlifting').
        - **successUrl** *(string, required)*: A valid URI to redirect the user after a successful checkout.
        - **cancelUrl** *(string, required)*: A valid URI to redirect the user if the checkout is cancelled.

        **Response Structure (HTTP 201):**
        - **url** *(string)*: The URL of the created Stripe checkout session.

        **Error Responses:**
        - **400 Bad Request**: Returned when required fields are missing or input data is invalid. The response contains an `error` field (string).
        - **401 Unauthorized**: Returned when a valid Bearer token is not provided. The response contains an `error` field (string).
        - **404 Not Found**: Returned if the checkout session could not be created (e.g., active price not found or trial already used). The response contains an `error` field (string).
        - **500 Internal Server Error**: Returned if checkout session creation fails. The response contains an `error` field (string).
      operationId: payment_checkout-sessions_pro_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - activity
              - cancelUrl
              - interval
              - plan
              - successUrl
              type: object
              properties:
                plan:
                  type: string
                  description: "The subscription plan. For this endpoint, the only\
                    \ allowed value is 'Pro'."
                  enum:
                  - Pro
                interval:
                  type: string
                  description: "The billing interval for the plan. Allowed values:\
                    \ 'month', 'year'."
                  enum:
                  - month
                  - year
                activity:
                  type: array
                  description: The activities selected for the plan.
                  items:
                    type: string
                    description: "A selected activity (e.g., 'Running', 'VerticalJump',\
                      \ 'Weightlifting')."
                successUrl:
                  type: string
                  description: URL to redirect the user after a successful checkout.
                  format: uri
                cancelUrl:
                  type: string
                  description: URL to redirect the user after a cancelled checkout.
                  format: uri
              example:
                plan: Pro
                interval: month
                activity:
                - Running
                - VerticalJump
                successUrl: https://example.com/success
                cancelUrl: https://example.com/cancel
        required: true
      responses:
        "201":
          description: Pro checkout session created successfully. Returns a JSON object
            containing the checkout session URL.
          content:
            application/json:
              schema:
                required:
                - url
                type: object
                properties:
                  url:
                    type: string
                    description: The URL of the created Stripe checkout session.
                    format: uri
              example:
                url: https://checkout.stripe.com/cs_test_...
        "400":
          description: Invalid input data or plan. Returns an object with an error
            message (string).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the invalid input.
              example:
                error: Invalid plan selected for this endpoint
        "401":
          description: Unauthorized - Missing or invalid access token. Returns an
            object with an error message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that a valid Bearer token was not
                      provided.
              example:
                error: No token provided.
        "404":
          description: "Checkout session not created. Returns an object with an error\
            \ message indicating the failure (e.g., active price not found or trial\
            \ already used)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: Failed to create checkout session
        "500":
          description: Server error. Returns an object with an error message describing
            the failure.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the server error.
              example:
                error: Failed to create checkout session
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /payment/invoices/upcoming/:
    get:
      tags:
      - payment
      summary: Retrieve Upcoming Invoice Amount (for renewal)
      description: |-
        This endpoint retrieves the total amount due for the user's upcoming invoice, including any proration or discounts, based on their active subscription. The amount is converted into a major currency unit (e.g., dollars) and returned along with the currency code.

        **Response Structure (HTTP 200):**
        - **total_amount_due** *(number)*: The total amount due for the upcoming invoice in major currency units.
        - **currency** *(string)*: The currency code in uppercase (e.g., 'USD').

        **Error Responses:**
        - **401 Unauthorized**: Returned if authentication credentials are missing or invalid.
        - **403 Forbidden**: Returned if the user does not have permission to perform this action.
        - **404 Bad Request**: Returned if there is an error retrieving the upcoming invoice amount. The response includes an `error` field (string).
        - **500 Internal Server Error**: Returned if an unexpected error occurs during processing.
      operationId: payment_invoices_upcoming_list
      responses:
        "200":
          description: Upcoming invoice amount retrieved successfully.
          content:
            application/json:
              schema:
                required:
                - currency
                - total_amount_due
                type: object
                properties:
                  total_amount_due:
                    type: number
                    description: The total amount due for the upcoming invoice in
                      major currency units.
                  currency:
                    type: string
                    description: "The currency code (e.g., 'USD')."
              example:
                total_amount_due: 100
                currency: USD
        "401":
          description: Unauthorized - Authentication credentials were not provided
            or are invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that authentication failed.
              example:
                error: Authentication credentials were not provided.
        "404":
          description: Error retrieving upcoming invoice amount.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message describing the issue.
              example:
                error: Failed to retrieve upcoming invoice amount
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the server error.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
  /payment/portal-sessions/:
    get:
      tags:
      - payment
      summary: Create Billing Portal Link
      description: |-
        This endpoint creates a Stripe Billing Portal link that allows a user to manage their subscription. A valid Bearer token must be included in the Authorization header. The request requires a query parameter `returnUrl`, which specifies the URL to which the user will be redirected after they exit the billing portal.

        **Request Parameters:**
        - **returnUrl** *(string, required)*: A valid URI to redirect the user after they exit the billing portal.

        **Response Structure (HTTP 200):**
        - **url** *(string)*: The URL for the Stripe Billing Portal session.

        **Error Responses:**
        - **400 Bad Request**: Returned if the `returnUrl` parameter is missing or invalid. The response contains an `error` field (string).
        - **401 Unauthorized**: Returned if a valid Bearer token is not provided. The response contains an `error` field (string).
        - **404 Not Found**: Returned if the Stripe customer ID is not found. The response contains an `error` field (string).
        - **500 Internal Server Error**: Returned if an error occurs while creating the billing portal link. The response contains an `error` field (string).
      operationId: payment_portal-sessions_list
      parameters:
      - name: returnUrl
        in: query
        description: URL to redirect the user after they exit the billing portal.
          Must be a valid URI.
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: Billing portal link created successfully. Returns a JSON object
            containing the billing portal URL.
          content:
            application/json:
              schema:
                required:
                - url
                type: object
                properties:
                  url:
                    type: string
                    description: The URL for the Stripe Billing Portal session.
                    format: uri
              example:
                url: https://billing.stripe.com/session_abc123
        "400":
          description: Invalid input data. Returns a JSON object with an error message
            (string).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating that the 'returnUrl'
                      parameter is missing or invalid.
              example:
                error: Missing returnUrl query parameter
        "401":
          description: Unauthorized - Missing or invalid access token. Returns a JSON
            object with an error message (string).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that a valid Bearer token
                      was not provided.
              example:
                error: No token provided.
        "404":
          description: Stripe customer ID not found. Returns a JSON object with an
            error message (string).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the Stripe customer
                      ID was not found.
              example:
                error: Stripe customer ID not found
        "500":
          description: Server error. Returns a JSON object with an error message (string)
            if the billing portal link could not be created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the server error.
              example:
                error: Error creating billing portal link
      security:
      - Bearer: []
  /payment/subscriptions/:
    get:
      tags:
      - payment
      summary: Retrieve User's Payment Plan
      description: "This endpoint retrieves the authenticated admin's current payment\
        \ plan and billing interval. It obtains the admin document from Firestore\
        \ based on the Firebase ID token provided in the Authorization header, then\
        \ extracts the 'payment' field and subscription interval. \n\n**Response Structure\
        \ (HTTP 200):**\n- **payment_plan** *(string)*: The subscription plan of the\
        \ admin (e.g., 'Enterprise').\n- **interval** *(string)*: The billing interval\
        \ for the subscription (e.g., 'year').\n\n**Error Responses:**\n- **400 Bad\
        \ Request**: Returned if there is an error retrieving the payment plan. The\
        \ response contains an `error` field (string).\n- **401 Unauthorized**: Returned\
        \ if a valid Bearer token is not provided. The response contains an `error`\
        \ field (string).\n- **403 Forbidden**: Returned if the user does not have\
        \ permission to access this data. The response contains an `error` field (string).\n\
        - **500 Internal Server Error**: Returned if an unexpected error occurs during\
        \ processing. The response contains an `error` field (string)."
      operationId: payment_subscriptions_list
      responses:
        "200":
          description: User's payment plan and billing interval retrieved successfully.
          content:
            application/json:
              schema:
                required:
                - interval
                - payment_plan
                type: object
                properties:
                  payment_plan:
                    type: string
                    description: "The subscription plan of the admin (e.g., 'Enterprise')."
                  interval:
                    type: string
                    description: "The billing interval (e.g., 'year')."
              example:
                payment_plan: Enterprise
                interval: year
        "400":
          description: Error retrieving payment plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
              example:
                error: Error getting payment plan
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Authentication credentials were not provided.
              example:
                error: Authentication credentials were not provided.
        "403":
          description: Forbidden - Insufficient permissions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating lack of permission.
              example:
                error: You do not have permission to perform this action.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
    put:
      tags:
      - payment
      summary: Update Subscription Plan or Activity
      description: |-
        This endpoint allows an authenticated user to update their subscription plan or selected activities. The request must include the new plan, billing interval, and an array of activities for the updated subscription. A valid Bearer token is required in the Authorization header.

        **Request Body:**
        - **plan** *(string, required)*: The new subscription plan. Allowed values: 'Basic', 'Standard', 'Pro', 'Enterprise'.
        - **interval** *(string, required)*: The billing interval for the new plan. Allowed values: 'month', 'year'.
        - **activity** *(array of strings, required)*: The activities selected for the new subscription plan (e.g., 'Running', 'VerticalJump', 'Weightlifting').

        **Response Structure (HTTP 200):**
        - **status** *(string)*: A confirmation message indicating that the subscription was updated successfully.
        - **subscription_id** *(string)*: The updated subscription ID from Stripe.

        **Error Responses:**
        - **400 Bad Request**: Returned when required fields are missing or input data is invalid. The response includes an `error` field (string).
        - **401 Unauthorized**: Returned when a valid Bearer token is not provided. The response includes an `error` field (string).
        - **404 Not Found**: Returned when the subscription is not found or the update fails (for example, if the selected plan is the same as the current plan). The response includes an `error` field (string).
        - **500 Internal Server Error**: Returned if a server error occurs during the update process. The response includes an `error` field (string).
      operationId: payment_subscriptions_update
      requestBody:
        content:
          application/json:
            schema:
              required:
              - activity
              - interval
              - plan
              type: object
              properties:
                plan:
                  type: string
                  description: "The new subscription plan (e.g., 'Basic', 'Standard',\
                    \ 'Pro', 'Enterprise')."
                  enum:
                  - Basic
                  - Standard
                  - Pro
                  - Enterprise
                interval:
                  type: string
                  description: "The billing interval for the new plan (e.g., 'month',\
                    \ 'year')."
                  enum:
                  - month
                  - year
                activity:
                  type: array
                  description: The activities selected for the new subscription plan.
                  items:
                    type: string
                    description: "A selected activity (e.g., 'Running', 'VerticalJump',\
                      \ 'Weightlifting')."
              example:
                plan: Pro
                interval: month
                activity:
                - Running
                - VerticalJump
        required: true
      responses:
        "200":
          description: Subscription updated successfully. Returns a confirmation message
            and the updated subscription ID.
          content:
            application/json:
              schema:
                required:
                - status
                - subscription_id
                type: object
                properties:
                  status:
                    type: string
                    description: Confirmation message indicating the successful update.
                  subscription_id:
                    type: string
                    description: The updated subscription ID from Stripe.
              example:
                status: Subscription updated successfully
                subscription_id: sub_1234567890abcdef
        "400":
          description: Invalid input data. Returns an object with an error message
            describing the missing or invalid fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message.
              example:
                error: "Missing required fields: plan, interval"
        "401":
          description: Unauthorized - Missing or invalid access token. Returns an
            object with an error message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that a valid Bearer token was not
                      provided.
              example:
                error: No token provided.
        "404":
          description: Not Found - Subscription not found or update failed. Returns
            an object with an error message describing the failure.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message.
              example:
                error: Selected plan is the same as the current plan
        "500":
          description: Internal Server Error - A server error occurred during the
            update process. Returns an object with an error message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the failure.
              example:
                error: "Failed to update subscription: Invalid price ID"
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /payment/subscriptions/consent:
    post:
      tags:
      - payment
      summary: Confirm Subscription Consent
      description: |-
        This endpoint processes user consent to continue their subscription after the trial period ends. The user must provide a valid JWT consent token in the request body. The token is validated and used to update the subscription accordingly. Upon success, the updated subscription ID is returned.

        **Request Body:**
        - **token** *(string, required)*: The JWT consent token.

        **Response Structure (HTTP 201):**
        - **subscription_id** *(string)*: The subscription ID confirming that the user's consent has been processed successfully.

        **Error Responses:**
        - **400 Bad Request**: Returned if the consent token is missing, invalid, or if processing fails. The response includes an `error` field (string).
        - **401 Unauthorized**: Returned if authentication credentials are missing or invalid.
        - **500 Internal Server Error**: Returned if a server error occurs during the consent processing. The response includes an `error` field (string).
      operationId: payment_subscriptions_consent_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - token
              type: object
              properties:
                token:
                  type: string
                  description: JWT consent token
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        required: true
      responses:
        "201":
          description: Consent confirmed successfully. Returns the subscription ID.
          content:
            application/json:
              schema:
                required:
                - subscription_id
                type: object
                properties:
                  subscription_id:
                    type: string
                    description: The subscription ID confirming consent.
              example:
                subscription_id: sub_1234567890abcdef
        "400":
          description: "Error confirming consent. Returned if the token is missing\
            \ or invalid, or if processing fails."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the issue.
              example:
                error: Missing or invalid consent token
        "401":
          description: Unauthorized - Authentication credentials were not provided
            or are invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that a valid Bearer token was not
                      provided.
              example:
                error: Authentication credentials were not provided.
        "500":
          description: Server error. Returns an object with an error message describing
            the failure.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the server error.
              example:
                error: Failed to process consent token
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /payment/subscriptions/plan-charge/:
    post:
      tags:
      - payment
      summary: Calculate Plan Charge
      description: |-
        This endpoint calculates the additional charge for upgrading or changing the subscription plan for a user. It requires the new subscription plan, billing interval, and a list of selected activities. Based on these inputs, the endpoint determines the extra charge for the upcoming invoice. A valid Bearer token must be included in the Authorization header.

        **Request Body:**
        - **plan** *(string, required)*: The new subscription plan. Allowed values: 'Basic', 'Standard', 'Pro', 'Enterprise'.
        - **interval** *(string, required)*: The billing interval for the new plan. Allowed values: 'month', 'year'.
        - **activity** *(array of strings, required)*: The list of activities selected for the new subscription plan (e.g., 'Running', 'VerticalJump', 'Weightlifting').

        **Response Structure (HTTP 201):**
        - **total_amount_due** *(number)*: The calculated additional charge amount for the new plan.
        - **currency** *(string)*: The currency in which the charge is denominated (e.g., 'USD').

        **Error Responses:**
        - **400 Bad Request**: Returned if required fields are missing or input data is invalid. The response contains an `error` field (string).
        - **401 Unauthorized**: Returned if a valid Bearer token is not provided. The response contains an `error` field (string).
        - **404 Not Found**: Returned if the charge calculation fails (e.g., subscription not found or the new plan is the same as the current plan).
        - **500 Internal Server Error**: Returned if a server error occurs (e.g., a Stripe error during calculation).
      operationId: payment_subscriptions_plan-charge_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - activity
              - interval
              - plan
              type: object
              properties:
                plan:
                  type: string
                  description: "The new subscription plan. Allowed values: 'Basic',\
                    \ 'Standard', 'Pro', 'Enterprise'."
                  enum:
                  - Basic
                  - Standard
                  - Pro
                  - Enterprise
                interval:
                  type: string
                  description: "The billing interval for the new plan. Allowed values:\
                    \ 'month', 'year'."
                  enum:
                  - month
                  - year
                activity:
                  type: array
                  description: The activities selected for the new subscription plan.
                  items:
                    type: string
                    description: "A selected activity (e.g., 'Running', 'VerticalJump',\
                      \ 'Weightlifting')."
              example:
                plan: Pro
                interval: month
                activity:
                - Running
                - VerticalJump
        required: true
      responses:
        "201":
          description: Calculated charge for the new subscription plan. Returns the
            total additional amount due and the currency.
          content:
            application/json:
              schema:
                required:
                - currency
                - total_amount_due
                type: object
                properties:
                  total_amount_due:
                    type: number
                    description: The calculated additional charge amount.
                  currency:
                    type: string
                    description: "The currency code (e.g., 'USD')."
              example:
                total_amount_due: 300
                currency: USD
        "400":
          description: Invalid input data. Returns an object with an error message
            describing the missing or invalid fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: "Missing required fields: plan, interval"
        "401":
          description: Unauthorized - Missing or invalid access token. Returns an
            object with an error message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that a valid Bearer token was not
                      provided.
              example:
                error: No token provided.
        "404":
          description: "Not Found - Charge calculation failed. Returns an object with\
            \ an error message indicating the reason (e.g., subscription not found\
            \ or selected plan is the same as the current plan)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: Selected plan is the same as the current plan
        "500":
          description: Server error. Returns an object with an error message describing
            the failure.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the server error.
              example:
                error: "Stripe error: The selected plan is the same as the current\
                  \ plan"
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /running/management/sessions/:
    post:
      tags:
      - running
      summary: Create a New Video Processing Session (Admin on Behalf of Another User)
      description: |
        This endpoint allows an **admin** (or sub-admin) to upload a **video file** for processing and create a new "session" resource **on behalf of another user**. The server will return a `session_id` that can be used to poll or retrieve the session details/results.

        ### Request Body (Multipart/Form-Data)

        You must supply the following fields:

        - **user_id** *(string, required)*: The ID of the user on whose behalf this session is created.
        - **video** *(file, required)*: The raw video file to be processed.
        - **session_name** *(string, optional)*: A human-readable name/title for the session.
        - **incline_degree** *(string or number, optional)*: Numeric value representing the incline degree.

        ### Response Structure

        On success (HTTP 200), the response is a JSON object with:

        - **session_id** *(string)*: A unique identifier for the created session.
        - **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).

        ### Workflow
        1. **POST** a multipart/form-data request containing the required fields `user_id` and `video`, plus any optional fields.
        2. Provide a valid Bearer token in the `Authorization` header.
        3. The caller must have admin privileges to successfully create a session for another user.
        4. If successful, the server responds with `session_id` and `title`.
        5. If an error occurs (e.g., missing fields, lack of permissions), a JSON object with an `error` key is returned.

        #### Example cURL:

        ```bash
        curl -X POST \
             -H 'Content-Type: multipart/form-data' \
             -H 'Authorization: Bearer <YOUR_ADMIN_TOKEN>' \
             -F 'user_id=someUserId123' \
             -F 'video=@/path/to/video.mp4' \
             -F 'session_name=Custom Session' \
             -F 'incline_degree=5' \
             https://<backend-link>/running/management/sessions/
        ```
      operationId: running_management_sessions_create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - user_id
              - video
              type: object
              properties:
                user_id:
                  type: string
                  description: "**Required.** The ID of the user for whom this session\
                    \ is created (form field: text)."
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field: text)."
                incline_degree:
                  type: string
                  description: "**Optional.** A numeric string indicating the incline\
                    \ degree (form field: text)."
          application/x-www-form-urlencoded:
            schema:
              required:
              - user_id
              - video
              type: object
              properties:
                user_id:
                  type: string
                  description: "**Required.** The ID of the user for whom this session\
                    \ is created (form field: text)."
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field: text)."
                incline_degree:
                  type: string
                  description: "**Optional.** A numeric string indicating the incline\
                    \ degree (form field: text)."
        required: true
      responses:
        "200":
          description: Video processing session created successfully (HTTP 200).
          content:
            application/json:
              schema:
                required:
                - session_id
                - title
                type: object
                properties:
                  session_id:
                    type: string
                    description: The unique identifier for the created session.
                  title:
                    type: string
                    description: The session title (defaults if not provided).
              example:
                session_id: abcd1234efgh5678
                title: Custom Session
        "400":
          description: "Bad Request - Possibly due to missing `user_id`, missing `video`,\
            \ or invalid form data."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: user_id is required
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating a missing or invalid token.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have admin permission to create
            sessions for others.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: "Not Found - Indicates business logic issues or resource limitations\
            \ (e.g., session limit)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
              example:
                error: User has reached the maximum number of sessions.
        "500":
          description: Internal Server Error - Unexpected error occurred on the server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating a server-side failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /running/sessions/:
    post:
      tags:
      - running
      summary: Create a New Video Processing Session
      description: "This endpoint allows an authenticated (and authorized) user to\
        \ upload a **video file** for processing and create a new \"session\" resource.\
        \ The server will return a `session_id` that can be used to poll or retrieve\
        \ the session details/results.\n\n### Request Body (Multipart/Form-Data)\n\
        \nYou must supply the following fields:\n\n- **video** *(file, required)*:\
        \ The raw video file to be processed. \n- **session_name** *(string, optional)*:\
        \ A human-readable name/title for the session. \n- **incline_degree** *(string\
        \ or number, optional)*: Numeric value representing the incline degree.\n\n\
        ### Response Structure\n\nOn success (HTTP 200), the response is a JSON object\
        \ with:\n\n- **session_id** *(string)*: A unique identifier for the created\
        \ session.\n- **title** *(string)*: The session title (defaults to a fallback\
        \ if `session_name` was not provided).\n\n### Workflow\n1. **POST** a multipart/form-data\
        \ request containing the required `video` field and any optional fields.\n\
        2. Provide a valid Bearer token in the `Authorization` header.\n3. If successful,\
        \ the server responds with `session_id` and `title`.\n4. If an error occurs\
        \ (e.g., missing video, lack of permissions), a JSON object with an `error`\
        \ key is returned.\n\n#### Example cURL:\n\n```bash\ncurl -X POST \\\n   \
        \  -H 'Content-Type: multipart/form-data' \\\n     -H 'Authorization: Bearer\
        \ <YOUR_TOKEN>' \\\n     -F 'video=@/path/to/video.mp4' \\\n     -F 'session_name=Morning\
        \ Run' \\\n     -F 'incline_degree=5' \\\n     https://<backend-link>/running/sessions/\n\
        ```\n"
      operationId: running_sessions_create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - video
              type: object
              properties:
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field type: text)."
                incline_degree:
                  type: string
                  description: "**Optional.** A numeric string indicating the incline\
                    \ degree (form field type: text)."
          application/x-www-form-urlencoded:
            schema:
              required:
              - video
              type: object
              properties:
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field type: text)."
                incline_degree:
                  type: string
                  description: "**Optional.** A numeric string indicating the incline\
                    \ degree (form field type: text)."
        required: true
      responses:
        "200":
          description: Video processing session created successfully (HTTP 200).
          content:
            application/json:
              schema:
                required:
                - session_id
                - title
                type: object
                properties:
                  session_id:
                    type: string
                    description: The unique identifier for the created session.
                  title:
                    type: string
                    description: The session title (defaults if not provided).
              example:
                session_id: abcd1234efgh5678
                title: My Morning Run
        "400":
          description: Bad Request - Possibly due to missing video file or invalid
            form data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: No video file was provided
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating a missing or invalid token.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have permission to create sessions
            (admin-only).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: "Not Found - Indicates business logic issues or resource limitations\
            \ (e.g., session limit)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
              example:
                error: User has reached the maximum number of sessions.
        "500":
          description: Internal Server Error - Unexpected error occurred on the server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating a server-side failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /running/sessions/metrics/total/:
    get:
      tags:
      - running
      summary: Retrieve Total Metrics
      description: |-
        Calculates and returns the average metrics for all running sessions of the admin user, along with the detailed metrics and creation timestamp of the most recent session.

        ### Response Structure (HTTP 200)

        The response is a JSON object with the following structure:

        - **avg_metrics** *(object)*: Contains the average values calculated across all sessions.
          - **avg_speed** *(number)*: Average speed.
          - **avg_power** *(number)*: Average power.
          - **avg_cadence** *(number)*: Average cadence.
          - **avg_flight_time** *(number)*: Average flight time.

        - **last_session_metrics** *(object)*: Contains detailed metrics for the most recent session.
          - **speed** *(object)*: Speed metrics with:
              - **avg** *(number)*: Average speed.
              - **min** *(number)*: Minimum speed.
              - **max** *(number)*: Maximum speed.
          - **normalized_power** *(object)*: Normalized power metrics with keys `avg`, `min`, `max`.
          - **cadence** *(object)*: Cadence metrics with keys `avg`, `min`, `max`.
          - **total_distance** *(number)*: Total distance.
          - **power** *(object)*: Power metrics with keys `avg`, `min`, `max`.
          - **stride_time** *(object)*: Stride time metrics with keys `avg`, `min`, `max`.
          - **total_time** *(number)*: Total session time.
          - **contact_time** *(object)*: Contact time metrics with keys `avg`, `min`, `max`.
          - **contact_angle** *(object)*: Contact angle metrics with keys `avg`, `min`, `max`.
          - **incline** *(object)*: Incline metrics with keys `avg`, `min`, `max`.
          - **pace** *(object)*: Pace metrics with keys `avg`, `min`, `max`.
          - **stride_length** *(object)*: Stride length metrics with keys `avg`, `min`, `max`.
          - **rbalance** *(object)*: Balance metrics with keys `avg`, `min`, `max`.
          - **flight_time** *(object)*: Flight time metrics with keys `avg`, `min`, `max`.
          - **footstrike** *(string)*: The footstrike type (e.g., 'midfoot').

        - **last_session_created_at** *(object)*: The creation timestamp of the most recent session, containing:
          - **date** *(string)*: Date in DD/MM/YYYY format.
          - **time** *(string)*: Time in HH:MM AM/PM format.

        ### Error Handling

        - **400 Bad Request**: Invalid request parameters (e.g., invalid admin UID).
        - **401 Unauthorized**: Missing or invalid access token.
        - **403 Forbidden**: Insufficient privileges to retrieve total metrics.
        - **404 Not Found**: No sessions found or metrics unavailable.
        - **500 Internal Server Error**: An unexpected error occurred on the server.

        ### Security

        A valid Bearer token must be provided in the `Authorization` header.
      operationId: running_sessions_metrics_total_list
      responses:
        "200":
          description: Total metrics successfully retrieved.
          content:
            application/json:
              schema:
                required:
                - avg_metrics
                - last_session_created_at
                - last_session_metrics
                type: object
                properties:
                  avg_metrics:
                    required:
                    - avg_cadence
                    - avg_flight_time
                    - avg_power
                    - avg_speed
                    type: object
                    properties:
                      avg_speed:
                        type: number
                        description: Average speed.
                      avg_power:
                        type: number
                        description: Average power.
                      avg_cadence:
                        type: number
                        description: Average cadence.
                      avg_flight_time:
                        type: number
                        description: Average flight time.
                    description: Average metrics across all sessions.
                  last_session_metrics:
                    required:
                    - cadence
                    - contact_angle
                    - contact_time
                    - flight_time
                    - footstrike
                    - incline
                    - normalized_power
                    - pace
                    - power
                    - rbalance
                    - speed
                    - stride_length
                    - stride_time
                    - total_distance
                    - total_time
                    type: object
                    properties:
                      speed:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average speed.
                          min:
                            type: number
                            description: Minimum speed.
                          max:
                            type: number
                            description: Maximum speed.
                        description: Speed metrics.
                      normalized_power:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average normalized power.
                          min:
                            type: number
                            description: Minimum normalized power.
                          max:
                            type: number
                            description: Maximum normalized power.
                        description: Normalized power metrics.
                      cadence:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average cadence.
                          min:
                            type: number
                            description: Minimum cadence.
                          max:
                            type: number
                            description: Maximum cadence.
                        description: Cadence metrics.
                      total_distance:
                        type: number
                        description: Total distance covered in the session.
                      power:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average power.
                          min:
                            type: number
                            description: Minimum power.
                          max:
                            type: number
                            description: Maximum power.
                        description: Power metrics.
                      stride_time:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average stride time.
                          min:
                            type: number
                            description: Minimum stride time.
                          max:
                            type: number
                            description: Maximum stride time.
                        description: Stride time metrics.
                      total_time:
                        type: number
                        description: Total time of the session.
                      contact_time:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average contact time.
                          min:
                            type: number
                            description: Minimum contact time.
                          max:
                            type: number
                            description: Maximum contact time.
                        description: Contact time metrics.
                      contact_angle:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average contact angle.
                          min:
                            type: number
                            description: Minimum contact angle.
                          max:
                            type: number
                            description: Maximum contact angle.
                        description: Contact angle metrics.
                      incline:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average incline.
                          min:
                            type: number
                            description: Minimum incline.
                          max:
                            type: number
                            description: Maximum incline.
                        description: Incline metrics.
                      pace:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average pace.
                          min:
                            type: number
                            description: Minimum pace.
                          max:
                            type: number
                            description: Maximum pace.
                        description: Pace metrics.
                      stride_length:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average stride length.
                          min:
                            type: number
                            description: Minimum stride length.
                          max:
                            type: number
                            description: Maximum stride length.
                        description: Stride length metrics.
                      rbalance:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average balance.
                          min:
                            type: number
                            description: Minimum balance.
                          max:
                            type: number
                            description: Maximum balance.
                        description: Balance metrics.
                      flight_time:
                        required:
                        - avg
                        - max
                        - min
                        type: object
                        properties:
                          avg:
                            type: number
                            description: Average flight time.
                          min:
                            type: number
                            description: Minimum flight time.
                          max:
                            type: number
                            description: Maximum flight time.
                        description: Flight time metrics.
                      footstrike:
                        type: string
                        description: "The footstrike type (e.g., 'midfoot')."
                    description: Detailed metrics for the most recent session.
                  last_session_created_at:
                    required:
                    - date
                    - time
                    type: object
                    properties:
                      date:
                        type: string
                        description: Creation date in DD/MM/YYYY format.
                      time:
                        type: string
                        description: Creation time in HH:MM AM/PM format.
                    description: Creation timestamp of the most recent session.
              example:
                avg_metrics:
                  avg_speed: 2.4107943924101263
                  avg_power: 299.24035514304535
                  avg_cadence: 157.35377125682285
                  avg_flight_time: 0.10803262246023908
                last_session_metrics:
                  speed:
                    avg: 2.760333333333333
                    min: 2.693
                    max: 2.828
                  normalized_power:
                    avg: 3.04
                    min: 2.99
                    max: 3.13
                  cadence:
                    avg: 169.96666666666667
                    min: 167.8
                    max: 173.9
                  total_distance: 24.802
                  power:
                    avg: 212.66666666666666
                    min: 209
                    max: 219
                  stride_time:
                    avg: 0.35305666666666663
                    min: 0.345
                    max: 0.3575
                  total_time: 8.985
                  contact_time:
                    avg: 0.23916666666666667
                    min: 0.23688
                    max: 0.24312
                  contact_angle:
                    avg: 84.581
                    min: 84.06
                    max: 85.514
                  incline:
                    avg: 0
                    min: 0
                    max: 0
                  pace:
                    avg: 6.040326197822259
                    min: 5.893446487505894
                    max: 6.188884762965713
                  stride_length:
                    avg: 0.6600536533333333
                    min: 0.6537888
                    max: 0.67165
                  rbalance:
                    avg: 45.86
                    min: 44.47
                    max: 46.67
                  flight_time:
                    avg: 0.11389
                    min: 0.10812
                    max: 0.11917
                  footstrike: midfoot
                last_session_created_at:
                  date: 05/02/2025
                  time: 06:00 PM
        "400":
          description: "Bad Request - Invalid parameters (e.g., invalid admin UID)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message explaining the invalid request.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that a valid Bearer token was not
                      provided.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have sufficient privileges to
            retrieve total metrics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient permissions.
              example:
                error: Access denied.
        "404":
          description: Not Found - No sessions found or metrics unavailable.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that no sessions or metrics
                      were found.
              example:
                error: Session not found
        "500":
          description: Internal Server Error - An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
  /running/sessions/{session_id}/:
    get:
      tags:
      - running
      summary: Retrieve Running Session Details
      description: |-
        Retrieves detailed information for a specific running session identified by the `session_id`.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the session to retrieve.

        ### Response Structure
        On success (HTTP 200), the response is a JSON object containing the following fields:

        - **metrics** *(object)*: A dictionary of metric arrays (e.g., speed, cadence, distance). Each key maps to an array of numbers.
        - **angles** *(object)*: A dictionary of angle arrays (e.g., lhip_angle, rsho_angle). Each key maps to an array of numbers.
        - **all_timestamps** *(array[number])*: A list of timestamps (in seconds) for the session data.
        - **analyzed_video_url** *(string, URI)*: The URL for the analyzed video (with keypoints overlay).
        - **video_url** *(string, URI)*: The URL for the original uploaded video.
        - **segments** *(integer)*: The number of segments processed.
        - **created_at** *(object)*: An object containing:
            - **date** *(string)*: The creation date in DD/MM/YYYY format.
            - **time** *(string)*: The creation time in HH:MM AM/PM format.
        - **user_name** *(string)*: The name of the user associated with the session.
        - **activity** *(string)*: The activity type (e.g., 'Running').
        - **title** *(string)*: The title of the session.
        - **calculated_metrics** *(object)*: A dictionary containing computed statistics (such as averages, minima, and maxima) for various metrics.
        - **summary** *(string)*: An optional textual summary of the session.

        ### Error Handling
        - **400 Bad Request**: The request parameters are invalid (e.g., invalid admin UID).
        - **401 Unauthorized**: The access token is missing or invalid.
        - **403 Forbidden**: The user does not have sufficient privileges to access the session.
        - **404 Not Found**: The session does not exist or is not valid for the specified activity.
        - **500 Internal Server Error**: An unexpected server-side error occurred.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: running_sessions_read
      parameters:
      - name: session_id
        in: path
        description: The unique session identifier.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Session data successfully retrieved.
          content:
            application/json:
              schema:
                required:
                - activity
                - all_timestamps
                - angles
                - metrics
                type: object
                properties:
                  metrics:
                    type: object
                    additionalProperties:
                      type: number
                    description: A dictionary of metric arrays.
                  angles:
                    type: object
                    additionalProperties:
                      type: number
                    description: A dictionary of angle arrays.
                  all_timestamps:
                    type: array
                    description: List of timestamps associated with the session.
                    items:
                      type: number
                  analyzed_video_url:
                    type: string
                    description: The public URL of the analyzed video.
                    format: uri
                  video_url:
                    type: string
                    description: The public URL of the original video.
                    format: uri
                  segments:
                    type: integer
                    description: The number of segments processed.
                  created_at:
                    type: object
                    properties:
                      date:
                        type: string
                        description: Creation date in DD/MM/YYYY format.
                      time:
                        type: string
                        description: Creation time in HH:MM AM/PM format.
                    description: Timestamp when the session was created.
                  user_name:
                    type: string
                    description: The name of the user associated with this session.
                  activity:
                    type: string
                    description: "The type of activity (e.g., 'Running')."
                  title:
                    type: string
                    description: The session title.
                  calculated_metrics:
                    type: object
                    additionalProperties:
                      type: number
                    description: "Computed metrics (average, min, max values) for\
                      \ the session."
                  summary:
                    type: string
                    description: An optional summary of the session.
              example:
                metrics:
                  speed:
                  - 2.899
                  - 3.047
                  - 2.905
                  cadence:
                  - 173.9
                  - 168.6
                  - 170.2
                angles:
                  lelb_angle:
                  - 30
                  - 35
                  - 33
                  lhip_angle:
                  - 40
                  - 42
                  - 41
                all_timestamps:
                - 0.033
                - 0.067
                - 0.1
                analyzed_video_url: https://storage.googleapis.com/your-bucket/analyzed_video.mp4
                video_url: https://storage.googleapis.com/your-bucket/original_video.mov
                segments: 3
                created_at:
                  date: 19/12/2024
                  time: 11:57 PM
                user_name: Lee Jhon
                activity: Running
                title: Session Title
                calculated_metrics:
                  speed:
                    avg: 2.95
                    min: 2.899
                    max: 3.047
                  cadence:
                    avg: 170.9
                    min: 168.6
                    max: 173.9
                  total_distance: 26.509
                  total_time: 8.985
                summary: Optional session summary text.
        "400":
          description: Bad Request - Invalid parameters or admin UID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message explaining the invalid request.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that a valid Bearer token was not
                      provided.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user is not authorized to access this session.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient permissions to access
                      the session data.
              example:
                error: Access denied.
        "404":
          description: Not Found - The requested session does not exist or the activity
            is not 'Running'.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the session was not
                      found.
              example:
                error: The session does not exist.
        "500":
          description: Internal Server Error - An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
  /running/sessions/{session_id}/export/:
    get:
      tags:
      - running
      summary: Export Running Session Data
      description: |-
        Retrieves detailed session data for exporting a specific running session identified by the `session_id`.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the session to export.

        ### Response Structure (HTTP 200)
        The response is a JSON object that includes:

        - **metrics** *(object)*: A dictionary where each key represents a metric (e.g., 'speed', 'cadence') and its value is an array of numbers.
        - **keypoints** *(object)*: A dictionary where each key represents a keypoint (e.g., 'lknev', 'ltoev') and its value is an array of numbers.
        - **angles** *(object)*: A dictionary where each key represents an angle (e.g., 'lelb_angle', 'lhip_angle') and its value is an array of numbers.
        - **all_timestamps** *(array[number])*: An array of timestamps (in seconds) corresponding to the data points.
        - **contact** *(array[boolean])*: An array of boolean values indicating contact status.
        - **activity** *(string)*: The activity type (e.g., 'Running').

        ### Error Handling
        - **400 Bad Request**: The request parameters are invalid (e.g., an invalid admin UID).
        - **401 Unauthorized**: The access token is missing or invalid.
        - **403 Forbidden**: The user does not have sufficient privileges to access this session data.
        - **404 Not Found**: The requested session does not exist or is invalid for the activity.
        - **500 Internal Server Error**: An unexpected server error occurred.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: running_sessions_export_list
      parameters:
      - name: session_id
        in: path
        description: The unique identifier of the session to export.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Session data successfully exported.
          content:
            application/json:
              schema:
                required:
                - activity
                - all_timestamps
                - angles
                - contact
                - keypoints
                - metrics
                type: object
                properties:
                  metrics:
                    type: object
                    additionalProperties:
                      type: number
                    description: "A dictionary of metric arrays (e.g., speed, cadence,\
                      \ etc.)."
                  keypoints:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: number
                    description: A dictionary of keypoint arrays.
                  angles:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: number
                    description: A dictionary of angle arrays.
                  all_timestamps:
                    type: array
                    description: List of timestamps (in seconds).
                    items:
                      type: number
                  contact:
                    type: array
                    description: Array indicating contact status (true/false).
                    items:
                      type: boolean
                  activity:
                    type: string
                    description: "The activity type (e.g., 'Running')."
              example:
                metrics:
                  technique:
                  - 0
                  - 0
                  - 0
                  push_angle:
                  - 72.035
                  - 71.204
                  - 71.663
                  contact_stability:
                  - 0.604
                  - 0.793
                  - 0.511
                  power:
                  - 209
                  - 219
                  - 210
                keypoints:
                  lknev:
                  - 0.1
                  - 0.2
                  - 0.3
                  ltoev:
                  - 0.4
                  - 0.5
                  - 0.6
                  relbv:
                  - 0.7
                  - 0.8
                  - 0.9
                  rtoey:
                  - 1
                  - 1.1
                  - 1.2
                  headv:
                  - 1.3
                  - 1.4
                  - 1.5
                angles:
                  lelb_angle:
                  - 30
                  - 35
                  - 33
                  lhip_angle:
                  - 40
                  - 42
                  - 41
                all_timestamps:
                - 0.033
                - 0.067
                - 0.1
                contact:
                - false
                - true
                - false
                activity: Running
        "400":
          description: "Bad Request - The request parameters are invalid (e.g., invalid\
            \ admin UID)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message explaining the invalid request.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that the access token is missing
                      or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have sufficient privileges to
            access this session data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient permissions.
              example:
                error: Access denied.
        "404":
          description: Not Found - The requested session does not exist or the activity
            is not valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the session was not
                      found.
              example:
                error: Session not found
        "500":
          description: Internal Server Error - An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
  /running/sessions/{session_id}/form-analysis/:
    post:
      tags:
      - running
      summary: Generate Form Analysis Images (Deprecated)
      description: |-
        Generates (or retrieves) form analysis images for a given running session. Requires a valid payment plan and admin privileges.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the session.

        ### Response Structure (HTTP 200)

        On success, the response is a JSON object categorizing image URLs by language:

        - **contact_angles** *(object)*: URLs for contact angle plots.
          - **en** *(string, URI)*: English version of the contact angle plot.
          - **ru** *(string, URI)*: Russian version of the contact angle plot.
        - **push_angles** *(object)*: URLs for push angle plots.
          - **en** *(string, URI)*: English version of the push angle plot.
          - **ru** *(string, URI)*: Russian version of the push angle plot.
        - **knee_ankle** *(object)*: URLs for knee-ankle plots.
          - **en** *(string, URI)*: English version of the knee-ankle plot.
          - **ru** *(string, URI)*: Russian version of the knee-ankle plot.

        ### Error Handling

        - **400 Bad Request**: Invalid parameters (e.g., invalid admin UID).
        - **401 Unauthorized**: Missing or invalid access token.
        - **403 Forbidden**: User does not have a supported payment plan.
        - **404 Not Found**: Images could not be generated or session not found.
        - **500 Internal Server Error**: An unexpected error occurred.

        ### Security

        A valid Bearer token must be provided in the `Authorization` header.
      operationId: running_sessions_form-analysis_create
      parameters:
      - name: session_id
        in: path
        description: The session ID for which form analysis images are generated/retrieved.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Form analysis images retrieved or generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  contact_angles:
                    type: object
                    properties:
                      en:
                        type: string
                        description: URL for the English contact angle image.
                        format: uri
                      ru:
                        type: string
                        description: URL for the Russian contact angle image.
                        format: uri
                    description: URLs for contact angle images (English & Russian).
                  push_angles:
                    type: object
                    properties:
                      en:
                        type: string
                        description: URL for the English push angle image.
                        format: uri
                      ru:
                        type: string
                        description: URL for the Russian push angle image.
                        format: uri
                    description: URLs for push angle images (English & Russian).
                  knee_ankle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: URL for the English knee-ankle image.
                        format: uri
                      ru:
                        type: string
                        description: URL for the Russian knee-ankle image.
                        format: uri
                    description: URLs for knee-ankle images (English & Russian).
              example:
                contact_angles:
                  en: https://storage.googleapis.com/.../plot_contact_angle_en.png
                  ru: https://storage.googleapis.com/.../plot_contact_angle_ru.png
                push_angles:
                  en: https://storage.googleapis.com/.../plot_push_angle_en.png
                  ru: https://storage.googleapis.com/.../plot_push_angle_ru.png
                knee_ankle:
                  en: https://storage.googleapis.com/.../plot_knee_ankle_en.png
                  ru: https://storage.googleapis.com/.../plot_knee_ankle_ru.png
        "400":
          description: Bad Request - Potentially invalid parameters or admin UID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message about invalid parameters.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Access token is missing or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - Payment plan not supported or insufficient permissions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: User does not have a supported payment plan.
              example:
                error: Payment plan not supported.
        "404":
          description: "Not Found - Failed to generate or retrieve images, or session\
            \ not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating why images or session were
                      not found.
              example:
                error: An unexpected error occurred.
        "500":
          description: Internal Server Error - A server-side error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message about server-side failure.
              example:
                error: "An unexpected error occurred: <error>"
      security:
      - Bearer: []
  /running/sessions/{session_id}/gait-analysis/:
    post:
      tags:
      - running
      summary: Gait Analysis Report
      description: "Retrieves a detailed gait analysis report for a given session.\
        \ The endpoint requires the user to have a valid admin token and an active\
        \ subscription plan (Pro, Premium, Enterprise, or Standard). \n\n### Request\n\
        - **Path Parameter**: \n    - **session_id** *(string, required)*: The unique\
        \ identifier of the session for which the gait analysis report is requested.\n\
        \n### Response Structure (HTTP 200)\n\nThe response is a JSON object containing:\n\
        - **peak_time** *(number)*: The peak time value identified in the gait analysis.\n\
        - **phases** *(object)*: An object containing phase details. Each phase (e.g.:\n\
        \    - **flight** and **takeoff**) is an object with:\n      - **video_frame**\
        \ *(integer)*: The video frame corresponding to the phase.\n      - **graph_phase**\
        \ *(integer)*: The phase value used for graph representations.\n      - **video_phase**\
        \ *(integer)*: The phase value as seen in the video.\n      - **image_url**\
        \ *(string, URI)*: The public URL for the image representing the phase.\n\n\
        - **angles** *(object)*: An object containing angle measurements for specific\
        \ joints. For example:\n    - **lank_angle** and **lkne_angle** are objects\
        \ with:\n      - **current** *(array[number])*: The current measured angle\
        \ values.\n      - **next** *(array[number])*: The subsequent measured angle\
        \ values.\n      - **std_dev** *(array[number])*: The standard deviation of\
        \ these measurements.\n\n- **user_info** *(object)*: Contains information\
        \ about the user associated with the session, including:\n    - **age** *(string)*:\
        \ The user's age.\n    - **height** *(number)*: The user's height in centimeters.\n\
        \    - **weight** *(number)*: The user's weight in kilograms.\n    - **email**\
        \ *(string, email)*: The user's email address.\n\n- **date** *(string)*: The\
        \ date of the gait analysis report in DD/MM/YYYY format.\n\n### Error Handling\n\
        \n- **400 Bad Request**: Invalid token or parameters.\n- **401 Unauthorized**:\
        \ Token is missing or invalid.\n- **403 Forbidden**: Admin access is required.\n\
        - **404 Not Found**: The session was not found or the user does not have a\
        \ valid payment plan.\n- **500 Internal Server Error**: An unexpected error\
        \ occurred on the server.\n\n### Security\n\nA valid Bearer token must be\
        \ provided in the `Authorization` header."
      operationId: running_sessions_gait-analysis_create
      parameters:
      - name: session_id
        in: path
        description: The unique identifier of the session for which the gait analysis
          report is requested.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Gait Analysis Report retrieved successfully.
          content:
            application/json:
              schema:
                required:
                - angles
                - date
                - peak_time
                - phases
                - user_info
                type: object
                properties:
                  peak_time:
                    type: number
                    description: The peak time value identified in the gait analysis.
                  phases:
                    type: object
                    properties:
                      flight:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        - video_phase
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: The video frame corresponding to the flight
                              phase.
                          graph_phase:
                            type: integer
                            description: The phase value used in graph representations
                              for the flight phase.
                          video_phase:
                            type: integer
                            description: The phase value as seen in the video for
                              the flight phase.
                          image_url:
                            type: string
                            description: The public URL of the flight phase image.
                            format: uri
                        description: Details for the flight phase.
                      takeoff:
                        required:
                        - graph_phase
                        - image_url
                        - video_frame
                        - video_phase
                        type: object
                        properties:
                          video_frame:
                            type: integer
                            description: The video frame corresponding to the takeoff
                              phase.
                          graph_phase:
                            type: integer
                            description: The phase value used in graph representations
                              for the takeoff phase.
                          video_phase:
                            type: integer
                            description: The phase value as seen in the video for
                              the takeoff phase.
                          image_url:
                            type: string
                            description: The public URL of the takeoff phase image.
                            format: uri
                        description: Details for the takeoff phase.
                    description: Phase details for gait analysis.
                  angles:
                    type: object
                    properties:
                      lank_angle:
                        required:
                        - current
                        - next
                        - std_dev
                        type: object
                        properties:
                          current:
                            type: array
                            description: The current measured angle values.
                            items:
                              type: number
                          next:
                            type: array
                            description: The next measured angle values.
                            items:
                              type: number
                          std_dev:
                            type: array
                            description: The standard deviation of the angle values.
                            items:
                              type: number
                        description: Angle data for the left ankle.
                      lkne_angle:
                        required:
                        - current
                        - next
                        - std_dev
                        type: object
                        properties:
                          current:
                            type: array
                            description: The current measured angle values.
                            items:
                              type: number
                          next:
                            type: array
                            description: The next measured angle values.
                            items:
                              type: number
                          std_dev:
                            type: array
                            description: The standard deviation of the angle values.
                            items:
                              type: number
                        description: Angle data for the left knee.
                    description: Angle measurements for specific joints.
                  user_info:
                    required:
                    - age
                    - email
                    - height
                    - weight
                    type: object
                    properties:
                      age:
                        type: string
                        description: The age of the user.
                      height:
                        type: number
                        description: The user's height in centimeters.
                      weight:
                        type: number
                        description: The user's weight in kilograms.
                      email:
                        type: string
                        description: The user's email address.
                        format: email
                    description: User information associated with the session.
                  date:
                    type: string
                    description: The date of the gait analysis report in DD/MM/YYYY
                      format.
              example:
                peak_time: 46
                phases:
                  flight:
                    video_frame: 139
                    graph_phase: 270
                    video_phase: 323
                    image_url: https://storage.googleapis.com/.../flight.png
                  takeoff:
                    video_frame: 137
                    graph_phase: 255
                    video_phase: 308
                    image_url: https://storage.googleapis.com/.../takeoff.png
                angles:
                  lank_angle:
                    current:
                    - 1.23
                    - 2.34
                    - 3.45
                    next:
                    - 1.11
                    - 2.22
                    - 3.33
                    std_dev:
                    - 0.12
                    - 0.23
                    - 0.34
                  lkne_angle:
                    current:
                    - 1.23
                    - 2.34
                    - 3.45
                    next:
                    - 1.11
                    - 2.22
                    - 3.33
                    std_dev:
                    - 0.12
                    - 0.23
                    - 0.34
                user_info:
                  age: "20"
                  height: 180
                  weight: 79.8
                  email: leejhon5555@gmail.com
                date: 20/12/2024
        "400":
          description: Bad Request - Invalid token or parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message describing the invalid request.
              example:
                error: Invalid session data.
        "401":
          description: Unauthorized - Token is invalid or expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that the token is missing or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - Admin access is required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that admin privileges are required.
              example:
                error: Admin access required.
        "404":
          description: Not Found - Session not found or user does not have a valid
            payment plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the session was not
                      found or payment plan is invalid.
              example:
                error: Session not found
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: Internal server error.
      security:
      - Bearer: []
  /running/sessions/{session_id}/metrics/:
    get:
      tags:
      - running
      summary: Retrieve Report Metrics (Deprecated)
      description: "Retrieves aggregated report metrics for a running session identified\
        \ by the `session_id`. \n\n### Path Parameter\n- **session_id** *(string,\
        \ required)*: The unique identifier of the session for which metrics are to\
        \ be retrieved.\n\n### Response Structure (HTTP 200)\nThe response is a JSON\
        \ object that includes the following keys:\n\n- **metrics** *(object)*: A\
        \ dictionary where each key (e.g., 'technique', 'push_angle', etc.) maps to\
        \ an array of numeric values representing various performance metrics.\n-\
        \ **keypoints** *(object)*: A dictionary where each key (e.g., 'lknev', 'ltoev',\
        \ etc.) maps to an array of numeric values representing keypoint data.\n-\
        \ **angles** *(object)*: A dictionary where each key (e.g., 'lelb_angle',\
        \ 'lhip_angle', etc.) maps to an array of numeric values representing angle\
        \ measurements.\n- **all_timestamps** *(array[number])*: An array of timestamp\
        \ values (in seconds) corresponding to the collected data points.\n- **activity**\
        \ *(string)*: The type of activity (e.g., 'Running').\n- **user_status** *(string)*:\
        \ The status of the user (e.g., 'user' or 'admin').\n- **user_id** *(string)*:\
        \ The unique identifier of the user associated with the session.\n- **segments**\
        \ *(integer)*: The number of segments processed for the session.\n- **user_data**\
        \ *(object)*: An object containing detailed user information, including:\n\
        \    - **ycom** *(number)*: The YCOM value.\n    - **weight** *(number)*:\
        \ The user's weight in kilograms.\n    - **age** *(string)*: The user's age.\n\
        \    - **height** *(number)*: The user's height in centimeters.\n    - **phone**\
        \ *(string)*: The user's phone number.\n    - **leg_length** *(number)*: The\
        \ user's leg length in meters.\n    - **display_name** *(string)*: The user's\
        \ display name.\n    - **shoeSize** *(string)*: The user's shoe size.\n  \
        \  - **email** *(string, email)*: The user's email address.\n    - **gender**\
        \ *(string)*: The user's gender.\n    - **brand** *(string)*: The brand of\
        \ the user's shoes.\n    - **shoeModel** *(string)*: The model of the user's\
        \ shoes.\n    - **uid** *(string)*: The unique user ID.\n\n### Error Handling\n\
        - **400 Bad Request**: The request parameters are invalid (e.g., invalid admin\
        \ UID).\n- **401 Unauthorized**: The access token is missing or invalid.\n\
        - **403 Forbidden**: The user does not have sufficient privileges to access\
        \ the metrics.\n- **404 Not Found**: The session does not exist or is invalid.\n\
        - **500 Internal Server Error**: An unexpected error occurred on the server.\n\
        \n### Security\nA valid Bearer token must be provided in the `Authorization`\
        \ header."
      operationId: running_sessions_metrics_list
      parameters:
      - name: session_id
        in: path
        description: The unique session identifier.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Report metrics successfully retrieved.
          content:
            application/json:
              schema:
                required:
                - activity
                - all_timestamps
                - angles
                - keypoints
                - metrics
                - segments
                - user_data
                - user_id
                - user_status
                type: object
                properties:
                  metrics:
                    type: object
                    additionalProperties:
                      type: number
                    description: A dictionary of metric arrays.
                  keypoints:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: number
                    description: A dictionary of keypoint arrays.
                  angles:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: number
                    description: A dictionary of angle arrays.
                  all_timestamps:
                    type: array
                    description: Array of timestamps (in seconds) corresponding to
                      the data points.
                    items:
                      type: number
                  activity:
                    type: string
                    description: "The activity type (e.g., 'Running')."
                  user_status:
                    type: string
                    description: "The status of the user (e.g., 'user' or 'admin')."
                  user_id:
                    type: string
                    description: The unique identifier of the user associated with
                      the session.
                  segments:
                    type: integer
                    description: The number of segments processed for the session.
                  user_data:
                    type: object
                    properties:
                      ycom:
                        type: number
                        description: The YCOM value.
                      weight:
                        type: number
                        description: The user's weight in kilograms.
                      age:
                        type: string
                        description: The user's age.
                      height:
                        type: number
                        description: The user's height in centimeters.
                      phone:
                        type: string
                        description: The user's phone number.
                      leg_length:
                        type: number
                        description: The user's leg length in meters.
                      display_name:
                        type: string
                        description: The user's display name.
                      shoeSize:
                        type: string
                        description: The user's shoe size.
                      email:
                        type: string
                        description: The user's email address.
                        format: email
                      gender:
                        type: string
                        description: The user's gender.
                      brand:
                        type: string
                        description: The brand of the user's shoes.
                      shoeModel:
                        type: string
                        description: The model of the user's shoes.
                      uid:
                        type: string
                        description: The unique user identifier (UID).
                    description: An object containing detailed user information.
              example:
                metrics:
                  technique:
                  - 0
                  - 0
                  - 0
                  push_angle:
                  - 72.035
                  - 71.204
                  - 71.663
                  contact_stability:
                  - 0.604
                  - 0.793
                  - 0.511
                  power:
                  - 209
                  - 219
                  - 210
                  scale:
                  - 4.24944
                  - 4.2623
                  - 4.28003
                  distance:
                  - 8.267
                  - 8.468
                  - 8.067
                  contact_angle:
                  - 84.169
                  - 84.06
                  - 85.514
                  incline:
                  - 0
                  - 0
                  - 0
                  pyd:
                  - 1.082
                  - 1.108
                  - 1.114
                  speed_rh:
                  - 2.85
                  - 2.878
                  - 2.873
                  pace:
                  - 6.03865
                  - 5.89345
                  - 6.18888
                  stride_length:
                  - 0.6537888
                  - 0.67165
                  - 0.65472216
                  run_duration:
                  - 2.995
                  - 2.995
                  - 2.995
                  mean_markers_validity:
                  - 0.952
                  - 0.96
                  - 0.934
                  speed:
                  - 2.76
                  - 2.828
                  - 2.693
                  ycom:
                  - 0.957
                  - 0.957
                  - 0.957
                  elevation:
                  - 0
                  - 0
                  - 0
                  cadence:
                  - 173.9
                  - 168.2
                  - 167.8
                  pyd0:
                  - 1.082
                  - 1.108
                  - 1.114
                  stride_time:
                  - 0.345
                  - 0.35667
                  - 0.3575
                  mass:
                  - 70
                  - 70
                  - 70
                  contact_time:
                  - 0.23688
                  - 0.2375
                  - 0.24312
                  angular_speed:
                  - -30.275
                  - -31.368
                  - -28.132
                  speed_rt:
                  - 3.08
                  - 3.107
                  - 3.11
                  power0:
                  - 209
                  - 219
                  - 210
                  speed_lt:
                  - 2.721
                  - 2.805
                  - 2.653
                  speed_lh:
                  - 2.21
                  - 2.349
                  - 1.981
                  rbalance:
                  - 46.44
                  - 46.67
                  - 44.47
                  rbalance_stability:
                  - 80.85
                  - 87.36
                  - 83.9
                  incline_toe:
                  - 0.09347
                  - 0.08225
                  - 0.07673
                  flight_time:
                  - 0.10812
                  - 0.11917
                  - 0.11438
                  power_for_1kg:
                  - 2.99
                  - 3.13
                  - 3
                keypoints:
                  lknev:
                  - 0.1
                  - 0.2
                  - 0.3
                  ltoev:
                  - 0.4
                  - 0.5
                  - 0.6
                  relbv:
                  - 0.7
                  - 0.8
                  - 0.9
                  rtoey:
                  - 1
                  - 1.1
                  - 1.2
                  headv:
                  - 1.3
                  - 1.4
                  - 1.5
                angles:
                  lelb_angle:
                  - 30
                  - 35
                  - 33
                  lhip_angle:
                  - 40
                  - 42
                  - 41
                all_timestamps:
                - 0.033
                - 0.067
                - 0.1
                activity: Running
                user_status: user
                user_id: CMQe1HuAg4uMXqHE6dVO
                segments: 3
                user_data:
                  ycom: 0.957
                  weight: 70
                  age: "22"
                  height: 174
                  phone: "8328889011"
                  leg_length: 0.90915
                  display_name: Natalia Alioth
                  shoeSize: "6"
                  email: natalia3@gmail.com
                  gender: Female
                  brand: Fabletics
                  shoeModel: The Everyday Sneaker II
                  uid: CMQe1HuAg4uMXqHE6dVO
        "400":
          description: "Bad Request - Invalid parameters (e.g., invalid admin UID)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message explaining the invalid request.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that a valid Bearer token was not
                      provided.
              example:
                error: No token provided.
        "403":
          description: Forbidden - Insufficient privileges to access the report metrics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient permissions to access
                      the requested metrics.
              example:
                error: Access denied.
        "404":
          description: Not Found - The session does not exist or is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the session was not
                      found.
              example:
                error: Session not found
        "500":
          description: Internal Server Error - An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
  /running/sessions/{session_id}/recommendation/:
    post:
      tags:
      - running
      summary: Generate Recommendations for a Session (Deprecated)
      description: "Generates and returns a set of report recommendations for a given\
        \ session. \n\nThe endpoint requires the user to have a valid admin token\
        \ and an active subscription plan (Pro, Premium, Enterprise, or Standard).\
        \ \n\n### Path Parameter\n- **session_id** *(string, required)*: The unique\
        \ identifier of the session for which recommendations are generated.\n\n###\
        \ Response Structure (HTTP 200)\n\nOn success, the response is a JSON object\
        \ containing recommendations. Each recommendation field is an object with\
        \ language keys, for example:\n\n- **text_contact_angle** *(object)*:\n  \
        \  - **en** *(string)*: Recommendation text in English for adjusting the contact\
        \ angle.\n    - **ru** *(string)*: Recommendation text in Russian for adjusting\
        \ the contact angle.\n\n- **text_push_angle** *(object)*: Recommendation text\
        \ for the push angle.\n- **text_knee_ankle** *(object)*: Recommendation text\
        \ for knee-ankle alignment.\n- **text_right_ankle_angle** *(object)*: Detailed\
        \ recommendation for the right ankle angle.\n- **text_right_knee_angle** *(object)*:\
        \ Detailed recommendation for the right knee angle.\n- **text_left_ankle_angle**\
        \ *(object)*: Recommendation text for the left ankle angle.\n- **text_left_knee_angle**\
        \ *(object)*: Recommendation text for the left knee angle.\n- **text_hip_angle**\
        \ *(object)*: Recommendation text for the hip angle.\n- **text_summary** *(object)*:\
        \ Overall recommendations and summary text.\n\n### Error Handling\n\n- **400\
        \ Bad Request**: The request parameters are invalid (e.g., missing admin UID).\n\
        - **401 Unauthorized**: The access token is missing or invalid.\n- **403 Forbidden**:\
        \ Admin access is required to generate recommendations.\n- **404 Not Found**:\
        \ Session data not found or the user does not have a valid payment plan.\n\
        - **500 Internal Server Error**: An unexpected error occurred on the server.\n\
        \n### Security\n\nA valid Bearer token must be provided in the `Authorization`\
        \ header."
      operationId: running_sessions_recommendation_create
      parameters:
      - name: session_id
        in: path
        description: The unique identifier of the session for which recommendations
          are generated.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Recommendations for the session generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  text_contact_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Recommendation in English.
                      ru:
                        type: string
                        description: Recommendation in Russian.
                    description: Recommendation for adjusting the contact angle.
                  text_push_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Recommendation in English.
                      ru:
                        type: string
                        description: Recommendation in Russian.
                    description: Recommendation for the push angle.
                  text_knee_ankle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Recommendation in English.
                      ru:
                        type: string
                        description: Recommendation in Russian.
                    description: Recommendation for knee-ankle alignment.
                  text_right_ankle_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Recommendation in English.
                      ru:
                        type: string
                        description: Recommendation in Russian.
                    description: "Detailed recommendation for the right ankle angle.\
                      \ For example, it may suggest a range (e.g., 20° dorsiflexion\
                      \ to 30° plantarflexion) to support a natural gait."
                  text_right_knee_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Recommendation in English.
                      ru:
                        type: string
                        description: Recommendation in Russian.
                    description: "Recommendation for the right knee angle, including\
                      \ suggested flexion and extension ranges to ensure proper shock\
                      \ absorption and propulsion."
                  text_left_ankle_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Recommendation in English.
                      ru:
                        type: string
                        description: Recommendation in Russian.
                    description: Recommendation for the left ankle angle.
                  text_left_knee_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Recommendation in English.
                      ru:
                        type: string
                        description: Recommendation in Russian.
                    description: Recommendation for the left knee angle.
                  text_hip_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Recommendation in English.
                      ru:
                        type: string
                        description: Recommendation in Russian.
                    description: Recommendation for the hip angle.
                  text_summary:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Summary in English.
                      ru:
                        type: string
                        description: Summary in Russian.
                    description: Overall summary and recommendations.
              example:
                text_contact_angle:
                  en: Ensure the contact angle with the center of mass is adjusted
                  ru: "Убедитесь, что угол контакта с центром массы отрегулирован"
                text_push_angle:
                  en: Text for push angle
                  ru: Текст для угла толчка
                text_knee_ankle:
                  en: Text for knee ankle
                  ru: Текст для коленного голеностопного угла
                text_right_ankle_angle:
                  en: "Ensure your right ankle moves within a range of 20° dorsiflexion\
                    \ to 30° plantarflexion during the step cycle. This range supports\
                    \ a natural walking pattern, enhances efficiency, and reduces\
                    \ the risk of ankle injuries."
                  ru: "Убедитесь, что ваш правый голеностоп проходит диапазон движ\
                    ения от 20° дорсифлексии до 30° плантарной флексии во время ци\
                    кла шага. Этот диапазон поддерживает естественный рисунок похо\
                    дки, повышает эффективность и снижает вероятность травм голено\
                    стопа."
                text_right_knee_angle:
                  en: "Aim for your right knee to flex to about 40° during the foot\
                    \ strike and extend to roughly 180° during the take-off phase.\
                    \ Maintaining this range allows for better shock absorption and\
                    \ propulsion, reducing stress on the knee joints."
                  ru: "Стремитесь к тому, чтобы ваше правое колено сгибалось до 40°\
                    \ при ударе ноги о землю и разгибалось до примерно 180° в фазе\
                    \ отрыва. Сохранение этого диапазона позволяет лучше поглощать\
                    \ удары и обеспечивать толчок, снижая нагрузку на коленные сус\
                    тавы."
                text_left_ankle_angle:
                  en: "During a step cycle, your left ankle should move within a range\
                    \ between 20° dorsiflexion to 30° plantarflexion, mirroring the\
                    \ right ankle. This balance helps maintain a symmetric and efficient\
                    \ gait, minimizing the risk of imbalance-related injuries."
                  ru: "В течение цикла шага ваш левый голеностоп должен двигаться\
                    \ в диапазоне от 20° дорсифлексии до 30° плантарной флексии, а\
                    налогично правому голеностопу. Этот баланс помогает поддержива\
                    ть симметричную и эффективную походку, минимизируя риск травм\
                    , связанных с дисбалансом."
                text_left_knee_angle:
                  en: The left knee should flex to about 40° upon foot strike and
                    extend to roughly 180° during take-off. This consistency with
                    the right knee ensures balanced load distribution and effective
                    shock absorption throughout the step cycle.
                  ru: Левое колено должно сгибаться до примерно 40° при ударе ноги
                    о землю и разгибаться до 180° в фазе отрыва. Это согласование
                    с правым коленом обеспечит сбалансированное распределение нагрузки
                    и эффективное поглощение ударов.
                text_hip_angle:
                  en: "Your hip angle should vary between 10° flexion and 20° extension\
                    \ throughout the step cycle. Maintaining this range allows for\
                    \ an effective transfer of energy and appropriate shock absorption,\
                    \ aiding in both performance and injury prevention."
                  ru: "Угол сгибания бедра должен варьироваться от 10° при сгибани\
                    и до 20° при разгибании в течение цикла шага. Поддержание этог\
                    о диапазона способствует эффективной передаче энергии и надлеж\
                    ащему поглощению ударов, что способствует улучшению производит\
                    ельности и предотвращению травм."
                text_summary:
                  en: "To enhance your running performance, focus on increasing your\
                    \ cadence to around 180 steps per minute, which helps improve\
                    \ speed and reduce impact forces. Balance your gait by ensuring\
                    \ symmetrical ankle and knee angles. Opt for neutral running shoes\
                    \ with good cushioning and a heel drop between 8-10mm, like the\
                    \ Asics Gel-Nimbus, to provide sufficient support and shock absorption."
                  ru: "Для улучшения ваших результатов в беге сосредоточьтесь на у\
                    величении частоты шагов до примерно 180 шагов в минуту, что по\
                    могает повысить скорость и уменьшить ударные нагрузки. Сбаланс\
                    ируйте свою походку, обеспечив симметричные углы голеностопных\
                    \ и коленных суставов. Выберите нейтральные беговые кроссовки\
                    \ с хорошей амортизацией и перепадом пятка-носок между 8-10 мм\
                    , такие как Asics Gel-Nimbus, чтобы обеспечить достаточную под\
                    держку и поглощение ударов."
        "400":
          description: Bad Request - Invalid parameters or token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message describing the invalid request.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Access token is missing or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - Admin privileges required to generate recommendations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: User must have admin privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: Not Found - Session data not found or user does not have a
            valid payment plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Session not found or invalid payment plan.
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /running/sessions/{session_id}/report-comments/:
    get:
      tags:
      - running
      summary: Retrieve Session Comments
      description: "Retrieves the report comments for a specific session. \n\n###\
        \ Path Parameter\n- **session_id** *(string, required)*: The unique identifier\
        \ of the session for which comments are requested.\n\n### Response Structure\
        \ (HTTP 200)\n\nOn success, the response is a JSON object containing language-specific\
        \ comments. For example:\n\n- **text_summary** *(object)*: Contains summary\
        \ comments in different languages.\n    - **en** *(string)*: Summary in English.\n\
        \    - **ru** *(string)*: Summary in Russian.\n- **text_contact_angle** *(object)*:\
        \ Contact angle comments.\n- **text_push_angle** *(object)*: Push angle comments.\n\
        - **text_knee_ankle** *(object)*: Knee-ankle comments.\n- **text_hip_angle**\
        \ *(object)*: Hip angle comments.\n- **text_left_ankle_angle** *(object)*:\
        \ Left ankle angle comments.\n- **text_left_knee_angle** *(object)*: Left\
        \ knee angle comments.\n- **text_right_ankle_angle** *(object)*: Right ankle\
        \ angle comments.\n- **text_right_knee_angle** *(object)*: Right knee angle\
        \ comments.\n\n### Error Handling\n\n- **400 Bad Request**: Invalid request\
        \ parameters.\n- **401 Unauthorized**: Missing or invalid access token.\n\
        - **403 Forbidden**: Insufficient privileges (admin access required).\n- **404\
        \ Not Found**: Comments not found for the given session.\n- **500 Internal\
        \ Server Error**: An unexpected error occurred on the server.\n\n### Security\n\
        \nA valid Bearer token must be provided in the `Authorization` header."
      operationId: running_sessions_report-comments_list
      parameters:
      - name: session_id
        in: path
        description: The unique session identifier.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Session comments retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  text_summary:
                    type: object
                    properties:
                      en:
                        type: string
                        description: Summary in English.
                      ru:
                        type: string
                        description: Summary in Russian.
                    description: Summary comments in multiple languages.
                  text_contact_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: English text.
                      ru:
                        type: string
                        description: Russian text.
                    description: Contact angle comments.
                  text_push_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: English text.
                      ru:
                        type: string
                        description: Russian text.
                    description: Push angle comments.
                  text_knee_ankle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: English text.
                      ru:
                        type: string
                        description: Russian text.
                    description: Knee ankle comments.
                  text_hip_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: English text.
                      ru:
                        type: string
                        description: Russian text.
                    description: Hip angle comments.
                  text_left_ankle_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: English text.
                      ru:
                        type: string
                        description: Russian text.
                    description: Left ankle angle comments.
                  text_left_knee_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: English text.
                      ru:
                        type: string
                        description: Russian text.
                    description: Left knee angle comments.
                  text_right_ankle_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: English text.
                      ru:
                        type: string
                        description: Russian text.
                    description: Right ankle angle comments.
                  text_right_knee_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: English text.
                      ru:
                        type: string
                        description: Russian text.
                    description: Right knee angle comments.
              example:
                text_summary:
                  en: Summary text in English
                  ru: Summary text in Russian
                text_contact_angle:
                  en: Contact angle text in English
                  ru: Contact angle text in Russian
                text_push_angle:
                  en: Push angle text in English
                  ru: Push angle text in Russian
                text_knee_ankle:
                  en: Knee ankle text in English
                  ru: Knee ankle text in Russian
                text_hip_angle:
                  en: Hip angle text in English
                  ru: Hip angle text in Russian
                text_left_ankle_angle:
                  en: Left ankle angle text in English
                  ru: Left ankle angle text in Russian
                text_left_knee_angle:
                  en: Left knee angle text in English
                  ru: Left knee angle text in Russian
                text_right_ankle_angle:
                  en: Right ankle angle text in English
                  ru: Right ankle angle text in Russian
                text_right_knee_angle:
                  en: Right knee angle text in English
                  ru: Right knee angle text in Russian
        "400":
          description: Bad Request - Error getting comments due to invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message.
              example:
                error: Error getting comments
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Token is missing or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - Admin access is required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: User does not have admin privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: Not Found - Comments not found for the given session.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Comments not found.
              example:
                error: Comments not found
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: An unexpected error occurred.
      security:
      - Bearer: []
    post:
      tags:
      - running
      summary: Update Session Comments
      description: "Updates the report comments for a specific session. The request\
        \ body must include the comment fields for various aspects of the session\
        \ (e.g., summary, contact angle, push angle, etc.) in multiple languages.\
        \ \n\n### Request Body (JSON)\n\nThe following fields are expected (all fields\
        \ are objects with language keys):\n\n- **text_summary** *(object)*: Summary\
        \ comments (e.g., `{'en': 'English text', 'ru': 'Russian text'}`).\n- **text_contact_angle**\
        \ *(object)*: Contact angle comments.\n- **text_push_angle** *(object)*: Push\
        \ angle comments.\n- **text_knee_ankle** *(object)*: Knee ankle comments.\n\
        - **text_hip_angle** *(object)*: Hip angle comments.\n- **text_left_ankle_angle**\
        \ *(object)*: Left ankle angle comments.\n- **text_left_knee_angle** *(object)*:\
        \ Left knee angle comments.\n- **text_right_ankle_angle** *(object)*: Right\
        \ ankle angle comments.\n- **text_right_knee_angle** *(object)*: Right knee\
        \ angle comments.\n\n### Response Structure (HTTP 200)\n\nOn success, the\
        \ response is a JSON object with:\n- **message** *(string)*: A confirmation\
        \ message indicating that comments were updated.\n\n### Error Handling\n\n\
        - **400 Bad Request**: If the input data is missing or invalid.\n- **401 Unauthorized**:\
        \ If the access token is missing or invalid.\n- **403 Forbidden**: If the\
        \ user does not have admin privileges.\n- **500 Internal Server Error**: If\
        \ an unexpected error occurs on the server.\n\n### Security\n\nA valid Bearer\
        \ token must be provided in the `Authorization` header."
      operationId: running_sessions_report-comments_create
      parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text_summary:
                  type: object
                  properties:
                    en:
                      type: string
                      description: English summary text.
                    ru:
                      type: string
                      description: Russian summary text.
                  description: Summary comments in different languages.
                text_contact_angle:
                  type: object
                  properties:
                    en:
                      type: string
                      description: English text.
                    ru:
                      type: string
                      description: Russian text.
                  description: Contact angle comments in different languages.
                text_push_angle:
                  type: object
                  properties:
                    en:
                      type: string
                      description: English text.
                    ru:
                      type: string
                      description: Russian text.
                  description: Push angle comments in different languages.
                text_knee_ankle:
                  type: object
                  properties:
                    en:
                      type: string
                      description: English text.
                    ru:
                      type: string
                      description: Russian text.
                  description: Knee ankle comments in different languages.
                text_hip_angle:
                  type: object
                  properties:
                    en:
                      type: string
                      description: English text.
                    ru:
                      type: string
                      description: Russian text.
                  description: Hip angle comments in different languages.
                text_left_ankle_angle:
                  type: object
                  properties:
                    en:
                      type: string
                      description: English text.
                    ru:
                      type: string
                      description: Russian text.
                  description: Left ankle angle comments in different languages.
                text_left_knee_angle:
                  type: object
                  properties:
                    en:
                      type: string
                      description: English text.
                    ru:
                      type: string
                      description: Russian text.
                  description: Left knee angle comments in different languages.
                text_right_ankle_angle:
                  type: object
                  properties:
                    en:
                      type: string
                      description: English text.
                    ru:
                      type: string
                      description: Russian text.
                  description: Right ankle angle comments in different languages.
                text_right_knee_angle:
                  type: object
                  properties:
                    en:
                      type: string
                      description: English text.
                    ru:
                      type: string
                      description: Russian text.
                  description: Right knee angle comments in different languages.
              example:
                text_summary:
                  en: Summary text in English
                  ru: Summary text in Russian
                text_contact_angle:
                  en: Contact angle text in English
                  ru: Contact angle text in Russian
                text_push_angle:
                  en: Push angle text in English
                  ru: Push angle text in Russian
                text_knee_ankle:
                  en: Knee ankle text in English
                  ru: Knee ankle text in Russian
                text_hip_angle:
                  en: Hip angle text in English
                  ru: Hip angle text in Russian
                text_left_ankle_angle:
                  en: Left ankle angle text in English
                  ru: Left ankle angle text in Russian
                text_left_knee_angle:
                  en: Left knee angle text in English
                  ru: Left knee angle text in Russian
                text_right_ankle_angle:
                  en: Right ankle angle text in English
                  ru: Right ankle angle text in Russian
                text_right_knee_angle:
                  en: Right knee angle text in English
                  ru: Right knee angle text in Russian
        required: true
      responses:
        "200":
          description: Comments updated successfully.
          content:
            application/json:
              schema:
                required:
                - message
                type: object
                properties:
                  message:
                    type: string
                    description: A confirmation message indicating the comments were
                      updated.
              example:
                message: Comments updated
        "400":
          description: Bad Request - Error updating comments due to missing or invalid
            data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message.
              example:
                error: Error updating comments
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Token is missing or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - Admin privileges are required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: User does not have admin access.
              example:
                error: You must be an admin to access this data.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
      x-codegen-request-body-name: data
    delete:
      tags:
      - running
      summary: Delete Report Comments
      description: "Deletes all report comments for a given session. \n\n### Request\n\
        \n- **Path Parameter**:\n    - **session_id** *(string, required)*: The unique\
        \ identifier of the session whose report comments will be deleted.\n\n###\
        \ Response Structure (HTTP 200)\n\nOn success, the response is a JSON object\
        \ with:\n- **message** *(string)*: A success message indicating that the comments\
        \ have been deleted.\n\n### Error Handling\n\n- **400 Bad Request**: Indicates\
        \ that the request parameters are invalid or that an error occurred during\
        \ deletion.\n- **401 Unauthorized**: The access token is missing or invalid.\n\
        - **403 Forbidden**: The user does not have admin privileges to delete report\
        \ comments.\n- **404 Not Found**: The session or report comments were not\
        \ found.\n- **500 Internal Server Error**: An unexpected error occurred on\
        \ the server.\n\n### Security\n\nA valid Bearer token must be provided in\
        \ the `Authorization` header."
      operationId: running_sessions_report-comments_delete
      parameters:
      - name: session_id
        in: path
        description: The unique identifier of the session for which report comments
          will be deleted.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Comments deleted successfully.
          content:
            application/json:
              schema:
                required:
                - message
                type: object
                properties:
                  message:
                    type: string
                    description: A message indicating that the comments were deleted
                      successfully.
              example:
                message: Comments deleted
        "400":
          description: "Bad Request - Error deleting comments (e.g., invalid parameters)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message explaining why deletion
                      failed.
              example:
                error: Error deleting comments
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: An error message indicating that the token is missing
                      or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have admin privileges to delete
            report comments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: An error message indicating that admin access is
                      required.
              example:
                error: You must be an admin to access this data.
        "404":
          description: Not Found - The session or report comments were not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: An error message indicating that the session or comments
                      were not found.
              example:
                error: Session not found
        "500":
          description: Internal Server Error - An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
  /running/sessions/{session_id}/report/:
    post:
      tags:
      - running
      summary: Retrieve Report Analysis Images (Deprecated)
      description: |-
        Retrieves (or generates) analysis images for a specific running session. Requires a valid payment plan and admin privileges.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the session.

        ### Response Structure (HTTP 200)

        On success, the response is a JSON object containing image URLs in both English and Russian for each angle or position:

        - **hip_angle** *(object)*:
          - **en** *(string, URI)*: Hip angle image in English.
          - **ru** *(string, URI)*: Hip angle image in Russian.
        - **left_ankle_angle** *(object)*:
          - **en** *(string, URI)*: Left ankle angle image in English.
          - **ru** *(string, URI)*: Left ankle angle image in Russian.
        - **left_knee_angle** *(object)*:
          - **en** *(string, URI)*: Left knee angle image in English.
          - **ru** *(string, URI)*: Left knee angle image in Russian.
        - **right_ankle_angle** *(object)*:
          - **en** *(string, URI)*: Right ankle angle image in English.
          - **ru** *(string, URI)*: Right ankle angle image in Russian.
        - **right_knee_angle** *(object)*:
          - **en** *(string, URI)*: Right knee angle image in English.
          - **ru** *(string, URI)*: Right knee angle image in Russian.
        - **positions** *(object)*:
          - **en** *(string, URI)*: Positions image in English.
          - **ru** *(string, URI)*: Positions image in Russian.

        ### Error Handling

        - **400 Bad Request**: Invalid parameters or admin UID.
        - **401 Unauthorized**: Missing or invalid access token.
        - **403 Forbidden**: Payment plan not supported or user lacks admin privileges.
        - **404 Not Found**: Images could not be generated or session not found.
        - **500 Internal Server Error**: An unexpected error occurred.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: running_sessions_report_create
      parameters:
      - name: session_id
        in: path
        description: The session ID for which the report images are retrieved (or
          generated).
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Report analysis images retrieved or generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hip_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: URL for the English hip angle image.
                        format: uri
                      ru:
                        type: string
                        description: URL for the Russian hip angle image.
                        format: uri
                    description: Hip angle images in English and Russian.
                  left_ankle_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: URL for the English left ankle angle image.
                        format: uri
                      ru:
                        type: string
                        description: URL for the Russian left ankle angle image.
                        format: uri
                    description: Left ankle angle images in English and Russian.
                  left_knee_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: URL for the English left knee angle image.
                        format: uri
                      ru:
                        type: string
                        description: URL for the Russian left knee angle image.
                        format: uri
                    description: Left knee angle images in English and Russian.
                  right_ankle_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: URL for the English right ankle angle image.
                        format: uri
                      ru:
                        type: string
                        description: URL for the Russian right ankle angle image.
                        format: uri
                    description: Right ankle angle images in English and Russian.
                  right_knee_angle:
                    type: object
                    properties:
                      en:
                        type: string
                        description: URL for the English right knee angle image.
                        format: uri
                      ru:
                        type: string
                        description: URL for the Russian right knee angle image.
                        format: uri
                    description: Right knee angle images in English and Russian.
                  positions:
                    type: object
                    properties:
                      en:
                        type: string
                        description: URL for the English positions image.
                        format: uri
                      ru:
                        type: string
                        description: URL for the Russian positions image.
                        format: uri
                    description: Positions images in English and Russian.
              example:
                hip_angle:
                  en: https://storage.googleapis.com/.../hip_angle_en.png
                  ru: https://storage.googleapis.com/.../hip_angle_ru.png
                left_ankle_angle:
                  en: https://storage.googleapis.com/.../left_ankle_angle_en.png
                  ru: https://storage.googleapis.com/.../left_ankle_angle_ru.png
                left_knee_angle:
                  en: https://storage.googleapis.com/.../left_knee_angle_en.png
                  ru: https://storage.googleapis.com/.../left_knee_angle_ru.png
                right_ankle_angle:
                  en: https://storage.googleapis.com/.../right_ankle_angle_en.png
                  ru: https://storage.googleapis.com/.../right_ankle_angle_ru.png
                right_knee_angle:
                  en: https://storage.googleapis.com/.../right_knee_angle_en.png
                  ru: https://storage.googleapis.com/.../right_knee_angle_ru.png
                positions:
                  en: https://storage.googleapis.com/.../positions_en.png
                  ru: https://storage.googleapis.com/.../positions_ru.png
        "400":
          description: Bad Request - Possibly invalid parameters or admin UID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Details about why the request is invalid.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Token is missing or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - Payment plan not supported or lack of admin privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Insufficient privileges or unsupported payment plan.
              example:
                error: Payment plan not supported.
        "404":
          description: "Not Found - Unable to find or generate images, or session\
            \ not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Reason why the requested resources could not be found.
              example:
                error: Data not found.
        "500":
          description: Internal Server Error - An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error>"
      security:
      - Bearer: []
  /running/sessions/{session_id}/summary/:
    post:
      tags:
      - running
      summary: Generate Summary for a Session (Deprecated)
      description: |-
        Generates a summary (in English and Russian) for a specific running session based on calculated metrics. Requires a valid admin token and a valid payment plan (Pro, Premium, Enterprise, or Standard).

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the session for which to generate a summary.

        ### Response Structure (HTTP 200)

        On success, the response contains a `summary` object with:

        - **full_original** *(string)*: The complete original text containing both English and Russian segments.
        - **en** *(string)*: The English version of the summary.
        - **ru** *(string)*: The Russian version of the summary.
        - **token_used** *(integer, optional)*: The number of tokens used in the generative AI request.

        ### Error Handling

        - **400 Bad Request**: Indicates invalid parameters (e.g., missing or invalid admin UID).
        - **401 Unauthorized**: The access token is missing or invalid.
        - **403 Forbidden**: The user does not have the required plan or admin privileges.
        - **404 Not Found**: Session data not found, or the user lacks a valid payment plan.
        - **500 Internal Server Error**: An unexpected server-side error occurred.

        ### Security

        A valid Bearer token must be provided in the `Authorization` header.
      operationId: running_sessions_summary_create
      parameters:
      - name: session_id
        in: path
        description: The session ID for which the summary will be generated.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Summary generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    required:
                    - en
                    - full_original
                    - ru
                    type: object
                    properties:
                      full_original:
                        type: string
                        description: Full text containing both the English and Russian
                          segments as returned by the generative AI.
                      en:
                        type: string
                        description: The English version of the generated summary.
                      ru:
                        type: string
                        description: The Russian version of the generated summary.
                      token_used:
                        type: integer
                        description: Number of tokens used by the generative AI request
                          (optional).
                    description: "Object containing the summary text in multiple languages,\
                      \ plus the original text."
              example:
                summary:
                  full_original: |-
                    ENGLISH: Greetings! Your metrics showcase an impressive performance, ...

                    RUSSIAN: Приветствую! Ваши показатели демонстрируют впечатляющую эффективность, ...
                  en: Greetings! Your metrics showcase an impressive performance...
                  ru: Приветствую! Ваши показатели демонстрируют впечатляющую эффективность...
                  token_used: 653
        "400":
          description: Bad Request - Possibly invalid parameters or missing admin
            UID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Access token is missing or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - User does not have the required plan or privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges
                      or invalid plan.
              example:
                error: User does not have a valid payment plan.
        "404":
          description: Not Found - Session data was not found or user does not have
            a valid payment plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the missing session data
                      or plan issue.
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - An unexpected server error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating a server-side failure.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
  /session-management/sessions/:
    get:
      tags:
      - session-management
      summary: Retrieve User Sessions
      description: |-
        Retrieves all sessions for the authenticated user, ordered by `created_at` in descending order.

        ### Response Structure

        On success (HTTP 200), the response is a JSON object containing:

        ```json
        {
          "sessions": {
            "<session_id>": {
              "created_at": {
                "date": "DD/MM/YYYY",
                "time": "HH:MM AM/PM"
              },
              "video_url": "...",
              "segments": <number>,
              "analyzed_video_url": "...",
              "activity": "...",
              "title": "...",
              "user_id": "...",
              "user_name": "...",
              "report_comments": {...},
              "metrics": {...}
              // other session fields
            },
            "...": {...}
          }
        }
        ```

        ### Error Handling
        - **400 Bad Request**: Invalid parameters (e.g., missing or malformed token).
        - **401 Unauthorized**: The token is missing or invalid.
        - **403 Forbidden**: The user lacks admin privileges.
        - **404 Not Found**: Unable to retrieve sessions (e.g., no sessions found).
        - **500 Internal Server Error**: An unexpected error occurred on the server.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: session-management_sessions_list
      responses:
        "200":
          description: User sessions retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: object
                    additionalProperties:
                      type: object
                      properties: {}
                    description: A dictionary of sessions keyed by their session IDs.
              example:
                sessions:
                  "5d5c8d7fcd6945f2936ced84f9a20562":
                    video_url: '...'
                    analyzed_video_url: '...'
                    segments: 10
                    created_at:
                      date: 10/01/2025
                      time: 04:39 PM
                    exercise: clean_and_jerk
                    user_name: Lee Jhon
                    report_comments: {}
                    activity: Weightlifting
                    user_id: hWWb9eK3DLWaGHCIs7ltDB8474u1
                    title: new-test-w
                    metrics: {}
                  eb10229c6bf04c4394b547201d1a96f7:
                    video_url: '...'
                    analyzed_video_url: '...'
                    segments: 5
                    created_at:
                      date: 26/12/2024
                      time: 08:48 PM
                    user_name: Suzan
                    activity: Vertical Jump
                    user_id: hLT10sKbCumCUIsNAk3h
                    title: djias-jump
                    report_comments: {}
                    metrics: {}
        "400":
          description: Bad Request - Invalid parameters or missing token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Explanation of the bad request.
              example:
                error: Invalid or missing token.
        "401":
          description: Unauthorized - The token is missing or invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message for authentication failure.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user lacks the required privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: User is not permitted to access sessions.
              example:
                error: You must be an admin to access this data.
        "404":
          description: "Not Found - Sessions could not be retrieved (e.g., none found)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message if sessions are not found.
              example:
                error: No sessions found for this user.
        "500":
          description: Internal Server Error - An unexpected issue occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message for server-side failures.
              example:
                error: "An unexpected error occurred: <error>"
      security:
      - Bearer: []
  /session-management/sessions/filter/:
    get:
      tags:
      - session-management
      summary: Fetch Filtered Sessions
      description: |-
        Retrieves user sessions filtered by optional parameters such as date range, activity type, title, or user ID. It also supports pagination via `start_after_id` or `end_before_id` when no filters are applied.

        ### Query Parameters
        - **start_after_id** *(string, optional)*: Session ID after which to start pagination. Used only if no filters are set.
        - **end_before_id** *(string, optional)*: Session ID before which to end pagination. Used only if no filters are set.
        - **limit** *(integer, optional)*: Maximum number of sessions to fetch (default=10).
        - **activity** *(string, optional)*: Filter by activity type (e.g., 'Running', 'Vertical Jump').
        - **start_date** *(string, optional, format: dd/mm/yyyy)*: Filter sessions created on or after this date.
        - **end_date** *(string, optional, format: dd/mm/yyyy)*: Filter sessions created on or before this date.
        - **title** *(string, optional)*: Filter by sessions whose title contains this substring (case-insensitive).
        - **user_id** *(string, optional)*: Filter by user ID stored in the session.

        ### Response Structure (HTTP 200)

        On success, the response is a JSON object containing:
        - **query_count** *(integer)*: The total number of matching sessions.
        - **sessions** *(object)*: A dictionary of session documents keyed by their session IDs.
        - **first_doc_id** *(string or null)*: The ID of the first document in the returned set.
        - **last_doc_id** *(string or null)*: The ID of the last document in the returned set.

        Each session object may include fields such as `video_url`, `activity`, `created_at`, `title`, etc., plus nested data (e.g. `report_comments`, `metrics`). Note that `created_at` is returned as a nested object with `date` and `time`.

        ### Error Handling

        - **400 Bad Request**: Invalid parameters (e.g., malformed date string) or missing user token.
        - **401 Unauthorized**: The token is missing or invalid.
        - **403 Forbidden**: The user lacks admin privileges.
        - **404 Not Found**: No matching sessions found.
        - **500 Internal Server Error**: An unexpected error occurred on the server.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: session-management_sessions_filter_list
      parameters:
      - name: start_after_id
        in: query
        description: Session ID after which to start pagination (only used if no filters
          are set).
        schema:
          type: string
      - name: end_before_id
        in: query
        description: Session ID before which to end pagination (only used if no filters
          are set).
        schema:
          type: string
      - name: limit
        in: query
        description: Maximum number of sessions to fetch (default=10).
        schema:
          type: integer
      - name: activity
        in: query
        description: "Activity type filter (e.g., 'Running' or 'Vertical Jump')."
        schema:
          type: string
      - name: start_date
        in: query
        description: Filter sessions created on or after this date (dd/mm/yyyy).
        schema:
          type: string
      - name: end_date
        in: query
        description: Filter sessions created on or before this date (dd/mm/yyyy).
        schema:
          type: string
      - name: title
        in: query
        description: Filter by sessions whose title contains this substring (case-insensitive).
        schema:
          type: string
      - name: user_id
        in: query
        description: Filter by user ID stored in the session document.
        schema:
          type: string
      responses:
        "200":
          description: Filtered sessions retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  query_count:
                    type: integer
                    description: Total matching sessions.
                  sessions:
                    type: object
                    additionalProperties:
                      type: object
                      properties: {}
                    description: Dictionary of session documents keyed by their IDs.
                  first_doc_id:
                    type: string
                    description: ID of the first session in the result or null if
                      none.
                  last_doc_id:
                    type: string
                    description: ID of the last session in the result or null if none.
              example:
                query_count: 111
                sessions:
                  "5d5c8d7fcd6945f2936ced84f9a20562":
                    activity: Weightlifting
                    created_at:
                      date: 10/01/2025
                      time: 04:39 PM
                    analyzed_video_url: '...'
                    video_url: '...'
                    segments: 10
                    exercise: clean_and_jerk
                    user_name: Lee Jhon
                    report_comments:
                      "...": '...'
                    metrics:
                      "...": '...'
                    user_status: admin
                    user_id: hWWb9eK3DLWaGHCIs7ltDB8474u1
                    title: new-test-w
                  "...":
                    "...": '...'
                first_doc_id: 5d5c8d7fcd6945f2936ced84f9a20562
                last_doc_id: bd977842e3e64845991b77d78db8b7e9
        "400":
          description: "Bad Request - Potentially invalid parameters (malformed date,\
            \ etc.) or missing user token."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the reason for
                      the invalid request.
              example:
                error: Invalid date format (expected dd/mm/yyyy).
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Authentication error.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user lacks admin privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Authorization error.
              example:
                error: You must be an admin to access this data.
        "404":
          description: Not Found - No matching sessions found or resource unavailable.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Message indicating the sessions could not be retrieved.
              example:
                error: No sessions found for the given criteria.
        "500":
          description: Internal Server Error - An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message for server-side issues.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /session-management/sessions/{session_id}:
    put:
      tags:
      - session-management
      summary: Update Session Data
      description: |-
        Updates session details (such as title and created_at timestamp) for a specific session. Requires admin privileges and a valid payment plan.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique session identifier.

        ### Request Body (JSON)
        - **title** *(string, optional)*: The updated title for the session.
        - **created_at** *(string, optional, format: `YYYY-MM-DD HH:MM:SS`)*: The updated session timestamp.

        ### Response Structure

        On success, the response contains:
        - **success** *(string)*: Confirmation that the session was updated.

        ### Error Responses
        - **400 Bad Request**: Invalid request parameters or missing required data.
        - **401 Unauthorized**: Missing or invalid access token.
        - **403 Forbidden**: Insufficient privileges or invalid payment plan.
        - **404 Not Found**: Session not found.
        - **500 Internal Server Error**: An unexpected error occurred.
      operationId: session-management_sessions_update
      parameters:
      - name: session_id
        in: path
        description: The session ID for which details will be updated.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: New title for the session.
                created_at:
                  type: string
                  description: Updated session timestamp in `YYYY-MM-DD HH:MM:SS`
                    format.
                  format: date-time
              example:
                title: Updated Running Session
                created_at: 2025-02-06 14:30:00
        required: true
      responses:
        "200":
          description: Session updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    description: Confirmation message.
              example:
                success: session_123 was successfully updated
        "400":
          description: Bad Request - Invalid parameters or missing data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message explaining why the request was invalid.
              example:
                error: Invalid admin UID
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating that a valid Bearer token was not
                      provided.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have sufficient privileges to
            retrieve total metrics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient permissions.
              example:
                error: Access denied.
        "404":
          description: Not Found - The specified session ID does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating session was not found.
              example:
                error: Session session_123 not found
        "500":
          description: Internal Server Error - An unexpected issue occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message for debugging.
              example:
                error: "An unexpected error occurred: <error>"
      security:
      - Bearer: []
      x-codegen-request-body-name: data
    delete:
      tags:
      - session-management
      summary: Delete a Session
      description: |-
        Deletes a specified session and all associated resources, including session data, video files, subcollections, and reports.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique session identifier.

        ### Response Structure

        On success, the response contains:
        - **success** *(string)*: Confirmation that the session was deleted.

        ### Error Responses
        - **400 Bad Request**: Invalid request parameters.
        - **401 Unauthorized**: Token is invalid or missing.
        - **403 Forbidden**: User does not have admin privileges.
        - **404 Not Found**: Session not found.
        - **500 Internal Server Error**: An unexpected error occurred.
      operationId: session-management_sessions_delete
      parameters:
      - name: session_id
        in: path
        description: The session ID to be deleted.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Session deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    description: Confirmation message.
              example:
                success: session_123 was successfully deleted
        "400":
          description: Bad Request - Invalid parameters or missing data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message explaining why the request was invalid.
              example:
                error: Invalid admin UID
        "401":
          description: Unauthorized - Token is invalid or expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Authentication error.
              example:
                error: "Unauthorized: Token is missing or invalid"
        "403":
          description: Forbidden - User lacks necessary privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Authorization error.
              example:
                error: "Forbidden: You must be an admin to delete this session"
        "404":
          description: Not Found - The specified session ID does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating session was not found.
              example:
                error: Session session_123 not found
        "500":
          description: Internal Server Error - An unexpected issue occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message for debugging.
              example:
                error: "An unexpected error occurred: <error>"
      security:
      - Bearer: []
  /session-management/sessions/{session_id}/analyzed-video/:
    get:
      tags:
      - session-management
      summary: Retrieve Analyzed Video URL
      description: |-
        Retrieves the analyzed video URL for a specific session, or attempts to create it if it does not exist.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the session.

        ### Query Parameters
        These optional flags determine which kind of analysis to perform if the video doesn't exist:
        - **is_jump** *(boolean, optional)*: Indicates whether this session is for jump analysis.
        - **is_weight** *(boolean, optional)*: Indicates whether this session is for weightlifting analysis.

        ### Response (HTTP 200)

        Returns a JSON object with an `analyzed_video_url` key if successful:

        ```json
        {
          "analyzed_video_url": "https://storage.googleapis.com/.../analyzed_video.mp4"
        }
        ```

        ### Error Handling

        - **400 Bad Request**: Invalid parameters (e.g., missing or invalid admin UID).
        - **401 Unauthorized**: Token is missing or invalid.
        - **403 Forbidden**: The user does not have the right privileges or plan.
        - **404 Not Found**: The session data or resources could not be found.
        - **500 Internal Server Error**: An unexpected error occurred on the server.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: session-management_sessions_analyzed-video_list
      parameters:
      - name: session_id
        in: path
        description: The session ID for which to retrieve or create an analyzed video.
        required: true
        schema:
          type: string
      - name: is_jump
        in: query
        description: Indicates whether this session is for jump analysis.
        schema:
          type: boolean
      - name: is_weight
        in: query
        description: Indicates whether this session is for weightlifting analysis.
        schema:
          type: boolean
      responses:
        "200":
          description: Analyzed video URL retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  analyzed_video_url:
                    type: string
                    description: URL of the analyzed video.
                    format: uri
              example:
                analyzed_video_url: https://storage.googleapis.com/.../analyzed_video.mp4
        "400":
          description: Bad Request - Possibly invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: "Error schema for invalid requests (e.g., malformed UID)"
              example:
                error: Invalid admin UID
        "401":
          description: Unauthorized - Token is invalid or missing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: Error schema for missing or invalid token
              example:
                error: No token provided.
        "403":
          description: Forbidden - User lacks privileges or plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: Error schema for forbidden access
              example:
                error: User does not have a valid payment plan
        "404":
          description: Not Found - Session data or resource not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: Error schema for missing session or resource
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - A server-side error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: Error schema for unexpected server failures
              example:
                error: "An unexpected error occurred: <error>"
      security:
      - Bearer: []
    post:
      tags:
      - session-management
      summary: Upload/Generate Analyzed Video
      description: |-
        Uploads or generates an analyzed video for a specific session, returning its URL.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the session.

        ### Request Body (JSON)
        ```json
        {
          "is_jump": true,
          "is_weight": false
        }
        ```
        - **is_jump** *(boolean, optional)*: If true, treat this as a jump session.
        - **is_weight** *(boolean, optional)*: If true, treat this as a weightlifting session.

        ### Response Structure (HTTP 200)
        On success, returns a JSON object with the `analyzed_video_url`:

        ```json
        {
          "analyzed_video_url": "https://storage.googleapis.com/.../analyzed_video.mp4"
        }
        ```
        ### Error Handling

        - **400 Bad Request**: Invalid parameters or session already analyzed.
        - **401 Unauthorized**: Token is missing or invalid.
        - **403 Forbidden**: The user does not have a valid plan.
        - **404 Not Found**: Session data not found.
        - **500 Internal Server Error**: An unexpected error occurred on the server.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: session-management_sessions_analyzed-video_create
      parameters:
      - name: session_id
        in: path
        description: The session ID for which to upload/generate an analyzed video.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                is_jump:
                  type: boolean
                  description: Whether this session is jump-related.
                is_weight:
                  type: boolean
                  description: Whether this session is weightlifting-related.
              example:
                is_jump: true
                is_weight: false
        required: true
      responses:
        "200":
          description: Analyzed video URL generated or updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  analyzed_video_url:
                    type: string
                    description: URL of the newly generated or updated analyzed video.
                    format: uri
              example:
                analyzed_video_url: https://storage.googleapis.com/.../analyzed_video.mp4
        "400":
          description: Bad Request - Possibly invalid session data or video already
            analyzed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: Error schema for invalid requests or already analyzed
                  video
              example:
                error: Video already analyzed
        "401":
          description: Unauthorized - The token is missing or invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: Error schema for missing or invalid token
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have a valid payment plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: Error schema for insufficient plan privileges
              example:
                error: User does not have a valid payment plan
        "404":
          description: Not Found - Session not found or creation failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: Error schema for missing session data or resource
              example:
                error: Session data not found
        "500":
          description: Internal Server Error - A server-side error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                description: Error schema for unexpected server failures
              example:
                error: "An unexpected error occurred: <error>"
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /user-management/organization-status/:
    get:
      tags:
      - user-management
      summary: Retrieve Organization Status
      description: "This endpoint allows an authenticated user (admin or sub-admin)\
        \ to retrieve organization status details. The response includes various details\
        \ such as the session number, user UID, role, payment type, and associated\
        \ activities. \n\n**Response Structure (HTTP 200):**\n- **session_number**\
        \ *(integer)*: The number of sessions associated with the organization.\n\
        - **uid** *(string)*: The unique identifier of the authenticated user.\n-\
        \ **role** *(string)*: The role of the user, which can be either `admin` or\
        \ `sub_admin`.\n- **payment_type** *(string)*: The type of payment plan for\
        \ the organization.\n- **activity** *(array of strings)*: A list of activities\
        \ associated with the organization.\n- **companyName** *(string or null)*:\
        \ The name of the company, if available.\n- **name** *(string or null)*: The\
        \ name of the user.\n\n**Example Successful Response:**\n```json\n{\n  \"\
        session_number\": 50,\n  \"uid\": \"aB3xYz1PqW8LmTnK4R9VfJ0gHsCd\",\n  \"\
        role\": \"admin\",\n  \"payment_type\": \"Enterprise\",\n  \"activity\": [\"\
        Running\", \"Weightlifting\", \"VerticalJump\"],\n  \"companyName\": \"Apple\"\
        ,\n  \"name\": \"Username\"\n}\n```\n\n**Notes:**\n- A valid Bearer token\
        \ is required to access this endpoint.\n- If the organization status is not\
        \ found or the data is invalid (e.g. missing session_number), a 404 error\
        \ is returned."
      operationId: user-management_organization-status_list
      responses:
        "200":
          description: Organization status details retrieved successfully.
          content:
            application/json:
              schema:
                required:
                - activity
                - companyName
                - name
                - payment_type
                - role
                - session_number
                - uid
                type: object
                properties:
                  session_number:
                    type: integer
                    description: The number of sessions associated with the organization.
                  uid:
                    type: string
                    description: The unique identifier of the authenticated user.
                  role:
                    type: string
                    description: The user's role; either 'admin' or 'sub_admin'.
                  payment_type:
                    type: string
                    description: The payment plan type for the organization.
                  activity:
                    type: array
                    description: A list of activities associated with the organization.
                    items:
                      type: string
                      description: An activity associated with the organization.
                  companyName:
                    type: string
                    description: "The name of the company, if available."
                  name:
                    type: string
                    description: "The name of the user, if available."
              example:
                session_number: 50
                uid: aB3xYz1PqW8LmTnK4R9VfJ0gHsCd
                role: admin
                payment_type: Enterprise
                activity:
                - Running
                - Weightlifting
                - VerticalJump
                companyName: Apple
                name: Username
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating authentication failure.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The requester does not have sufficient privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: Not Found - The user was not found or the organization status
            data is invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
              example:
                error: User not found or invalid status data
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
  /user-management/users/:
    get:
      tags:
      - user-management
      summary: Retrieve a Paginated List of Users
      description: |-
        This endpoint allows an administrator to retrieve a paginated list of users under their account. The response includes detailed information for each user such as personal attributes, contact details, and metadata related to their account.

        **Usage Example:**
        Send a `GET` request to `user-management/users/` with the appropriate Bearer token in the Authorization header.

        **Response Structure:**
        - **users** *(array)*: A list of user objects, where each object includes the following fields:
          - **created_at** *(string, date-time)*: Timestamp when the user was created.
          - **weight** *(number)*: The user’s weight.
          - **age** *(string)*: The user’s age.
          - **ycom** *(number)*: The user’s YCOM value.
          - **height** *(number)*: The user’s height.
          - **phone** *(string)*: The user’s phone number.
          - **leg_length** *(number)*: The user’s leg length.
          - **display_name** *(string)*: The user’s display name.
          - **shoeSize** *(string)*: The user’s shoe size.
          - **email** *(string)*: The user’s email address.
          - **gender** *(string)*: The user’s gender.
          - **brand** *(string)*: The brand associated with the user.
          - **shoeModel** *(string)*: The model of the user’s shoe.
          - **user_uid** *(string)*: The unique identifier for the user.

        **Notes:**
        - A valid Bearer token is required to access this endpoint.
        - If there are no users or an error occurs, an appropriate error message is returned.
      operationId: user-management_users_list
      responses:
        "200":
          description: Successfully retrieved the list of users.
          content:
            application/json:
              schema:
                required:
                - users
                type: object
                properties:
                  users:
                    type: array
                    description: An array of user objects.
                    items:
                      required:
                      - age
                      - brand
                      - created_at
                      - display_name
                      - email
                      - gender
                      - height
                      - leg_length
                      - phone
                      - shoeModel
                      - shoeSize
                      - user_uid
                      - weight
                      - ycom
                      type: object
                      properties:
                        created_at:
                          type: string
                          description: Timestamp when the user was created.
                          format: date-time
                        weight:
                          type: number
                          description: The user’s weight.
                        age:
                          type: string
                          description: The user’s age.
                        ycom:
                          type: number
                          description: The user’s YCOM value.
                        height:
                          type: number
                          description: The user’s height.
                        phone:
                          type: string
                          description: The user’s phone number.
                        leg_length:
                          type: number
                          description: The user’s leg length.
                        display_name:
                          type: string
                          description: The user’s display name.
                        shoeSize:
                          type: string
                          description: The user’s shoe size.
                        email:
                          type: string
                          description: The user’s email address.
                          format: email
                        gender:
                          type: string
                          description: The user’s gender.
                        brand:
                          type: string
                          description: Brand associated with the user.
                        shoeModel:
                          type: string
                          description: Model of the user's shoe.
                        user_uid:
                          type: string
                          description: Unique identifier for the user.
              example:
                users:
                - created_at: 2024-12-02T19:17:30.371Z
                  weight: 79.78699276972904
                  age: "30"
                  ycom: 1.0134599999999998
                  height: 177.79999999999998
                  phone: "92039023232"
                  leg_length: 0.9627869999999997
                  display_name: User2
                  shoeSize: "8"
                  email: User2@example.com
                  gender: Male
                  brand: Nike
                  shoeModel: Peak-smart
                  user_uid: hLT10sKbCumCUIsNAk3h
                - created_at: 2024-08-16T00:29:21.349Z
                  weight: 70
                  age: "22"
                  ycom: 0.9570000000000001
                  height: 174
                  phone: "8328889011"
                  leg_length: 0.90915
                  display_name: User1
                  shoeSize: "6"
                  email: user1@example.com
                  gender: Female
                  brand: Fabletics
                  shoeModel: The Everyday Sneaker II
                  user_uid: CMQe1HuAg4uMXqHE6dVO
        "400":
          description: Bad Request - Invalid query parameters or missing required
            data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: Invalid parameters provided.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Unauthorized error message.
              example:
                error: No token provided.
        "403":
          description: Forbidden - User does not have the required permissions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Forbidden error message.
              example:
                error: You do not have permission to access this data.
        "404":
          description: Not Found - Users not found or retrieval failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message when no users are found.
              example:
                error: Admin does not exist.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
    put:
      tags:
      - user-management
      summary: Update User Information
      description: "This endpoint allows an authenticated admin to update information\
        \ for an existing user under their account. \n\n**Request Body:**\n- **user_uid**\
        \ *(string, required)*: The unique identifier of the user to be updated.\n\
        - **display_name** *(string, optional)*: The new display name for the user.\n\
        - **email** *(string, optional)*: The new email address for the user.\n- **height**\
        \ *(number, optional)*: The user's height.\n- **ycom** *(number, optional)*:\
        \ The user's YCOM value.\n- **leg_length** *(number, optional)*: The user's\
        \ leg length.\n- **weight** *(number, optional)*: The user's weight.\n- **gender**\
        \ *(string, optional)*: The user's gender.\n- **age** *(string, optional)*:\
        \ The user's age.\n- **shoeSize** *(string, optional)*: The user's shoe size.\n\
        - **brand** *(string, optional)*: The brand associated with the user.\n- **shoeModel**\
        \ *(string, optional)*: The model of the user's shoe.\n\n**Response Structure:**\n\
        Upon success (HTTP 200), the endpoint returns a JSON object with the following\
        \ field:\n- **message** *(string)*: Confirmation that the user information\
        \ was updated successfully.\n\nIn case of an error (e.g., missing required\
        \ fields, invalid data, or unauthorized access), a JSON object with an **error**\
        \ field (string) is returned."
      operationId: user-management_users_update
      requestBody:
        content:
          application/json:
            schema:
              required:
              - user_uid
              type: object
              properties:
                user_uid:
                  type: string
                  description: Unique identifier of the user to update.
                display_name:
                  type: string
                  description: The new display name of the user (optional).
                email:
                  type: string
                  description: The new email address of the user (optional).
                  format: email
                height:
                  type: number
                  description: The user's height (optional).
                ycom:
                  type: number
                  description: The user's YCOM value (optional).
                leg_length:
                  type: number
                  description: The user's leg length (optional).
                weight:
                  type: number
                  description: The user's weight (optional).
                gender:
                  type: string
                  description: The user's gender (optional).
                age:
                  type: string
                  description: The user's age (optional).
                shoeSize:
                  type: string
                  description: The user's shoe size (optional).
                brand:
                  type: string
                  description: The brand associated with the user (optional).
                shoeModel:
                  type: string
                  description: The model of the user's shoe (optional).
              example:
                user_uid: DSdmk3mKd9Dmsmsd
                display_name: User1
                email: User1@example.com
                height: 175
                ycom: 0.95
                leg_length: 0.91
                weight: 68
                gender: Female
                age: "23"
                shoeSize: "7"
                brand: Adidas
                shoeModel: UltraBoost
        required: true
      responses:
        "200":
          description: User information updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message indicating successful update.
              example:
                message: User information updated successfully.
        "400":
          description: Bad Request - Missing required fields or invalid data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing what went wrong.
              example:
                error: User UID is required.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the token is missing
                      or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - User is not authorized to update user information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
      x-codegen-request-body-name: data
    post:
      tags:
      - user-management
      summary: Create a New User
      description: "This endpoint allows an authenticated admin to create a new user\
        \ under their account. The admin must provide the user's email and display\
        \ name, and may optionally include a phone number. \n\n**Usage Example:**\n\
        Send a `POST` request to `/users/` with a JSON payload containing the required\
        \ fields. A valid Bearer token must be included in the Authorization header.\n\
        \n**Request Body:**\n- **email** *(string, required)*: The email address of\
        \ the new user.\n- **display_name** *(string, required)*: The display name\
        \ of the new user.\n- **phone** *(string, optional)*: The phone number of\
        \ the new user.\n\n**Response Structure:**\nUpon success (HTTP 201), the endpoint\
        \ returns a JSON object with a `userData` field containing the following keys\
        \ and data types:\n- **user_uid** *(string)*: A unique identifier for the\
        \ newly created user.\n- **email** *(string)*: The email address of the user.\n\
        - **display_name** *(string)*: The display name of the user.\n- **phone**\
        \ *(string)*: The phone number of the user.\n\nIn case of an error (e.g.,\
        \ missing parameters, unauthorized access, or an internal error), a JSON object\
        \ with an `error` field (string) is returned."
      operationId: user-management_users_create
      requestBody:
        content:
          application/json:
            schema:
              required:
              - display_name
              - email
              type: object
              properties:
                email:
                  type: string
                  description: The email address of the user.
                  format: email
                display_name:
                  type: string
                  description: The display name of the user.
                phone:
                  type: string
                  description: The phone number of the user (optional).
              example:
                email: user@gmail.com
                display_name: User
                phone: "932323232"
        required: true
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userData:
                    required:
                    - display_name
                    - email
                    - phone
                    - user_uid
                    type: object
                    properties:
                      user_uid:
                        type: string
                        description: Unique identifier of the newly created user.
                      email:
                        type: string
                        description: Email address of the user.
                        format: email
                      display_name:
                        type: string
                        description: Display name of the user.
                      phone:
                        type: string
                        description: Phone number of the user.
              example:
                userData:
                  user_uid: MYmC7MzsPBNU6uSQBnJ0
                  email: user@gmail.com
                  display_name: User
                  phone: "932323232"
        "400":
          description: Bad Request - Missing or invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message describing the input issue.
              example:
                error: Email and display name are required.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the token is missing
                      or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - User is not authorized to create users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: Not Found - User creation limit reached for Pro plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: User creation limit reached for Pro plan
              example:
                error: User creation limit reached for Pro plan.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
      x-codegen-request-body-name: data
    delete:
      tags:
      - user-management
      summary: Delete a User
      description: |-
        This endpoint allows an authenticated admin to delete a user from their account. The admin must supply the unique identifier of the user to be deleted in the request body.

        **Request Body:**
        - **user_uid** *(string, required)*: The unique identifier of the user to be deleted.

        **Response Structure:**
        Upon success (HTTP 200), the endpoint returns a JSON object with a **message** field of type string confirming the deletion. In case of an error (for example, if the user UID is missing, the user is not found, or an internal error occurs), a JSON object with an **error** field (string) is returned.
      operationId: user-management_users_delete
      responses:
        "200":
          description: User deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message indicating that the user has
                      been deleted.
              example:
                message: User with UID MYmC7MzsPBNU6uSQBnJ0 deleted from admin
        "400":
          description: Bad Request - Missing required user UID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating that the user UID
                      is missing.
              example:
                error: User UID is required.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the token is missing
                      or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - User is not authorized to delete users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: Not Found - User not found or not under admin.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the user is not found
                      under the admin's account.
              example:
                error: User is not under admin.
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
      x-codegen-request-body-name: data
  /user-management/users/filter/:
    get:
      tags:
      - user-management
      summary: Filter and Paginate Users
      description: |-
        This endpoint allows an authenticated admin to filter and paginate through the users under their account. You can optionally specify query parameters to control pagination:

        - **start_after_id** *(string, optional)*: The UID after which to start retrieving users (for forward pagination).
        - **end_before_id** *(string, optional)*: The UID before which to retrieve users (for backward pagination).
        - **limit** *(integer, optional)*: The maximum number of users to retrieve. Defaults to 5 if not provided.

        **Response Structure (HTTP 200):**
        The response returns a JSON object with the following fields:

        - **query_count** *(integer)*: Total number of users under the admin.
        - **users** *(array)*: An array of user objects. Each user object contains:
          - **created_at** *(string, date-time)*: User creation timestamp.
          - **weight** *(number)*: The user's weight.
          - **age** *(string)*: The user's age.
          - **ycom** *(number)*: The user's YCOM value.
          - **height** *(number)*: The user's height.
          - **phone** *(string)*: The user's phone number.
          - **leg_length** *(number)*: The user's leg length.
          - **display_name** *(string)*: The user's display name.
          - **shoeSize** *(string)*: The user's shoe size.
          - **email** *(string)*: The user's email address.
          - **gender** *(string)*: The user's gender.
          - **brand** *(string)*: The brand associated with the user.
          - **shoeModel** *(string)*: The model of the user's shoe.
          - **user_uid** *(string)*: The unique identifier of the user.

        - **first_uid** *(string)*: The UID of the first user in the current page.
        - **last_uid** *(string)*: The UID of the last user in the current page.

        **Notes:**
        - A valid Bearer token is required.
        - If no users are found, an error message is returned with status code 404.
      operationId: user-management_users_filter_list
      parameters:
      - name: start_after_id
        in: query
        description: The UID after which to start retrieving users (for forward pagination).
        schema:
          type: string
      - name: end_before_id
        in: query
        description: The UID before which to retrieve users (for backward pagination).
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of users to retrieve. Must be a positive integer.
          Defaults to 5.
        schema:
          minimum: 1
          type: integer
          default: 5
      responses:
        "200":
          description: Successfully retrieved the filtered list of users.
          content:
            application/json:
              schema:
                required:
                - first_uid
                - last_uid
                - query_count
                - users
                type: object
                properties:
                  query_count:
                    type: integer
                    description: Total number of users under the admin.
                  users:
                    type: array
                    description: An array of user objects.
                    items:
                      required:
                      - age
                      - brand
                      - created_at
                      - display_name
                      - email
                      - gender
                      - height
                      - leg_length
                      - phone
                      - shoeModel
                      - shoeSize
                      - user_uid
                      - weight
                      - ycom
                      type: object
                      properties:
                        created_at:
                          type: string
                          description: User creation timestamp.
                          format: date-time
                        weight:
                          type: number
                          description: User's weight.
                        age:
                          type: string
                          description: User's age.
                        ycom:
                          type: number
                          description: User's YCOM value.
                        height:
                          type: number
                          description: User's height.
                        phone:
                          type: string
                          description: User's phone number.
                        leg_length:
                          type: number
                          description: User's leg length.
                        display_name:
                          type: string
                          description: User's display name.
                        shoeSize:
                          type: string
                          description: User's shoe size.
                        email:
                          type: string
                          description: User's email address.
                          format: email
                        gender:
                          type: string
                          description: User's gender.
                        brand:
                          type: string
                          description: The brand associated with the user.
                        shoeModel:
                          type: string
                          description: The model of the user's shoe.
                        user_uid:
                          type: string
                          description: Unique identifier for the user.
                  first_uid:
                    type: string
                    description: UID of the first user in the current page.
                  last_uid:
                    type: string
                    description: UID of the last user in the current page.
              example:
                query_count: 2
                users:
                - created_at: 2024-12-02T19:17:30.371Z
                  weight: 79.79
                  age: "30"
                  ycom: 1.01
                  height: 177.8
                  phone: "92039023232"
                  leg_length: 0.96
                  display_name: User1
                  shoeSize: "8"
                  email: user1@gmail.com
                  gender: Male
                  brand: Nike
                  shoeModel: Peak-smart
                  user_uid: idsKbCumCUIsNAk3h
                - created_at: 2024-08-16T00:29:21.349Z
                  weight: 70
                  age: "22"
                  ycom: 0.96
                  height: 174
                  phone: "8328889011"
                  leg_length: 0.91
                  display_name: User2
                  shoeSize: "6"
                  email: user2@gmail.com
                  gender: Female
                  brand: Fabletics
                  shoeModel: The Everyday Sneaker II
                  user_uid: slsKbCumCUIsNAk3h
                first_uid: idsKbCumCUIsNAk3h
                last_uid: slsKbCumCUIsNAk3h
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Authentication error message.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The requester does not have admin privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: Not Found - No users found under the admin or an error occurred
            during retrieval.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating the issue.
              example:
                error: No users found under admin
        "500":
          description: Internal Server Error - An unexpected error occurred during
            retrieval.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: "Error fetching user records: <error details>"
      security:
      - Bearer: []
  /user-management/users/{user_uid}:
    get:
      tags:
      - user-management
      summary: Retrieve Details for a Specific User
      description: |-
        This endpoint allows an authenticated admin to retrieve detailed information for a specific user under their account. The user is identified by the unique `user_uid` provided in the URL.

        **Path Parameter:**
        - **user_uid** *(string, required)*: The unique identifier of the user.

        **Response Structure (HTTP 200):**
        Returns a JSON object with the following fields and data types:

        - **created_at** *(string, date-time)*: Timestamp when the user was created.
        - **weight** *(number)*: The user's weight.
        - **age** *(string)*: The user's age.
        - **ycom** *(number)*: The user's YCOM value.
        - **height** *(number)*: The user's height.
        - **phone** *(string)*: The user's phone number.
        - **leg_length** *(number)*: The user's leg length.
        - **display_name** *(string)*: The user's display name.
        - **shoeSize** *(string)*: The user's shoe size.
        - **email** *(string)*: The user's email address.
        - **gender** *(string)*: The user's gender.
        - **brand** *(string)*: The brand associated with the user.
        - **shoeModel** *(string)*: The model of the user's shoe.
        - **user_uid** *(string)*: The unique identifier for the user.

        **Example Successful Response:**
        ```json
        {
          "created_at": "2024-12-02T19:17:30.371Z",
          "weight": 79,
          "age": "30",
          "ycom": 1.1,
          "height": 177,
          "phone": "92039023232",
          "leg_length": 0.9,
          "display_name": "User1",
          "shoeSize": "8",
          "email": "user1@gmail.com",
          "gender": "Male",
          "brand": "Nike",
          "shoeModel": "Peak-smart",
          "user_uid": "hoEwsdv2fsFs2fav"
        }
        ```

        **Notes:**
        - A valid Bearer token with admin privileges is required.
        - If the specified user does not exist or is not under the admin, a 404 error is returned.
      operationId: user-management_users_read
      parameters:
      - name: user_uid
        in: path
        description: The unique identifier of the user.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                required:
                - age
                - brand
                - created_at
                - display_name
                - email
                - gender
                - height
                - leg_length
                - phone
                - shoeModel
                - shoeSize
                - user_uid
                - weight
                - ycom
                type: object
                properties:
                  created_at:
                    type: string
                    description: Timestamp when the user was created.
                    format: date-time
                  weight:
                    type: number
                    description: The user's weight.
                  age:
                    type: string
                    description: The user's age.
                  ycom:
                    type: number
                    description: The user's YCOM value.
                  height:
                    type: number
                    description: The user's height.
                  phone:
                    type: string
                    description: The user's phone number.
                  leg_length:
                    type: number
                    description: The user's leg length.
                  display_name:
                    type: string
                    description: The user's display name.
                  shoeSize:
                    type: string
                    description: The user's shoe size.
                  email:
                    type: string
                    description: The user's email address.
                    format: email
                  gender:
                    type: string
                    description: The user's gender.
                  brand:
                    type: string
                    description: The brand associated with the user.
                  shoeModel:
                    type: string
                    description: The model of the user's shoe.
                  user_uid:
                    type: string
                    description: The unique identifier for the user.
              example:
                created_at: 2024-12-02T19:17:30.371Z
                weight: 80
                age: "30"
                ycom: 1.1
                height: 177
                phone: "92039023232"
                leg_length: 0.9
                display_name: User1
                shoeSize: "8.5"
                email: user1@example.com
                gender: Male
                brand: Nike
                shoeModel: Ps-1
                user_uid: mKbCumCUIsNAk3h
        "400":
          description: Bad Request - The user UID is missing or invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the problem.
              example:
                error: User UID is required.
        "401":
          description: Unauthorized - Missing or invalid token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that authentication failed.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The requester does not have admin privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: Not Found - The user is not found or is not under the admin.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the user was not found.
              example:
                error: User is not under this admin
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: "Error fetching user data: <error details>"
      security:
      - Bearer: []
  /weightlifting/management/sessions/:
    post:
      tags:
      - weightlifting
      summary: Create a New Video Processing Session (Admin on Behalf of Another User)
      description: |
        This endpoint allows an **admin** (or sub-admin) to upload a **video file** for processing and create a new "session" resource **on behalf of another user**. The server will return a `session_id` that can be used to poll or retrieve the session details/results.

        ### Request Body (Multipart/Form-Data)

        You must supply the following fields:

        - **user_id** *(string, required)*: The ID of the user on whose behalf this session is created.
        - **video** *(file, required)*: The raw video file to be processed.
        - **session_name** *(string, optional)*: A human-readable name/title for the session.
        - **exercise_name** *(string, required)*: The name of the exercise. Choose one of the following: 'snatch', 'clean', or 'clean_and_jerk'.
        - **barbell_mass** *(string, optional)*: The mass of the barbell used (numeric string). If not provided, a default value of 100 kg (or 220 lb) is assigned.

        ### Response Structure

        On success (HTTP 200), the response is a JSON object with:

        - **session_id** *(string)*: A unique identifier for the created session.
        - **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).

        ### Workflow
        1. **POST** a multipart/form-data request containing the required fields `user_id` and `video`, plus any optional fields.
        2. Provide a valid Bearer token in the `Authorization` header.
        3. The caller must have admin privileges to successfully create a session for another user.
        4. If successful, the server responds with `session_id` and `title`.
        5. If an error occurs (e.g., missing fields, lack of permissions), a JSON object with an `error` key is returned.

        #### Example cURL:

        ```bash
        curl -X POST \
             -H 'Content-Type: multipart/form-data' \
             -H 'Authorization: Bearer <YOUR_ADMIN_TOKEN>' \
             -F 'user_id=someUserId123' \
             -F 'video=@/path/to/video.mp4' \
             -F 'session_name=Custom Session' \
             -F 'exercise_name=clean' \
             -F 'barbell_mass=30' \
             https://<backend-link>/weightlifting/management/sessions/
        ```
      operationId: weightlifting_management_sessions_create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - exercise_name
              - user_id
              - video
              type: object
              properties:
                user_id:
                  type: string
                  description: "**Required.** The ID of the user for whom this session\
                    \ is created (form field: text)."
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field: text)."
                exercise_name:
                  type: string
                  description: "**Required.** The name of the exercise. Choose one\
                    \ of the following: 'snatch', 'clean', or 'clean_and_jerk'."
                  enum:
                  - snatch
                  - clean
                  - clean_and_jerk
                barbell_mass:
                  type: string
                  description: '**Optional.** The mass of the barbell used (numeric
                    string). Defaults to 100 kg (or 220 lb) if not provided.'
          application/x-www-form-urlencoded:
            schema:
              required:
              - exercise_name
              - user_id
              - video
              type: object
              properties:
                user_id:
                  type: string
                  description: "**Required.** The ID of the user for whom this session\
                    \ is created (form field: text)."
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field: text)."
                exercise_name:
                  type: string
                  description: "**Required.** The name of the exercise. Choose one\
                    \ of the following: 'snatch', 'clean', or 'clean_and_jerk'."
                  enum:
                  - snatch
                  - clean
                  - clean_and_jerk
                barbell_mass:
                  type: string
                  description: '**Optional.** The mass of the barbell used (numeric
                    string). Defaults to 100 kg (or 220 lb) if not provided.'
        required: true
      responses:
        "200":
          description: Video processing session created successfully (HTTP 200).
          content:
            application/json:
              schema:
                required:
                - session_id
                - title
                type: object
                properties:
                  session_id:
                    type: string
                    description: The unique identifier for the created session.
                  title:
                    type: string
                    description: The session title (defaults if not provided).
              example:
                session_id: abcd1234efgh5678
                title: Custom Session
        "400":
          description: "Bad Request - Possibly due to missing `user_id`, missing `video`,\
            \ or invalid form data."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: user_id is required
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating a missing or invalid token.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have admin permission to create
            sessions for others.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: "Not Found - Indicates business logic issues or resource limitations\
            \ (e.g., session limit)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
              example:
                error: User has reached the maximum number of sessions.
        "500":
          description: Internal Server Error - Unexpected error occurred on the server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating a server-side failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /weightlifting/sessions/:
    post:
      tags:
      - weightlifting
      summary: Create a New Video Processing Session
      description: |
        This endpoint allows an authenticated (and authorized) user to upload a **video file** for processing and create a new "session" resource. The server will return a `session_id` that can be used to poll or retrieve the session details/results.

        ### Request Body (Multipart/Form-Data)

        You must supply the following fields:

        - **video** *(file, required)*: The raw video file to be processed.
        - **session_name** *(string, optional)*: A human-readable name/title for the session.
        - **exercise_name** *(string, required)*: The name of the exercise. Choose one of the following: 'snatch', 'clean', or 'clean_and_jerk'.
        - **barbell_mass** *(string, optional)*: The mass of the barbell used (numeric string). If not provided, a default value of 100 kg (or 220 lb) is assigned.

        ### Response Structure

        On success (HTTP 200), the response is a JSON object with:

        - **session_id** *(string)*: A unique identifier for the created session.
        - **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).

        ### Workflow
        1. **POST** a multipart/form-data request containing the required `video` field and any optional fields.
        2. Provide a valid Bearer token in the `Authorization` header.
        3. If successful, the server responds with `session_id` and `title`.
        4. If an error occurs (e.g., missing video, lack of permissions), a JSON object with an `error` key is returned.

        #### Example cURL:

        ```bash
        curl -X POST \
             -H 'Content-Type: multipart/form-data' \
             -H 'Authorization: Bearer <YOUR_TOKEN>' \
             -F 'video=@/path/to/video.mp4' \
             -F 'session_name=Morning Lift' \
             -F 'exercise_name=snatch' \
             -F 'barbell_mass=20' \
             https://<backend-link>/weightlifting/sessions/
        ```
      operationId: weightlifting_sessions_create
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - exercise_name
              - video
              type: object
              properties:
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field type: text)."
                exercise_name:
                  type: string
                  description: "**Required.** The name of the exercise. Choose one\
                    \ of the following: 'snatch', 'clean', or 'clean_and_jerk'."
                  enum:
                  - snatch
                  - clean
                  - clean_and_jerk
                barbell_mass:
                  type: string
                  description: '**Optional.** The mass of the barbell used (numeric
                    string). Defaults to 100 kg (or 220 lb) if not provided.'
          application/x-www-form-urlencoded:
            schema:
              required:
              - exercise_name
              - video
              type: object
              properties:
                video:
                  type: string
                  description: "**Required.** The raw video file to be processed (form\
                    \ field type: file)."
                  format: binary
                session_name:
                  type: string
                  description: "**Optional.** A descriptive name for the session (form\
                    \ field type: text)."
                exercise_name:
                  type: string
                  description: "**Required.** The name of the exercise. Choose one\
                    \ of the following: 'snatch', 'clean', or 'clean_and_jerk'."
                  enum:
                  - snatch
                  - clean
                  - clean_and_jerk
                barbell_mass:
                  type: string
                  description: '**Optional.** The mass of the barbell used (numeric
                    string). Defaults to 100 kg (or 220 lb) if not provided.'
        required: true
      responses:
        "200":
          description: Video processing session created successfully (HTTP 200).
          content:
            application/json:
              schema:
                required:
                - session_id
                - title
                type: object
                properties:
                  session_id:
                    type: string
                    description: The unique identifier for the created session.
                  title:
                    type: string
                    description: The session title (defaults if not provided).
              example:
                session_id: abcd1234efgh5678
                title: My Morning Run
        "400":
          description: Bad Request - Possibly due to missing video file or invalid
            form data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message.
              example:
                error: No video file was provided
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating a missing or invalid token.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have permission to create sessions
            (admin-only).
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error indicating insufficient privileges.
              example:
                error: You must be an admin to access this data.
        "404":
          description: "Not Found - Indicates business logic issues or resource limitations\
            \ (e.g., session limit)."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the issue.
              example:
                error: User has reached the maximum number of sessions.
        "500":
          description: Internal Server Error - Unexpected error occurred on the server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating a server-side failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /weightlifting/sessions/{session_id}/:
    get:
      tags:
      - weightlifting
      summary: Retrieve Weightlifting Session Details
      description: "Retrieves the details of a weightlifting session specified by\
        \ its `session_id`. The returned data includes URLs to the original and analyzed\
        \ videos, session creation timestamp, exercise type, user information, metrics,\
        \ angles, report metrics, and timestamps. \n\n### Path Parameter\n- **session_id**\
        \ *(string, required)*: The unique identifier of the session to retrieve.\n\
        \n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON\
        \ object with the following properties:\n\n- **analyzed_video_url** *(string,\
        \ URI)*: Public URL of the analyzed video.\n- **video_url** *(string, URI)*:\
        \ Public URL of the original video.\n- **created_at** *(object)*: A dictionary\
        \ with:\n    - **date** *(string)*: Creation date in `DD/MM/YYYY` format.\n\
        \    - **time** *(string)*: Creation time in `HH:MM AM/PM` format.\n- **exercise**\
        \ *(string)*: The exercise performed (e.g., 'snatch').\n- **user_name** *(string)*:\
        \ The name of the user associated with the session.\n- **activity** *(string)*:\
        \ The activity type (should be 'Weightlifting').\n- **title** *(string)*:\
        \ The title of the session.\n- **metrics** *(object)*: A dictionary of numeric\
        \ metric values (e.g., speed, power). Each key maps to a number.\n- **angles**\
        \ *(object)*: A dictionary where each key maps to an array of numeric values\
        \ representing angles.\n- **report_metrics** *(object)*: A dictionary where\
        \ each key maps to an array of numeric values representing report-specific\
        \ metrics.\n- **all_timestamps** *(array[number])*: An array of timestamps\
        \ (e.g., in seconds) for the session data.\n\n### Error Handling\n\n- **400\
        \ Bad Request**: Invalid parameters (e.g., invalid admin UID).\n- **401 Unauthorized**:\
        \ Missing or invalid access token.\n- **403 Forbidden**: Insufficient privileges.\n\
        - **404 Not Found**: Session not found or the activity is not Weightlifting.\n\
        - **500 Internal Server Error**: An unexpected error occurred on the server.\n\
        \n### Security\n\nA valid Bearer token must be provided in the `Authorization`\
        \ header."
      operationId: weightlifting_sessions_read
      parameters:
      - name: session_id
        in: path
        description: The unique identifier of the weightlifting session to retrieve.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Weightlifting session details retrieved successfully.
          content:
            application/json:
              schema:
                required:
                - activity
                - all_timestamps
                - analyzed_video_url
                - angles
                - created_at
                - exercise
                - metrics
                - report_metrics
                - title
                - user_name
                - video_url
                type: object
                properties:
                  analyzed_video_url:
                    type: string
                    description: Public URL of the analyzed video.
                    format: uri
                  video_url:
                    type: string
                    description: Public URL of the original video.
                    format: uri
                  created_at:
                    required:
                    - date
                    - time
                    type: object
                    properties:
                      date:
                        type: string
                        description: Date in DD/MM/YYYY format.
                      time:
                        type: string
                        description: Time in HH:MM AM/PM format.
                    description: Session creation timestamp.
                  exercise:
                    type: string
                    description: "The exercise performed (e.g., 'snatch')."
                  user_name:
                    type: string
                    description: Name of the user associated with the session.
                  activity:
                    type: string
                    description: "Activity type, expected to be 'Weightlifting'."
                  title:
                    type: string
                    description: The title of the session.
                  metrics:
                    type: object
                    additionalProperties:
                      type: number
                    description: A dictionary of numeric metrics.
                  angles:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: number
                    description: A dictionary where keys map to arrays of angle values.
                  report_metrics:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: number
                    description: A dictionary where keys map to arrays of report metric
                      values.
                  all_timestamps:
                    type: array
                    description: List of timestamps corresponding to session data.
                    items:
                      type: number
              example:
                analyzed_video_url: https://storage.googleapis.com/aikonweb001.appspot.com/analyzed_videos/.../analyzed_video.mp4
                video_url: https://storage.googleapis.com/aikonweb001.appspot.com/analyzed_videos/.../snatch_weightlift.MOV
                created_at:
                  date: 08/02/2025
                  time: 02:17 AM
                exercise: snatch
                user_name: Violet Snow
                activity: Weightlifting
                title: snatch-w
                metrics:
                  bar_past_the_knee_speed: 1.2634576485766442
                  bar_past_the_knee_acceleration: -0.9553989355246633
                  max_GRF: 1090205.6278922595
                  first_pull_end: 954
                  second_pull_end: 1036
                  scale: 1.98963
                  total_time: 3200
                  transition: 983
                  barbell_weight: 50
                  start_of_lifting: 537
                  catch_end: 1089
                  max_power: 1.0633983025107784E7
                  clean_time: 2760
                  recovery_end: 1177
                  mean_markers_validity: 0.612
                  max_bar_speed: 33.22927464315564
                angles:
                  lank_angle:
                  - 30
                  - 35
                  - 33
                  lkne_angle:
                  - 40
                  - 42
                  - 41
                  rank_angle:
                  - 38
                  - 40
                  - 39
                  hip_intersection_angle:
                  - 50
                  - 55
                  - 52
                  rkne_angle:
                  - 42
                  - 44
                  - 43
                report_metrics:
                  bar:
                  - 0.5
                  - 0.6
                  - 0.7
                  vhipy:
                  - 1.2
                  - 1.3
                  - 1.1
                all_timestamps:
                - 16
                - 25
        "400":
          description: Bad Request - Invalid parameters or admin UID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message for invalid requests.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Access token is missing or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - Insufficient privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: User is not permitted to access this data.
              example:
                error: Access denied.
        "404":
          description: Not Found - Session not found or invalid activity.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating that the session was not
                      found.
              example:
                error: Session not found
        "500":
          description: Internal Server Error - An unexpected error occurred.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server-side
                      failure.
              example:
                error: "An unexpected error occurred: <error message>"
      security:
      - Bearer: []
  /weightlifting/sessions/{session_id}/export/:
    get:
      tags:
      - weightlifting
      summary: Export Weightlifting Session Data
      description: |-
        Retrieves a user's weightlifting session data from Firestore, including keypoints, angles, and timestamps. The session's activity must be 'Weightlifting'.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the session to export data for.

        ### Response Structure (HTTP 200)

        On success, the response is a JSON object containing:
        - **keypoints** *(object)*: A dictionary where each key (e.g., 'lknev', 'lknex', etc.) maps to an array of numbers representing keypoint data.
        - **angles** *(object)*: A dictionary where each key (e.g., 'lank_angle', 'lkne_angle', etc.) maps to an array of numbers representing angle measurements.
        - **all_timestamps** *(array[number])*: An array of timestamps corresponding to the session data.
        - **metrics** *(object)*: A dictionary of numeric metric values (e.g., max_GRF, max_bar_speed). Each key maps to a number.
        - **activity** *(string)*: The session activity, expected to be 'Weightlifting'.

        ### Error Handling

        - **400 Bad Request**: Invalid parameters (e.g., admin UID error).
        - **401 Unauthorized**: Missing or invalid access token.
        - **403 Forbidden**: Insufficient privileges.
        - **404 Not Found**: Session not found or invalid activity.
        - **500 Internal Server Error**: An unexpected server-side error occurred.

        ### Security

        A valid Bearer token must be provided in the `Authorization` header.
      operationId: weightlifting_sessions_export_list
      parameters:
      - name: session_id
        in: path
        description: The session ID for which to export weightlifting data.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Weightlifting session data retrieved successfully.
          content:
            application/json:
              schema:
                required:
                - activity
                - all_timestamps
                - angles
                - keypoints
                - metrics
                type: object
                properties:
                  keypoints:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: number
                    description: A dictionary of keypoints. Each key maps to an array
                      of numeric values.
                  angles:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: number
                    description: A dictionary of angles. Each key maps to an array
                      of numeric values.
                  all_timestamps:
                    type: array
                    description: An array of timestamps (in seconds) for the session
                      data.
                    items:
                      type: number
                  metrics:
                    type: object
                    additionalProperties:
                      type: number
                    description: A dictionary of numeric metrics. Each key maps to
                      a number.
                  activity:
                    type: string
                    description: The session activity (expected to be 'Weightlifting').
              example:
                keypoints:
                  lknev:
                  - 1
                  - 2
                  - 3
                  lknex:
                  - 1.5
                  - 2.5
                  - 3.5
                angles:
                  lank_angle:
                  - 30
                  - 35
                  - 33
                  lkne_angle:
                  - 40
                  - 42
                  - 41
                  rank_angle:
                  - 38
                  - 40
                  - 39
                  hip_intersection_angle:
                  - 50
                  - 55
                  - 52
                  rkne_angle:
                  - 42
                  - 44
                  - 43
                all_timestamps:
                - 16
                - 25
                metrics:
                  bar_past_the_knee_speed: 1.2634576485766442
                  bar_past_the_knee_acceleration: -0.9553989355246633
                  max_GRF: 1090205.6278922595
                  first_pull_end: 954
                  second_pull_end: 1036
                  scale: 1.98963
                  total_time: 3200
                  transition: 983
                  barbell_weight: 50
                  start_of_lifting: 537
                  catch_end: 1089
                  max_power: 1.0633983025107784E7
                  clean_time: 2760
                  recovery_end: 1177
                  mean_markers_validity: 0.612
                  max_bar_speed: 33.22927464315564
                activity: Weightlifting
        "400":
          description: Bad Request - Invalid parameters or admin UID error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing the invalid request.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Token is missing or invalid.
              example:
                error: No token provided.
        "403":
          description: Forbidden - User does not have sufficient privileges.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: User is not authorized to access this data.
              example:
                error: Access denied.
        "404":
          description: Not Found - The session was not found or its activity is not
            'Weightlifting'.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating the session was not found.
              example:
                error: Session not found
        "500":
          description: Internal Server Error - An unexpected error occurred on the
            server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Detailed error message indicating a server-side failure.
              example:
                error: "An unexpected error occurred: <error details>"
      security:
      - Bearer: []
  /weightlifting/sessions/{session_id}/lift-analysis/:
    post:
      tags:
      - weightlifting
      summary: Analyze Weightlifting Lift
      description: |-
        Analyzes a user's weightlifting lift for a given `session_id`. If corresponding images already exist, they are returned. Otherwise, new images are generated.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the weightlifting session.

        ### Response Structure (HTTP 200)

        If successful, the response is a JSON object where each key (e.g., 'hip_height', 'bar_speed', etc.) maps to a dictionary of URLs for English (`en`) and Russian (`ru`) versions of the image:

        ```json
        {
          "hip_height": {
            "en": "...",
            "ru": "..."
          },
          "bar_height": {
            "en": "...",
            "ru": "..."
          },
          "positions": {
            "en": "...",
            "ru": "..."
          }
          // Other measurements
        }
        ```

        maps to a dictionary of URLs for English (`en`) and Russian (`ru`) versions of the image:

        - **400 Bad Request**: Invalid parameters (e.g., missing or malformed admin UID).
        - **401 Unauthorized**: Token is missing or invalid.
        - **403 Forbidden**: The user does not have a valid payment plan.
        - **404 Not Found**: Session data not found or images cannot be generated.
        - **500 Internal Server Error**: An unexpected error occurred on the server.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: weightlifting_sessions_lift-analysis_create
      parameters:
      - name: session_id
        in: path
        description: The session ID for which images will be retrieved or generated.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Weightlifting lift images retrieved or generated successfully.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    en:
                      type: string
                      description: Public URL of the English version of the image.
                      format: uri
                    ru:
                      type: string
                      description: Public URL of the Russian version of the image.
                      format: uri
                  description: Contains 'en' and 'ru' URLs for each measurement.
                description: A dictionary of images keyed by measurement type.
              example:
                hip_height:
                  en: https://storage.googleapis.com/.../hip_height_en.png
                  ru: https://storage.googleapis.com/.../hip_height_ru.png
                bar_speed:
                  en: https://storage.googleapis.com/.../bar_speed_en.png
                  ru: https://storage.googleapis.com/.../bar_speed_ru.png
                positions:
                  en: https://storage.googleapis.com/.../positions_en.png
                  ru: https://storage.googleapis.com/.../positions_ru.png
        "400":
          description: Bad Request - Possibly due to invalid parameters or missing
            user ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Explanation of the invalid request.
              example:
                error: Invalid admin UID.
        "401":
          description: Unauthorized - Missing or invalid access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Authentication error.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have a valid payment plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating insufficient privileges
                      or invalid plan.
              example:
                error: User does not have a valid payment plan
        "404":
          description: Not Found - Session data not found or images cannot be generated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message if the session or images are not found.
              example:
                error: Session not found or images generation failed.
        "500":
          description: Internal Server Error - Unexpected server-side error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Details of the server-side failure.
              example:
                error: "An unexpected error occurred: <error>"
      security:
      - Bearer: []
  /weightlifting/sessions/{session_id}/recommendation/:
    post:
      tags:
      - weightlifting
      summary: Generate Weightlifting Recommendations
      description: |-
        Generates a set of weightlifting recommendations (in English and Russian) for a given session. The user must have a valid payment plan (Pro, Premium, Enterprise, or Standard). The resulting recommendations are saved and returned as a JSON object.

        ### Path Parameter
        - **session_id** *(string, required)*: The unique identifier of the session for which to generate recommendations.

        ### Response Structure (HTTP 200)

        If successful, the response is a JSON object where each key corresponds to a specific recommendation field (e.g., 'text_bar_speed', 'text_hip_speed', etc.), mapping to an object with **'en'** and **'ru'** keys:

        ```json
        {
          "text_bar_speed": {
            "en": "Maintain an upright torso...",
            "ru": "Сохраняйте прямое положение туловища..."
          },
          "text_hip_speed": {
            "en": "Ensure the hips reach full extension...",
            "ru": "Убедитесь, что бедра полностью выпрямляются..."
          },
          // Additional fields for each metric
        }
        ```

        ### Error Handling

        - **400 Bad Request**: Invalid parameters (e.g., incorrect admin UID) or missing user token.
        - **401 Unauthorized**: The access token is missing or invalid.
        - **403 Forbidden**: The user does not have a valid payment plan.
        - **404 Not Found**: Unable to generate or retrieve session data.
        - **500 Internal Server Error**: An unexpected error occurred on the server.

        ### Security
        A valid Bearer token must be provided in the `Authorization` header.
      operationId: weightlifting_sessions_recommendation_create
      parameters:
      - name: session_id
        in: path
        description: Session ID for which the recommendations will be generated.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Recommendations generated successfully.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    en:
                      type: string
                      description: The recommendation in English.
                    ru:
                      type: string
                      description: The recommendation in Russian.
                  description: Contains English and Russian text for each recommendation.
                description: "A dictionary of recommendations keyed by text_<metric>,\
                  \ each mapping to 'en'/'ru' text."
              example:
                text_bar_speed:
                  en: Maintain an upright torso during the squatting phases...
                  ru: Сохраняйте прямое положение туловища во время фаз приседания...
                text_hip_speed:
                  en: Ensure the hips reach full extension during the pull...
                  ru: "Убедитесь, что бедра полностью выпрямляются во время тяги..."
        "400":
          description: Bad Request - Possibly invalid admin UID or missing token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Explanation of the invalid request.
              example:
                error: Invalid admin UID
        "401":
          description: Unauthorized - The token is missing or invalid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Authentication error.
              example:
                error: No token provided.
        "403":
          description: Forbidden - The user does not have a valid payment plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: User's plan is insufficient.
              example:
                error: User does not have a valid payment plan
        "404":
          description: Not Found - Session data not found or generation failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message if the session or data could not be
                      retrieved.
              example:
                error: Unable to generate or retrieve session data
        "500":
          description: Internal Server Error - Unexpected server-side issue.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A detailed error message indicating a server failure.
              example:
                error: "An unexpected error occurred: <error>"
      security:
      - Bearer: []
components:
  securitySchemes:
    Bearer:
      type: apiKey
      description: "Enter your bearer token in the format: Bearer <token>"
      name: Authorization
      in: header
x-original-swagger-version: "2.0"
