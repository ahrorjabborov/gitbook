{"swagger": "2.0", "info": {"title": "AIKYNETIX WEB API", "description": "API documentation", "termsOfService": "https://aikynetix.app/terms", "contact": {"email": "info@aikynetix.com"}, "license": {"name": "BSD License"}, "version": "v1"}, "host": "aikpy-nsz2.onrender.com", "schemes": ["https"], "basePath": "/", "consumes": ["application/json"], "produces": ["application/json"], "securityDefinitions": {"Bearer": {"type": "apiKey", "name": "Authorization", "in": "header", "description": "Enter your bearer token in the format: Bearer <token>"}}, "security": [{"Bearer": []}], "paths": {"/admin-management/invitation/": {"get": {"operationId": "admin-management_invitation_list", "summary": "List User Invitations", "description": "### List User Invitations\n\nThis endpoint allows a user to retrieve a list of their pending invitations to become a sub-admin. Each invitation includes details such as the inviter's information and the invitation status.\n\n**Usage Example:**\nSend a `GET` request to `admin-management/invitations/`.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a JSON object containing a list of invitations.\n\n**Notes:**\n- Proper authentication is required; only authenticated users can access their invitations.", "parameters": [], "responses": {"200": {"description": "Successfully retrieved a list of user invitations.", "schema": {"required": ["invitations"], "type": "object", "properties": {"invitations": {"description": "List of user invitations.", "type": "array", "items": {"required": ["invite_token", "admin_uid", "admin_email", "admin_display_name", "invitee_email", "status", "created_at"], "type": "object", "properties": {"invite_token": {"description": "Unique token identifying the invitation.", "type": "string"}, "admin_uid": {"description": "UID of the admin who sent the invitation.", "type": "string"}, "admin_email": {"description": "Email address of the admin.", "type": "string", "format": "email"}, "admin_display_name": {"description": "Display name of the admin.", "type": "string"}, "invitee_email": {"description": "Email address of the invitee.", "type": "string", "format": "email"}, "status": {"description": "Current status of the invitation. Possible values: 'pending', 'accepted', 'declined'.", "type": "string"}, "created_at": {"description": "Timestamp when the invitation was created.", "type": "string", "format": "date-time"}}}}}, "example": {"invitations": [{"invite_token": "123e4567-e89b-12d3-a456-426614174000", "admin_uid": "adminUid456", "admin_email": "admin@example.com", "admin_display_name": "Admin User", "invitee_email": "user@example.com", "status": "pending", "created_at": "2025-01-30T12:34:56Z"}, {"invite_token": "223e4567-e89b-12d3-a456-426614174001", "admin_uid": "adminUid789", "admin_email": "admin2@example.com", "admin_display_name": "Second Admin", "invitee_email": "anotheruser@example.com", "status": "accepted", "created_at": "2025-01-29T11:22:33Z"}]}}}, "404": {"description": "Not Found - No invitations found for the user.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No pending invitations found.", "error_code": "NO_INVITATIONS_FOUND"}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided.", "error_code": "NO_TOKEN_PROVIDED"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred while retrieving invitations.", "error_code": "INVITATION_RETRIEVAL_FAILED"}}}}, "tags": ["admin-management"], "security": [{"Bearer": []}]}, "post": {"operationId": "admin-management_invitation_create", "summary": "Create a User Invitation", "description": "### Create a User Invitation\n\nThis endpoint allows a super administrator to create an invitation for a user to become a sub-admin. Provide the `user_email` of the user you wish to invite. Optionally, you can include a `platform_link` to direct the user to your platform upon accepting the invitation.\n\n**Usage Example:**\nSend a `POST` request to `admin-management/invitations/` with a JSON body containing the `user_email` and optionally the `platform_link`.\n\n**Request Body:**\n- `user_email` *(string, required)*: The email address of the user to be invited as a sub-admin.\n- `platform_link` *(string, optional)*: A URL to direct the invited user to your platform.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a JSON object containing the invitation details.\n\n**Notes:**\n- The `user_email` must correspond to an existing user or a new user to be invited.\n- Only users with super admin privileges can access this endpoint.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["user_email"], "type": "object", "properties": {"user_email": {"description": "Email address of the user to be invited as a sub-admin.", "type": "string", "format": "email"}, "platform_link": {"description": "Optional URL to direct the invited user upon accepting the invitation.", "type": "string", "format": "uri"}}, "example": {"user_email": "invitee@example.com", "platform_link": "https://yourplatform.com/welcome"}}}], "responses": {"201": {"description": "Invitation successfully created.", "schema": {"required": ["invite_token", "admin_uid", "invitee_email", "status", "created_at"], "type": "object", "properties": {"invite_token": {"description": "Unique token identifying the invitation.", "type": "string"}, "admin_uid": {"description": "UID of the admin who created the invitation.", "type": "string"}, "invitee_email": {"description": "Email address of the invited user.", "type": "string", "format": "email"}, "status": {"description": "Current status of the invitation. Possible values: 'pending'.", "type": "string"}, "created_at": {"description": "Timestamp when the invitation was created.", "type": "string", "format": "date-time"}, "platform_link": {"description": "URL to direct the invited user upon accepting the invitation.", "type": "string", "format": "uri"}}, "example": {"invite_token": "123e4567-e89b-12d3-a456-426614174000", "admin_uid": "adminUid456", "invitee_email": "invitee@example.com", "status": "pending", "created_at": "2025-01-30T12:34:56Z", "platform_link": "https://yourplatform.com/welcome"}}}, "400": {"description": "Bad Request - Missing or invalid parameters.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "User email is required."}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User lacks super admin privileges.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be a super admin to access this endpoint."}}}, "404": {"description": "Not Found - Admin or user not found.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Admin does not exist."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred while creating the invitation."}}}}, "tags": ["admin-management"], "security": [{"Bearer": []}]}, "delete": {"operationId": "admin-management_invitation_delete", "summary": "Remove a User Invitation", "description": "### Remove a User Invitation\n\nThis endpoint allows a super administrator to remove an existing invitation identified by the `invite_token`. Providing a valid `invite_token` will delete the corresponding invitation.\n\n**Usage Example:**\nSend a `DELETE` request to `admin-management/invitations/` with a JSON body containing the `invite_token`.\n\n**Request Body:**\n- `invite_token` *(string, required)*: The unique token of the invitation to be removed.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a confirmation message.\n\n**Notes:**\n- The `invite_token` must correspond to an existing invitation.\n- Only users with super admin privileges can access this endpoint.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["invite_token"], "type": "object", "properties": {"invite_token": {"description": "Unique token identifying the invitation to be removed.", "type": "string"}}, "example": {"invite_token": "123e4567-e89b-12d3-a456-426614174000"}}}], "responses": {"200": {"description": "Invitation successfully removed.", "schema": {"type": "object", "properties": {"message": {"description": "Confirmation message.", "type": "string"}}, "example": {"message": "Invitation with token 123e4567-e89b-12d3-a456-426614174000 has been removed successfully."}}}, "400": {"description": "Bad Request - Missing or invalid parameters.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invite token is required."}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User lacks super admin privileges.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be a super admin to access this endpoint."}}}, "404": {"description": "Not Found - Invitation not found.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invitation not found."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred while removing the invitation."}}}}, "tags": ["admin-management"], "security": [{"Bearer": []}]}, "parameters": []}, "/admin-management/invitation/respond/": {"post": {"operationId": "admin-management_invitation_respond_create", "summary": "Respond to an Invitation", "description": "### Respond to an Invitation\n\nThis endpoint allows a user to respond to a specific invitation identified by the `invite_token`. Provide the `user_response` parameter with either 'accept' or 'decline' to respond to the invitation.\n\n**Usage Example:**\nSend a `POST` request to `admin-management/invitations/respond/` with a JSON body containing the `invite_token` and `user_response`.\n\n**Request Body:**\n- `invite_token` *(string, required)*: Unique token identifying the invitation to respond to.\n- `user_response` *(string, required)*: The user's response to the invitation. Must be either 'accept' or 'decline'.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a confirmation message.\n\n**Notes:**\n- The `invite_token` must correspond to an existing invitation.\n- Only authenticated users can access this endpoint.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["user_response", "invite_token"], "type": "object", "properties": {"invite_token": {"description": "Unique token identifying the invitation to respond to.", "type": "string"}, "user_response": {"description": "The user's response to the invitation. Must be either 'accept' or 'decline'.", "type": "string", "enum": ["accept", "decline"]}}, "example": {"invite_token": "123e4567-e89b-12d3-a456-426614174000", "user_response": "accept"}}}], "responses": {"200": {"description": "Invitation successfully responded to.", "schema": {"type": "object", "properties": {"message": {"description": "Confirmation message.", "type": "string"}}, "example": {"message": "Invitation accepted."}}}, "400": {"description": "Bad Request - Missing or invalid parameters.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid response. Must be 'accept' or 'decline'."}}}, "404": {"description": "Not Found - Invitation not found or already responded to.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invitation has already been responded to."}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided.", "error_code": "NO_TOKEN_PROVIDED"}}}, "403": {"description": "Forbidden - User lacks permissions to respond to this invitation.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You do not have permission to respond to this invitation."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred while responding to the invitation."}}}}, "tags": ["admin-management"], "security": [{"Bearer": []}]}, "parameters": []}, "/admin-management/sub-admins/": {"get": {"operationId": "admin-management_sub-admins_list", "summary": "Retrieve a Paginated List of Sub-Admins", "description": "### Retrieve a Paginated List of Sub-Admins\n\nThis endpoint allows super administrators to retrieve a paginated list of sub-admins associated with their account. The response includes user details and supports both forward and backward pagination through the use of `start_after_id` and `end_before_id` parameters.\n\n**Usage Example:**\nSend a `GET` request to `admin-management/sub-admins/` with optional query parameters to navigate through the list of sub-admins.\n\n**Query Parameters:**\n- `start_after_id` *(string, optional)*: The UID after which to start the list for forward pagination.\n- `end_before_id` *(string, optional)*: The UID before which to end the list for backward pagination.\n- `limit` *(integer, optional)*: The number of sub-admin records to retrieve. Defaults to 5 if not specified.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a JSON object containing the following fields:\n\n1. **query_count**: Total number of sub-admins available.\n2. **users**: An array of sub-admin objects, each containing `uid`, `email`, and `display_name`.\n3. **last_uid**: The UID of the last sub-admin in the current page, useful for forward pagination.\n4. **first_uid**: The UID of the first sub-admin in the current page, useful for backward pagination.\n\n**Detailed Description of Response Fields:**\n- **query_count** *(integer)*: Represents the total number of sub-admins associated with the requesting super admin.\n- **users** *(array of objects)*: Each object within the array represents a sub-admin with the following properties:\n  - `uid` *(string)*: Unique identifier of the sub-admin.\n  - `email` *(string)*: Email address of the sub-admin.\n  - `display_name` *(string)*: Display name of the sub-admin.\n - `status` *(string)*: Status of the sub-admin account, which can be 'Active' or 'Invited'.\n- **last_uid** *(string)*: UID of the last sub-admin in the current response, used for fetching the next set of records.\n- **first_uid** *(string)*: UID of the first sub-admin in the current response, used for fetching the previous set of records.\n\n**Notes:**\n- If both `start_after_id` and `end_before_id` are provided, the API prioritizes `start_after_id` for forward pagination.\n- The `limit` parameter must be a positive integer; otherwise, a `400 Bad Request` error is returned.\n- Proper authorization is required; only users with super admin privileges can access this endpoint.", "parameters": [{"name": "start_after_id", "in": "query", "description": "UID to start after for forward pagination.", "required": false, "type": "string"}, {"name": "end_before_id", "in": "query", "description": "UID to end before for backward pagination.", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Number of sub-admin records to retrieve. Must be a positive integer.", "required": false, "type": "integer", "default": 5, "minimum": 1}], "responses": {"200": {"description": "Successfully retrieved a paginated list of sub-admins.", "schema": {"required": ["query_count", "users", "last_uid", "first_uid"], "type": "object", "properties": {"query_count": {"description": "Total number of sub-admins available.", "type": "integer"}, "users": {"description": "List of sub-admins retrieved.", "type": "array", "items": {"required": ["uid", "email", "display_name", "status"], "type": "object", "properties": {"uid": {"description": "Unique identifier of the sub-admin.", "type": "string"}, "email": {"description": "Email address of the sub-admin.", "type": "string", "format": "email"}, "display_name": {"description": "Display name of the sub-admin.", "type": "string"}, "status": {"description": "Status of the sub-admin account. Possible values: 'active', 'invited'.", "type": "string"}}}}, "last_uid": {"description": "UID of the last sub-admin in the current page for forward pagination.", "type": "string"}, "first_uid": {"description": "UID of the first sub-admin in the current page for backward pagination.", "type": "string"}}}, "examples": {"application/json": {"query_count": 10, "users": [{"uid": "userUid1", "email": "user1@example.com", "display_name": "User One", "status": "active"}, {"uid": "userUid2", "email": "user2@example.com", "display_name": "User Two", "status": "Invited"}], "last_uid": "userUid2", "first_uid": "userUid1"}}}, "400": {"description": "Bad Request - Invalid query parameters provided.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid limit parameter"}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User lacks super admin privileges.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be a super admin to access this data."}}}, "404": {"description": "Not Found - No sub-admins found or retrieval failed.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Failed to retrieve sub-admins or none exist"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred"}}}}, "tags": ["admin-management"], "security": [{"Bearer": []}]}, "post": {"operationId": "admin-management_sub-admins_create", "summary": "Add a Sub-Admin", "description": "### Add a Sub-Admin\n\nThis endpoint allows a super administrator to add a new sub-admin to their account. Provide the `user_uid` of the user you wish to promote to sub-admin status.\n\n**Usage Example:**\nSend a `POST` request to `admin-management/sub-admins/` with a JSON body containing the `user_uid`.\n\n**Request Body:**\n- `user_uid` *(string, required)*: The UID of the user to be added as a sub-admin.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a confirmation message.\n\n**Notes:**\n- The `user_uid` must correspond to an existing user.\n- Only users with super admin privileges can access this endpoint.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["user_uid"], "type": "object", "properties": {"user_uid": {"description": "UID of the user to be set as sub-admin.", "type": "string"}}, "example": {"user_uid": "userUid123"}}}], "responses": {"201": {"description": "Sub-admin successfully added.", "schema": {"type": "object", "properties": {"message": {"description": "Confirmation message.", "type": "string"}}, "example": {"message": "User with UID userUid123 is now a sub-admin of adminUid456."}}}, "400": {"description": "Bad Request - Missing or invalid parameters.", "schema": {"type": "object", "properties": {"error": {"description": "Error message detailing what went wrong.", "type": "string"}}, "example": {"error": "User UID is required."}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating missing token.", "type": "string"}}, "example": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User lacks super admin privileges.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges.", "type": "string"}}, "example": {"error": "You must be a super admin to access this endpoint."}}}, "404": {"description": "Not Found - User not found or already a sub-admin.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating the user was not found or already a sub-admin.", "type": "string"}}, "example": {"error": "User with UID userUid123 does not exist."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred while adding sub-admin."}}}}, "tags": ["admin-management"], "security": [{"Bearer": []}]}, "delete": {"operationId": "admin-management_sub-admins_delete", "summary": "Remove a Sub-Admin", "description": "### Remove a Sub-Admin\n\nThis endpoint allows a super administrator to remove an existing sub-admin from their account. Provide the `user_uid` of the sub-admin you wish to remove.\n\n**Usage Example:**\nSend a `DELETE` request to `admin-management/sub-admins/` with a JSON body containing the `user_uid`.\n\n**Request Body:**\n- `user_uid` *(string, required)*: The UID of the sub-admin to be removed.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a confirmation message.\n\n**Notes:**\n- The `user_uid` must correspond to an existing sub-admin.\n- Only users with super admin privileges can access this endpoint.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["user_uid"], "type": "object", "properties": {"user_uid": {"description": "UID of the sub-admin to be removed.", "type": "string"}}, "example": {"user_uid": "userUid123"}}}], "responses": {"200": {"description": "Sub-admin successfully removed.", "schema": {"type": "object", "properties": {"message": {"description": "Confirmation message.", "type": "string"}}, "example": {"message": "User with UID userUid123 has been removed from sub-admins."}}}, "400": {"description": "Bad Request - Missing or invalid parameters.", "schema": {"type": "object", "properties": {"error": {"description": "Error message detailing what went wrong.", "type": "string"}}, "example": {"error": "User UID is required."}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating missing token.", "type": "string"}}, "example": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User lacks super admin privileges.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges.", "type": "string"}}, "example": {"error": "You must be a super admin to access this endpoint."}}}, "404": {"description": "Not Found - Sub-admin not found.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating the sub-admin was not found.", "type": "string"}}, "example": {"error": "User with UID userUid123 is not a sub-admin."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred while removing sub-admin."}}}}, "tags": ["admin-management"], "security": [{"Bearer": []}]}, "parameters": []}, "/helper/html-files/": {"get": {"operationId": "helper_html-files_list", "summary": "Retrieve HTML File", "description": "Retrieves an HTML file stored in Firebase using an encrypted token passed as a query parameter. \n\n### Query Parameter\n- **token** *(string, required)*: Encrypted token representing the user, session, and file name. This token is used to locate and decrypt the corresponding HTML file.\n\n### Response (HTTP 200)\n\nOn success, returns the content of the HTML file with a `Content-Type` of `text/html`.\n\n```html\n<html><body><h1>Example HTML</h1></body></html>\n```\n\n### Error Handling\n\n- **400 Bad Request**: Returned if the `token` query parameter is missing or empty.\n- **404 Not Found**: Returned if the HTML file cannot be retrieved (e.g., invalid token or file not found).\n- **500 Internal Server Error**: Returned if an unexpected error occurs on the server.\n\n### Security\n\nNo authentication is required for this endpoint.", "parameters": [{"name": "token", "in": "query", "description": "Encrypted token used to retrieve the HTML file.", "required": true, "type": "string"}], "responses": {"200": {"description": "HTML file retrieved successfully.", "schema": {"description": "The HTML file content.", "type": "string", "example": "<html><body><h1>Example HTML</h1></body></html>"}, "content": {"text/html": {}}}, "400": {"description": "Bad Request - Returned if the `token` parameter is missing or empty. Ensure that the token is provided in the query string.", "schema": {"type": "object", "properties": {"error": {"description": "Error message explaining that the token is required.", "type": "string"}}}, "examples": {"application/json": {"error": "Token is required"}}}, "404": {"description": "Not Found - Returned if the HTML file cannot be retrieved. This may be due to an invalid token or if the file does not exist.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the HTML file could not be found.", "type": "string"}}}, "examples": {"application/json": {"error": "Error retrieving file: <error>"}}}, "500": {"description": "Internal Server Error - Returned if an unexpected error occurred on the server. Check the error details for further information.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message describing the server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "consumes": ["multipart/form-data", "application/x-www-form-urlencoded"], "tags": ["helper"], "security": []}, "post": {"operationId": "helper_html-files_create", "summary": "Upload HTML File", "description": "Uploads an HTML file to Firebase for a specific session. The file must be provided as form-data with a key `html_file` and have a content type of 'text/html'. Additionally, the `session_id` must be included in the form-data to associate the file with a session.\n\n### Form Data\n- **html_file** *(file, required)*: The HTML file to be uploaded. Only files with content type 'text/html' are accepted.\n- **session_id** *(string, required)*: The session ID associated with the uploaded HTML file.\n\n### Response (HTTP 201)\nOn success, returns a JSON object containing:\n- **message** *(string)*: A confirmation message indicating that the file was uploaded successfully.\n- **token** *(string)*: An encrypted token representing the file and session information.\n\n### Error Handling\n\n- **400 Bad Request**: Returned if required fields are missing (e.g. no file or session ID provided), if the file type is not 'text/html', or if the admin UID is invalid.\n- **422 Unprocessable Entity**: Returned if the HTML file processing (e.g., encryption) fails.\n- **500 Internal Server Error**: Returned if an unexpected error occurs on the server.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "html_file", "in": "formData", "description": "The HTML file to upload. Must have the content type 'text/html'.", "required": true, "type": "file"}, {"name": "session_id", "in": "formData", "description": "The session ID to associate with the uploaded HTML file.", "required": true, "type": "string"}], "responses": {"201": {"description": "File uploaded successfully.", "schema": {"type": "object", "properties": {"message": {"description": "A confirmation message.", "type": "string"}, "token": {"description": "Encrypted token representing the file and session information.", "type": "string"}}}, "examples": {"application/json": {"message": "File uploaded successfully", "token": "gAAAAABhX9s8..."}}}, "400": {"description": "Bad Request - Returned if required fields are missing (e.g., no file provided, session ID missing), if the file type is invalid (only HTML files are allowed), or if the admin UID is invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message explaining the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "No file provided"}}}, "422": {"description": "Unprocessable Entity - Returned if the HTML file processing (e.g., encryption) fails.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the processing failure.", "type": "string"}}}, "examples": {"application/json": {"error": "Encryption failed"}}}, "500": {"description": "Internal Server Error - Returned if an unexpected error occurs on the server.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "consumes": ["multipart/form-data", "application/x-www-form-urlencoded"], "tags": ["helper"], "security": [{"Bearer": []}]}, "parameters": []}, "/ios/generate_summary": {"post": {"operationId": "ios_generate_summary_create", "description": "Generate a summary for a session for iOS user", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["rbalance", "contact_angle", "contact_time", "cadence", "power"], "type": "object", "properties": {"rbalance": {"required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"type": "number", "format": "float"}, "min": {"type": "number", "format": "float"}, "max": {"type": "number", "format": "float"}}}, "contact_angle": {"required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"type": "number", "format": "float"}, "min": {"type": "number", "format": "float"}, "max": {"type": "number", "format": "float"}}}, "contact_time": {"required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"type": "number", "format": "float"}, "min": {"type": "number", "format": "float"}, "max": {"type": "number", "format": "float"}}}, "cadence": {"required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"type": "number", "format": "float"}, "min": {"type": "number", "format": "float"}, "max": {"type": "number", "format": "float"}}}, "power": {"required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"type": "number", "format": "float"}, "min": {"type": "number", "format": "float"}, "max": {"type": "number", "format": "float"}}}}}}], "responses": {"200": {"description": "Summary for the session", "examples": {"application/json": {"summary": {"full_original": "Full original text", "en": "Summary text in English", "ru": "Summary text in Russian", "token_used": "Number of tokens used"}}}}, "400": {"description": "Error with data structure"}, "401": {"description": "Unauthorized"}, "403": {"description": "You must be an admin to access this data."}, "404": {"description": "Error generating summary"}}, "tags": ["ios"], "security": [{"Bearer": []}]}, "parameters": []}, "/ios/process_video_ios": {"post": {"operationId": "ios_process_video_ios_create", "description": "Start the video processing task for iOS", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["video_url", "ycom", "weight", "shoeSize", "leg_length"], "type": "object", "properties": {"video_url": {"description": "URL of the video to be processed", "type": "string"}, "session_name": {"description": "Name of the session", "type": "string"}, "incline_degree": {"description": "Incline degree of the treadmill", "type": "number"}, "ycom": {"description": "User parameter ycom", "type": "number"}, "weight": {"description": "User weight", "type": "number"}, "shoeSize": {"description": "User shoe size", "type": "number"}, "leg_length": {"description": "User leg length", "type": "number"}}}}], "responses": {"200": {"description": "Video processing started successfully", "examples": {"application/json": {"session_id": "1234567890abcdef", "title": "Session Name"}}}, "400": {"description": "Video URL is required"}, "401": {"description": "Unauthorized"}, "403": {"description": "You must be an admin to access this page."}, "404": {"description": "User parameters not found or maximum sessions reached"}}, "tags": ["ios"], "security": [{"Bearer": []}]}, "parameters": []}, "/jumping/management/sessions/": {"post": {"operationId": "jumping_management_sessions_create", "summary": "Create a New Video Processing Session (Admin on Behalf of Another User)", "description": "This endpoint allows an **admin** (or sub-admin) to upload a **video file** for processing and create a new \"session\" resource **on behalf of another user**. The server will return a `session_id` that can be used to poll or retrieve the session details/results.\n\n### Request Body (Multipart/Form-Data)\n\nYou must supply the following fields:\n\n- **user_id** *(string, required)*: The ID of the user on whose behalf this session is created.\n- **video** *(file, required)*: The raw video file to be processed.\n- **session_name** *(string, optional)*: A human-readable name/title for the session.\n### Response Structure\n\nOn success (HTTP 200), the response is a JSON object with:\n\n- **session_id** *(string)*: A unique identifier for the created session.\n- **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).\n\n### Workflow\n1. **POST** a multipart/form-data request containing the required fields `user_id` and `video`, plus any optional fields.\n2. Provide a valid Bearer token in the `Authorization` header.\n3. The caller must have admin privileges to successfully create a session for another user.\n4. If successful, the server responds with `session_id` and `title`.\n5. If an error occurs (e.g., missing fields, lack of permissions), a JSON object with an `error` key is returned.\n\n#### Example cURL:\n\n```bash\ncurl -X POST \\\n     -H 'Content-Type: multipart/form-data' \\\n     -H 'Authorization: Bearer <YOUR_ADMIN_TOKEN>' \\\n     -F 'user_id=someUserId123' \\\n     -F 'video=@/path/to/video.mp4' \\\n     -F 'session_name=Custom Session' \\\n     https://<backend-link>/jumping/management/sessions/\n```\n", "parameters": [{"name": "user_id", "in": "formData", "description": "**Required.** The ID of the user for whom this session is created (form field: text).", "required": true, "type": "string"}, {"name": "video", "in": "formData", "description": "**Required.** The raw video file to be processed (form field type: file).", "required": true, "type": "file"}, {"name": "session_name", "in": "formData", "description": "**Optional.** A descriptive name for the session (form field: text).", "required": false, "type": "string"}], "responses": {"200": {"description": "Video processing session created successfully (HTTP 200).", "schema": {"required": ["session_id", "title"], "type": "object", "properties": {"session_id": {"description": "The unique identifier for the created session.", "type": "string"}, "title": {"description": "The session title (defaults if not provided).", "type": "string"}}}, "examples": {"application/json": {"session_id": "abcd1234efgh5678", "title": "Custom Session"}}}, "400": {"description": "Bad Request - Possibly due to missing `user_id`, missing `video`, or invalid form data.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "user_id is required"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating a missing or invalid token.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have admin permission to create sessions for others.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - Indicates business logic issues or resource limitations (e.g., session limit).", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "User has reached the maximum number of sessions."}}}, "500": {"description": "Internal Server Error - Unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "consumes": ["multipart/form-data", "application/x-www-form-urlencoded"], "tags": ["jumping"], "security": [{"Bearer": []}]}, "parameters": []}, "/jumping/sessions/": {"post": {"operationId": "jumping_sessions_create", "summary": "Create a New Video Processing Session", "description": "This endpoint allows an authenticated (and authorized) user to upload a **video file** for processing and create a new \"session\" resource. The server will return a `session_id` that can be used to poll or retrieve the session details/results.\n\n### Request Body (Multipart/Form-Data)\n\nYou must supply the following fields:\n\n- **video** *(file, required)*: The raw video file to be processed. \n- **session_name** *(string, optional)*: A human-readable name/title for the session. \n### Response Structure\n\nOn success (HTTP 200), the response is a JSON object with:\n\n- **session_id** *(string)*: A unique identifier for the created session.\n- **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).\n\n### Workflow\n1. **POST** a multipart/form-data request containing the required `video` field and any optional fields.\n2. Provide a valid Bearer token in the `Authorization` header.\n3. If successful, the server responds with `session_id` and `title`.\n4. If an error occurs (e.g., missing video, lack of permissions), a JSON object with an `error` key is returned.\n\n#### Example cURL:\n\n```bash\ncurl -X POST \\\n     -H 'Content-Type: multipart/form-data' \\\n     -H 'Authorization: Bearer <YOUR_TOKEN>' \\\n     -F 'video=@/path/to/video.mp4' \\\n     -F 'session_name=Morning Run' \\\n     https://<backend-link>/jumping/sessions/\n```\n", "parameters": [{"name": "video", "in": "formData", "description": "**Required.** The raw video file to be processed (form field type: file).", "required": true, "type": "file"}, {"name": "session_name", "in": "formData", "description": "**Optional.** A descriptive name for the session (form field type: text).", "required": false, "type": "string"}], "responses": {"200": {"description": "Video processing session created successfully (HTTP 200).", "schema": {"required": ["session_id", "title"], "type": "object", "properties": {"session_id": {"description": "The unique identifier for the created session.", "type": "string"}, "title": {"description": "The session title (defaults if not provided).", "type": "string"}}}, "examples": {"application/json": {"session_id": "abcd1234efgh5678", "title": "My Morning Run"}}}, "400": {"description": "Bad Request - Possibly due to missing video file or invalid form data.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No video file was provided"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating a missing or invalid token.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have permission to create sessions (admin-only).", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - Indicates business logic issues or resource limitations (e.g., session limit).", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "User has reached the maximum number of sessions."}}}, "500": {"description": "Internal Server Error - Unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "consumes": ["multipart/form-data", "application/x-www-form-urlencoded"], "tags": ["jumping"], "security": [{"Bearer": []}]}, "parameters": []}, "/jumping/sessions/{session_id}/": {"get": {"operationId": "jumping_sessions_read", "summary": "Get Jumping Session Data", "description": "Retrieve detailed information about a specific processed jumping session using its unique `session_id`.\n\n**Usage Example:**\nSend a GET request with the `session_id` as a path parameter to obtain session details.\n\n**Parameters:**\n- `session_id` *(string, required)*: The unique identifier of the session whose data is being requested.\n\n**Response Data Type:**\n- **200 OK:** A JSON object with the following structure:\n  - `angles` *(object)*: Contains arrays of various angle measurements:\n    - `hip_intersection_angle` *(array of numbers)*: Array of hip intersection angles.\n    - `ank_angle` *(array of numbers)*: Array of ankle angles.\n    - `rkne_angle` *(array of numbers)*: Array of right knee angles.\n    - `lkne_angle` *(array of numbers)*: Array of left knee angles.\n    - `kne_angle` *(array of numbers)*: Array of knee angles.\n    - `rank_angle` *(array of numbers)*: Array of right ankle angles.\n    - `lank_angle` *(array of numbers)*: Array of left ankle angles.\n  - `whole_report_metrics` *(object)*: Contains arrays of various metrics:\n    - `hipy` *(array of numbers)*: Array of hip height values.\n    - `grf` *(array of numbers)*: Array of ground reaction forces.\n    - `vhipy` *(array of numbers)*: Array of hip speed values.\n    - `toey` *(array of numbers)*: Array of toe Y-axis positions.\n    - `ahipy` *(array of numbers)*: Array of average hip Y-axis positions.\n    - `vtoey` *(array of numbers)*: Array of vertical toe velocities.\n  - `all_timestamps` *(array of numbers)*: Array of timestamps for each frame.\n  - `analyzed_video_url` *(string, URI)*: URL of the analyzed video.\n  - `video_url` *(string, URI)*: URL of the original video.\n  - `created_at` *(object)*: Contains the date and time of session creation:\n    - `date` *(string, format: YYYY-MM-DD)*: Creation date.\n    - `time` *(string, format: HH:MM AM/PM)*: Creation time.\n  - `user_name` *(string)*: Name of the user associated with the session.\n  - `activity` *(string)*: Type of activity being analyzed in the session.\n  - `title` *(string)*: Title of the session.\n  - `end_frames` *(array of integers)*: Array of frame numbers where each segment ends.\n  - `metrics` *(object)*: Contains various performance metrics as arrays of numbers.", "parameters": [{"name": "session_id", "in": "path", "description": "Unique identifier of the session.", "required": true, "type": "string"}], "responses": {"200": {"description": "Successfully retrieved session data.", "schema": {"required": ["angles", "whole_report_metrics", "all_timestamps", "analyzed_video_url", "video_url", "created_at", "user_name", "activity", "title", "end_frames", "metrics"], "type": "object", "properties": {"angles": {"required": ["hip_intersection_angle", "ank_angle", "rkne_angle", "lkne_angle", "kne_angle", "rank_angle", "lank_angle"], "type": "object", "properties": {"hip_intersection_angle": {"description": "Array of hip intersection angles.", "type": "array", "items": {"type": "number"}}, "ank_angle": {"description": "Array of ankle angles.", "type": "array", "items": {"type": "number"}}, "rkne_angle": {"description": "Array of right knee angles.", "type": "array", "items": {"type": "number"}}, "lkne_angle": {"description": "Array of left knee angles.", "type": "array", "items": {"type": "number"}}, "kne_angle": {"description": "Array of knee angles.", "type": "array", "items": {"type": "number"}}, "rank_angle": {"description": "Array of right ankle angles.", "type": "array", "items": {"type": "number"}}, "lank_angle": {"description": "Array of left ankle angles.", "type": "array", "items": {"type": "number"}}}}, "whole_report_metrics": {"required": ["hipy", "grf", "vhipy", "toey", "ahipy", "vtoey"], "type": "object", "properties": {"hipy": {"description": "Array of hip height values.", "type": "array", "items": {"type": "number"}}, "grf": {"description": "Array of ground reaction forces.", "type": "array", "items": {"type": "number"}}, "vhipy": {"description": "Array of hip speed values.", "type": "array", "items": {"type": "number"}}, "toey": {"description": "Array of toe Y-axis positions.", "type": "array", "items": {"type": "number"}}, "ahipy": {"description": "Array of average hip Y-axis positions.", "type": "array", "items": {"type": "number"}}, "vtoey": {"description": "Array of vertical toe velocities.", "type": "array", "items": {"type": "number"}}}}, "all_timestamps": {"description": "Array of timestamps for each frame.", "type": "array", "items": {"type": "number"}}, "analyzed_video_url": {"description": "URL of the analyzed video.", "type": "string", "format": "uri"}, "video_url": {"description": "URL of the original video.", "type": "string", "format": "uri"}, "created_at": {"description": "Object containing the date and time of session creation.", "required": ["date", "time"], "type": "object", "properties": {"date": {"description": "Date when the session was created, in 'YYYY-MM-DD' format.", "type": "string", "format": "date"}, "time": {"description": "Time when the session was created, in 'HH:MM AM/PM' format.", "type": "string", "format": "time"}}}, "user_name": {"description": "Name of the user associated with the session.", "type": "string"}, "activity": {"description": "Type of activity being analyzed in the session.", "type": "string"}, "title": {"description": "Title of the session.", "type": "string"}, "end_frames": {"description": "Array of frame numbers where each segment ends.", "type": "array", "items": {"type": "integer"}}, "metrics": {"description": "Object containing various performance metrics.", "type": "object", "additionalProperties": {"description": "Array of numeric values for each metric.", "type": "array", "items": {"type": "number"}}}}}}, "400": {"description": "Bad Request - Invalid `session_id` provided.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid session ID"}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Unauthorized access"}}}, "403": {"description": "Forbidden - User lacks necessary permissions.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this page."}}}, "404": {"description": "Not Found - No session data found for the provided `session_id`.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred"}}}}, "tags": ["jumping"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/jumping/sessions/{session_id}/export/": {"get": {"operationId": "jumping_sessions_export_list", "summary": "Export Jumping Session Data", "description": "Retrieve detailed information about a specific jumping session using its unique `session_id`.\n\n**Usage Example:**\nSend a GET request with the `session_id` as a path parameter to obtain session details.\n\n**Parameters:**\n- `session_id` *(string, required)*: The unique identifier of the session whose data is being requested.\n\n**Note:** This endpoint includes landmark points in the response.\n\n**Response Data Type:**\n- **200 OK:** A JSON object with the following structure:\n  - `keypoints` *(object)*: Contains arrays of landmark points.\n    - `lknev` *(array of numbers)*: Array of left knee landmark points.\n    - `ltoev` *(array of numbers)*: Array of left toe landmark points.\n    - `relbv` *(array of numbers)*: Array of right elbow landmark points.\n    - `rtoey` *(array of numbers)*: Array of right toe landmark points.\n    - `headv` *(array of numbers)*: Array of head landmark points.\n    - `rearv` *(array of numbers)*: Array of right ear landmark points.\n    - `rshox` *(array of numbers)*: Array of right shoulder landmark points.\n    - `etc` *(array of numbers)*: Array of all other landmark points.\n  - `angles` *(object)*: Contains arrays of various angle measurements.\n    - `hip_intersection_angle` *(array of numbers)*: Hip intersection angles.\n    - `ank_angle` *(array of numbers)*: Ankle angles.\n    - `rkne_angle` *(array of numbers)*: Right knee angles.\n    - `lkne_angle` *(array of numbers)*: Left knee angles.\n    - `kne_angle` *(array of numbers)*: Knee angles.\n    - `rank_angle` *(array of numbers)*: Right ankle angles.\n    - `lank_angle` *(array of numbers)*: Left ankle angles.\n  - `all_timestamps` *(array of numbers)*: Timestamps for each frame.\n  - `analyzed_video_url` *(string, URI)*: URL of the analyzed video.\n  - `video_url` *(string, URI)*: URL of the original video.\n  - `created_at` *(object)*: Contains the date and time of session creation.\n    - `date` *(string, format: YYYY-MM-DD)*: Creation date.\n    - `time` *(string, format: HH:MM AM/PM)*: Creation time.\n  - `user_name` *(string)*: Name of the user associated with the session.\n  - `activity` *(string)*: Type of activity being analyzed.\n  - `title` *(string)*: Title of the session.\n  - `end_frames` *(array of integers)*: Frame numbers where each segment ends.\n  - `metrics` *(object)*: Contains various performance metrics as arrays of numbers.", "parameters": [{"name": "session_id", "in": "path", "description": "Unique identifier of the session.", "required": true, "type": "string"}], "responses": {"200": {"description": "Successfully retrieved session data.", "schema": {"required": ["keypoints", "angles", "all_timestamps", "analyzed_video_url", "video_url", "created_at", "user_name", "activity", "title", "end_frames", "metrics"], "type": "object", "properties": {"keypoints": {"required": ["lknev", "ltoev", "relbv", "rtoey", "headv", "rearv", "rshox", "etc"], "type": "object", "properties": {"lknev": {"description": "Array of left knee landmark points.", "type": "array", "items": {"type": "number"}}, "ltoev": {"description": "Array of left toe landmark points.", "type": "array", "items": {"type": "number"}}, "relbv": {"description": "Array of right elbow landmark points.", "type": "array", "items": {"type": "number"}}, "rtoey": {"description": "Array of right toe landmark points.", "type": "array", "items": {"type": "number"}}, "headv": {"description": "Array of head landmark points.", "type": "array", "items": {"type": "number"}}, "rearv": {"description": "Array of right ear landmark points.", "type": "array", "items": {"type": "number"}}, "rshox": {"description": "Array of right shoulder landmark points.", "type": "array", "items": {"type": "number"}}, "etc": {"description": "All other landmark points.", "type": "array", "items": {"type": "number"}}}}, "angles": {"required": ["hip_intersection_angle", "ank_angle", "rkne_angle", "lkne_angle", "kne_angle", "rank_angle", "lank_angle"], "type": "object", "properties": {"hip_intersection_angle": {"description": "Array of hip intersection angles.", "type": "array", "items": {"type": "number"}}, "ank_angle": {"description": "Array of ankle angles.", "type": "array", "items": {"type": "number"}}, "rkne_angle": {"description": "Array of right knee angles.", "type": "array", "items": {"type": "number"}}, "lkne_angle": {"description": "Array of left knee angles.", "type": "array", "items": {"type": "number"}}, "kne_angle": {"description": "Array of knee angles.", "type": "array", "items": {"type": "number"}}, "rank_angle": {"description": "Array of right ankle angles.", "type": "array", "items": {"type": "number"}}, "lank_angle": {"description": "Array of left ankle angles.", "type": "array", "items": {"type": "number"}}}}, "all_timestamps": {"description": "Array of timestamps for each frame.", "type": "array", "items": {"type": "number"}}, "analyzed_video_url": {"description": "URL of the analyzed video.", "type": "string", "format": "uri"}, "video_url": {"description": "URL of the original video.", "type": "string", "format": "uri"}, "created_at": {"description": "Object containing the date and time of session creation.", "required": ["date", "time"], "type": "object", "properties": {"date": {"description": "Date when the session was created, in 'YYYY-MM-DD' format.", "type": "string", "format": "date"}, "time": {"description": "Time when the session was created, in 'HH:MM AM/PM' format.", "type": "string", "format": "time"}}}, "user_name": {"description": "Name of the user associated with the session.", "type": "string"}, "activity": {"description": "Type of activity being analyzed in the session.", "type": "string"}, "title": {"description": "Title of the session.", "type": "string"}, "end_frames": {"description": "Array of frame numbers where each segment ends.", "type": "array", "items": {"type": "integer"}}, "metrics": {"description": "Object containing various performance metrics.", "type": "object", "additionalProperties": {"description": "Array of numeric values for each metric.", "type": "array", "items": {"type": "number"}}}}}}, "400": {"description": "Bad Request - Invalid `session_id` provided.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid session ID"}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Unauthorized access"}}}, "403": {"description": "Forbidden - User lacks necessary permissions.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this page."}}}, "404": {"description": "Not Found - No session data found for the provided `session_id`.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred"}}}}, "tags": ["jumping"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/jumping/sessions/{session_id}/jump-analysis/": {"post": {"operationId": "jumping_sessions_jump-analysis_create", "summary": "Get Vertical Jump Analysis Report", "description": "### Retrieve Vertical Jump Analysis Report\n\nThis endpoint allows users to retrieve a comprehensive analysis report for a specific vertical jump session. The report includes graphical data, phase details, user information, and additional comments to provide an in-depth understanding of the user's performance during the session.\n\n**Usage Example:**\nSend a `POST` request to `/jumping/{session_id}/jump-analysis/` where `{session_id}` is the unique identifier of the session.\n\n**Parameters:**\n\n- `session_id` *(string, required)*: The unique identifier of the session for which the report is being requested.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a JSON object containing the following sections:\n\n1. **Graph Data**: Visual representations of various metrics collected during the session.\n2. **Frame Information**: Details about the video frames involved in the session.\n3. **Phase Data**: Information about different phases of the vertical jump activity.\n4. **User Information**: Personal details of the user.\n5. **Session Date**: The date when the session took place.\n6. **Comments**: Feedback and comments based on the session performance.\n\n**Detailed Description of Response Fields:**\n- **graph_data**: Contains nested objects for each metric (e.g., hip_height, hip_speed) with data points over time.\n- **min_frame** & **max_frame**: Indicate the range of frames analyzed in the session video.\n- **phase_data**: Provides detailed information about each phase of the jump, including video frames, graph phases, and associated images.\n- **user_information**: Includes the user's name, age, weight, height, and gender.\n- **session_date**: The date of the session in `DD/MM/YYYY` format.\n- **comments**: Contains feedback related to specific metrics like power and ground reaction force (grf).\n\n**Note:** Ensure that the `session_id` provided is valid and corresponds to an existing session in the system.", "parameters": [{"name": "session_id", "in": "path", "description": "Unique identifier of the session.", "required": true, "type": "string"}], "responses": {"200": {"description": "Successfully retrieved user report data.", "schema": {"required": ["graph_data", "min_frame", "max_frame", "phase_data", "user_information", "session_date", "comments"], "type": "object", "properties": {"graph_data": {"description": "Graphical data representing various metrics from the session.", "type": "object", "additionalProperties": {"required": ["jump_1"], "type": "object", "properties": {"jump_1": {"required": ["times", "data"], "type": "object", "properties": {"times": {"description": "Timestamps corresponding to the data points.", "type": "array", "items": {"type": "number"}}, "data": {"description": "Metric values at the corresponding times.", "type": "array", "items": {"type": "number"}}}}}}}, "min_frame": {"description": "The minimum frame number in the session video.", "type": "integer"}, "max_frame": {"description": "The maximum frame number in the session video.", "type": "integer"}, "phase_data": {"description": "Detailed information about different phases of the activity.", "required": ["start_of_preparation", "braking", "zero_velocity", "takeoff", "peak", "landing", "damping", "recuperation"], "type": "object", "properties": {"start_of_preparation": {"required": ["video_frame", "graph_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "Frame number where preparation starts.", "type": "integer"}, "graph_phase": {"description": "Graphical representation value for the preparation phase.", "type": "integer"}, "image_url": {"description": "URL of the image representing the start of preparation phase.", "type": "string", "format": "uri"}}}, "braking": {"required": ["video_frame", "graph_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "Frame number where braking occurs.", "type": "integer"}, "graph_phase": {"description": "Graphical representation value for the braking phase.", "type": "integer"}, "image_url": {"description": "URL of the image representing the braking phase.", "type": "string", "format": "uri"}}}, "zero_velocity": {"required": ["video_frame", "graph_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "Frame number where velocity drops to zero.", "type": "integer"}, "graph_phase": {"description": "Graphical representation value for the zero velocity phase.", "type": "integer"}, "image_url": {"description": "URL of the image representing the zero velocity phase.", "type": "string", "format": "uri"}}}, "takeoff": {"required": ["video_frame", "graph_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "Frame number where takeoff occurs.", "type": "integer"}, "graph_phase": {"description": "Graphical representation value for the takeoff phase.", "type": "integer"}, "image_url": {"description": "URL of the image representing the takeoff phase.", "type": "string", "format": "uri"}}}, "peak": {"required": ["video_frame", "graph_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "Frame number where peak occurs.", "type": "integer"}, "graph_phase": {"description": "Graphical representation value for the peak phase.", "type": "integer"}, "image_url": {"description": "URL of the image representing the peak phase.", "type": "string", "format": "uri"}}}, "landing": {"required": ["video_frame", "graph_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "Frame number where landing occurs.", "type": "integer"}, "graph_phase": {"description": "Graphical representation value for the landing phase.", "type": "integer"}, "image_url": {"description": "URL of the image representing the landing phase.", "type": "string", "format": "uri"}}}, "damping": {"required": ["video_frame", "graph_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "Frame number where damping occurs.", "type": "integer"}, "graph_phase": {"description": "Graphical representation value for the damping phase.", "type": "integer"}, "image_url": {"description": "URL of the image representing the damping phase.", "type": "string", "format": "uri"}}}, "recuperation": {"required": ["video_frame", "graph_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "Frame number where recuperation occurs.", "type": "integer"}, "graph_phase": {"description": "Graphical representation value for the recuperation phase.", "type": "integer"}, "image_url": {"description": "URL of the image representing the recuperation phase.", "type": "string", "format": "uri"}}}}}, "user_information": {"description": "Personal information of the user.", "required": ["name", "age", "weight", "height", "gender"], "type": "object", "properties": {"name": {"description": "Full name of the user.", "type": "string"}, "age": {"description": "Age of the user.", "type": "integer"}, "weight": {"description": "Weight of the user in kilograms.", "type": "number"}, "height": {"description": "Height of the user in centimeters.", "type": "number"}, "gender": {"description": "Gender of the user.", "type": "string"}}}, "session_date": {"description": "Date when the session took place (DD/MM/YYYY).", "type": "string", "format": "date"}, "comments": {"description": "Feedback comments based on the session performance.", "required": ["power", "grf"], "type": "object", "properties": {"power": {"description": "Feedback comment on power performance.", "type": "string"}, "grf": {"description": "Feedback comment on ground reaction force.", "type": "string"}}}}}}, "400": {"description": "Bad Request - Invalid `session_id` provided.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid session ID"}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Unauthorized access"}}}, "403": {"description": "Forbidden - User lacks necessary permissions.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this page."}}}, "404": {"description": "Not Found - No session data found for the provided `session_id`.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred"}}}}, "tags": ["jumping"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/jumping/sessions/{session_id}/recommendation/": {"post": {"operationId": "jumping_sessions_recommendation_create", "summary": "Create Recommendations Threads", "description": "### Create Recommendations Threads\n\nThis endpoint generates personalized recommendation threads based on the user's vertical jump analysis report for a specific session. These threads can be used to provide tailored advice, training suggestions, or performance insights to the user.\n\n**Usage Example:**\nSend a `POST` request to `/jumping/sessions/{session_id}/recommendation/` where `{session_id}` is the unique identifier of the session.\n\n**Parameters:**\n\n- `session_id` *(string, required)*: The unique identifier of the session for which recommendation threads are to be created.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a JSON object containing thread IDs mapped to their respective metrics.\n\n**Example Response:**\n```json\n{\n    \"hip_height\": \"thread_ybIdbAtHLSnHM4BnH551X4fT\",\n    \"hip_speed\": \"thread_MLGE8nAmLYyW3adwIViKiVpL\",\n    \"grf\": \"thread_rBIUL25oD3VLtBaPRDLunFsu\",\n    \"power\": \"thread_UGCg6dZzsRI1YCpSgCf0dgT4\",\n    \"kne_angle\": \"thread_rEiSblZuq3bzPHRBNXd2etJ6\",\n    \"ank_angle\": \"thread_QLrCfbBuBBKpmPFFnBkJfcln\",\n    \"hip_angle\": \"thread_CMWV9HCt85XlpVSORSk4MmCG\"\n}\n```\n\n**Note:**\n- Ensure that the `session_id` provided is valid and corresponds to an existing session in the system.\n- The user must have an active payment plan to access this feature.", "parameters": [{"name": "session_id", "in": "path", "description": "Unique identifier of the session.", "required": true, "type": "string"}], "responses": {"200": {"description": "Threads created successfully.", "schema": {"description": "A dictionary mapping each metric to its corresponding thread ID.", "required": ["hip_height", "hip_speed", "grf", "power", "kne_angle", "ank_angle", "hip_angle"], "type": "object", "properties": {"hip_height": {"description": "Unique identifier for the hip height recommendation thread.", "type": "string"}, "hip_speed": {"description": "Unique identifier for the hip speed recommendation thread.", "type": "string"}, "grf": {"description": "Unique identifier for the ground reaction force (GRF) recommendation thread.", "type": "string"}, "power": {"description": "Unique identifier for the power recommendation thread.", "type": "string"}, "kne_angle": {"description": "Unique identifier for the knee angle recommendation thread.", "type": "string"}, "ank_angle": {"description": "Unique identifier for the ankle angle recommendation thread.", "type": "string"}, "hip_angle": {"description": "Unique identifier for the hip angle recommendation thread.", "type": "string"}}}, "examples": {"application/json": {"hip_height": "thread_ybIdbAtHLSnHM4BnH551X4fT", "hip_speed": "thread_MLGE8nAmLYyW3adwIViKiVpL", "grf": "thread_rBIUL25oD3VLtBaPRDLunFsu", "power": "thread_UGCg6dZzsRI1YCpSgCf0dgT4", "kne_angle": "thread_rEiSblZuq3bzPHRBNXd2etJ6", "ank_angle": "thread_QLrCfbBuBBKpmPFFnBkJfcln", "hip_angle": "thread_CMWV9HCt85XlpVSORSk4MmCG"}}}, "400": {"description": "Bad Request - Invalid `session_id` provided.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid session ID"}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Unauthorized access"}}}, "403": {"description": "Forbidden - User lacks necessary permissions.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this page."}}}, "404": {"description": "Not Found - No session data found for the provided `session_id`.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred"}}}}, "tags": ["jumping"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/jumping/sessions/{session_id}/summary/": {"get": {"operationId": "jumping_sessions_summary_list", "summary": "Get Summary of a Session", "description": "Retrieve a summary of a specific session using its unique `session_id`.\n\n**Usage Example:**\nSend a GET request with the `session_id` as a path parameter to obtain the session summary.\n\n**Parameters:**\n- `session_id` *(string, required)*: The unique identifier of the session whose summary is being requested.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a JSON object containing the following details:\n\n1. **Metrics**: Object containing various performance metrics.\n2. **Summary**: Object containing summary details of the session.\n3. **User Info**: Object containing user information.\n4. **Created At**: Object containing the date and time of session creation.\n\n**Note:** Ensure that the `session_id` provided is valid and corresponds to an existing session in the system.", "parameters": [{"name": "session_id", "in": "path", "description": "Unique identifier of the session.", "required": true, "type": "string"}], "responses": {"200": {"description": "Successfully retrieved session summary.", "schema": {"description": "Object containing session summary details.", "required": ["metrics", "summary", "user_info", "created_at"], "type": "object", "properties": {"metrics": {"description": "Object containing various performance metrics.", "type": "object", "additionalProperties": {"description": "Array of numeric values for each metric.", "type": "array", "items": {"type": "number"}}}, "summary": {"description": "Object containing summary details of the session.", "type": "object", "additionalProperties": {"description": "Summary information for each key.", "type": "string"}}, "user_info": {"description": "Object containing user information.", "required": ["name", "age", "weight", "height", "gender"], "type": "object", "properties": {"name": {"description": "Full name of the user.", "type": "string"}, "age": {"description": "Age of the user.", "type": "integer"}, "weight": {"description": "Weight of the user in kilograms.", "type": "number"}, "height": {"description": "Height of the user in centimeters.", "type": "number"}, "gender": {"description": "Gender of the user.", "type": "string"}}}, "created_at": {"description": "Object containing the date and time of session creation.", "required": ["date", "time"], "type": "object", "properties": {"date": {"description": "Date when the session was created, in 'YYYY-MM-DD' format.", "type": "string", "format": "date"}, "time": {"description": "Time when the session was created, in 'HH:MM AM/PM' format.", "type": "string", "format": "time"}}}}}, "examples": {"application/json": {"metrics": {"hip_height": [0.5, 0.6, 0.7], "hip_speed": [0.2, 0.3, 0.4], "grf": [100, 150, 200]}, "summary": {"jump_height": "High", "power": "Average", "balance": "Good"}, "user_info": {"name": "John Doe", "age": 25, "weight": 70.5, "height": 175}, "created_at": {"date": "2022-01-01", "time": "10:30 AM"}}}}, "400": {"description": "Bad Request - Invalid `session_id` provided.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid session ID"}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Unauthorized access"}}}, "403": {"description": "Forbidden - User lacks necessary permissions.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this page."}}}, "404": {"description": "Not Found - No session data found for the provided `session_id`.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred"}}}}, "tags": ["jumping"], "security": [{"Bearer": []}]}, "post": {"operationId": "jumping_sessions_summary_create", "summary": "Generate Summary Threads for a Session", "description": "### Generate Summary Threads\n\nThis endpoint generates summary threads for a given session based on predefined summary blocks and metrics.\n\n**Usage Example:**\nSend a `POST` request to `/jumping/sessions/{session_id}/summary/` where `{session_id}` is the unique identifier of the session.\n\n**Parameters:**\n- `session_id` *(string, required)*: The unique identifier of the session for which summary threads are to be generated.\n\n**Response Structure:**\nUpon a successful request, the endpoint returns a JSON object mapping each block name to its corresponding thread ID.\n\n**Example Response:**\n```json\n{\n    \"jump_flight\": \"thread_thread_id\",\n    \"jump_forces\": \"thread_thread_id\",\n    \"control_and_stability\": \"thread_thread_id\",\n    \"efficiency\": \"thread_thread_id\",\n    \"final_summary\": \"thread_thread_id\",\n}\n```\n\n**Notes:**\n- Ensure that the `session_id` provided is valid and corresponds to an existing session in the system.\n- The user must have the necessary permissions to generate summary threads.", "parameters": [{"name": "session_id", "in": "path", "description": "Unique identifier of the session.", "required": true, "type": "string"}], "responses": {"201": {"description": "Successfully generated summary threads.", "schema": {"description": "Dictionary mapping block names to their corresponding thread IDs, including a final summary thread.", "type": "object", "additionalProperties": {"description": "Thread ID corresponding to the block name.", "type": "string"}}, "examples": {"application/json": {"jump_flight": "thread_thread_id", "jump_forces": "thread_thread_id", "control_and_stability": "thread_thread_id", "efficiency": "thread_thread_id", "final_summary": "thread_thread_id"}}}, "400": {"description": "Bad Request - Invalid `session_id` provided.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid session ID"}}}, "401": {"description": "Unauthorized - Access token is missing or invalid.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Unauthorized access"}}}, "403": {"description": "Forbidden - User lacks necessary permissions.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this page."}}}, "404": {"description": "Not Found - No session data found for the provided `session_id`.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"required": ["error"], "type": "object", "properties": {"error": {"description": "Error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred"}}}}, "tags": ["jumping"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/payment/checkout-sessions/": {"post": {"operationId": "payment_checkout-sessions_create", "summary": "Create Checkout Session", "description": "### Create Checkout Session\n\nThis endpoint creates a Stripe checkout session for a subscription plan. It requires the subscription plan, billing interval, a list of selected activities, and the URLs to redirect the user on success or cancellation. A valid Bearer token must be included in the Authorization header.\n\n**Request Body:**\n- **plan** *(string, required)*: The subscription plan. Allowed values: 'Basic', 'Standard', 'Pro', 'Enterprise'.\n- **interval** *(string, required)*: The billing interval. Allowed values: 'month', 'year'.\n- **activity** *(array of strings, required)*: A list of selected activities (e.g., 'Running', 'VerticalJump', 'Weightlifting').\n- **successUrl** *(string, required)*: The URL to redirect the user after a successful checkout (must be a valid URI).\n- **cancelUrl** *(string, required)*: The URL to redirect the user after a cancelled checkout (must be a valid URI).\n\n**Response Structure (HTTP 201):**\n- **url** *(string)*: The URL of the created Stripe checkout session.\n\n**Error Responses:**\n- **400 Bad Request**: Returned when required fields are missing or input data is invalid. The response contains an `error` field (string).\n- **401 Unauthorized**: Returned when a valid Bearer token is not provided. The response contains an `error` field (string).\n- **500 Internal Server Error**: Returned if checkout session creation fails. The response contains an `error` field (string).\n- **404 Not Found**: Returned if the checkout session could not be created (as indicated by your updated view).", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["plan", "interval", "activity", "successUrl", "cancelUrl"], "type": "object", "properties": {"plan": {"description": "The subscription plan. Allowed values: 'Basic', 'Standard', 'Pro', 'Enterprise'.", "type": "string", "enum": ["Basic", "Standard", "Pro", "Enterprise"]}, "interval": {"description": "The billing interval. Allowed values: 'month', 'year'.", "type": "string", "enum": ["month", "year"]}, "activity": {"description": "A list of selected activities for the plan.", "type": "array", "items": {"description": "A selected activity (e.g., 'Running', 'VerticalJump', 'Weightlifting').", "type": "string"}}, "successUrl": {"description": "URL to redirect the user after a successful checkout.", "type": "string", "format": "uri"}, "cancelUrl": {"description": "URL to redirect the user after a cancelled checkout.", "type": "string", "format": "uri"}}, "example": {"plan": "Pro", "interval": "month", "activity": ["Running", "Weightlifting"], "successUrl": "https://example.com/success", "cancelUrl": "https://example.com/cancel"}}}], "responses": {"201": {"description": "Checkout session created successfully. Returns a JSON object with the checkout session URL.", "schema": {"required": ["url"], "type": "object", "properties": {"url": {"description": "The URL of the created Stripe checkout session.", "type": "string", "format": "uri"}}}, "examples": {"application/json": {"url": "https://checkout.stripe.com/cs_test_..."}}}, "400": {"description": "Invalid input data. Returns an object with an error message (string).", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the invalid input.", "type": "string"}}}, "examples": {"application/json": {"error": "Missing required fields: plan, interval"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "404": {"description": "Checkout session not created. Returns an object with an error message (string).", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating failure to create checkout session.", "type": "string"}}}, "examples": {"application/json": {"error": "Failed to create checkout session"}}}, "500": {"description": "Server error. Returns an object with an error message (string).", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the failure.", "type": "string"}}}, "examples": {"application/json": {"error": "Failed to create checkout session"}}}}, "tags": ["payment"], "security": [{"Bearer": []}]}, "parameters": []}, "/payment/checkout-sessions/pro/": {"post": {"operationId": "payment_checkout-sessions_pro_create", "summary": "Create Pro Checkout Session with Free Trial", "description": "### Create Pro Checkout Session with Free Trial\n\nThis endpoint creates a Stripe checkout session specifically for the Pro subscription plan with a 2-week free trial period. A valid Bearer token must be included in the Authorization header. The request body must contain the following parameters:\n\n- **plan** *(string, required)*: The subscription plan. For this endpoint, the only allowed value is 'Pro'.\n- **interval** *(string, required)*: The billing interval for the plan. Allowed values: 'month', 'year'.\n- **activity** *(array of strings, required)*: An array of selected activities (e.g., 'Running', 'VerticalJump', 'Weightlifting').\n- **successUrl** *(string, required)*: A valid URI to redirect the user after a successful checkout.\n- **cancelUrl** *(string, required)*: A valid URI to redirect the user if the checkout is cancelled.\n\n**Response Structure (HTTP 201):**\n- **url** *(string)*: The URL of the created Stripe checkout session.\n\n**Error Responses:**\n- **400 Bad Request**: Returned when required fields are missing or input data is invalid. The response contains an `error` field (string).\n- **401 Unauthorized**: Returned when a valid Bearer token is not provided. The response contains an `error` field (string).\n- **404 Not Found**: Returned if the checkout session could not be created (e.g., active price not found or trial already used). The response contains an `error` field (string).\n- **500 Internal Server Error**: Returned if checkout session creation fails. The response contains an `error` field (string).", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["plan", "interval", "activity", "successUrl", "cancelUrl"], "type": "object", "properties": {"plan": {"description": "The subscription plan. For this endpoint, the only allowed value is 'Pro'.", "type": "string", "enum": ["Pro"]}, "interval": {"description": "The billing interval for the plan. Allowed values: 'month', 'year'.", "type": "string", "enum": ["month", "year"]}, "activity": {"description": "The activities selected for the plan.", "type": "array", "items": {"description": "A selected activity (e.g., 'Running', 'VerticalJump', 'Weightlifting').", "type": "string"}}, "successUrl": {"description": "URL to redirect the user after a successful checkout.", "type": "string", "format": "uri"}, "cancelUrl": {"description": "URL to redirect the user after a cancelled checkout.", "type": "string", "format": "uri"}}, "example": {"plan": "Pro", "interval": "month", "activity": ["Running", "VerticalJump"], "successUrl": "https://example.com/success", "cancelUrl": "https://example.com/cancel"}}}], "responses": {"201": {"description": "Pro checkout session created successfully. Returns a JSON object containing the checkout session URL.", "schema": {"required": ["url"], "type": "object", "properties": {"url": {"description": "The URL of the created Stripe checkout session.", "type": "string", "format": "uri"}}}, "examples": {"application/json": {"url": "https://checkout.stripe.com/cs_test_..."}}}, "400": {"description": "Invalid input data or plan. Returns an object with an error message (string).", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the invalid input.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid plan selected for this endpoint"}}}, "401": {"description": "Unauthorized - Missing or invalid access token. Returns an object with an error message.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "404": {"description": "Checkout session not created. Returns an object with an error message indicating the failure (e.g., active price not found or trial already used).", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Failed to create checkout session"}}}, "500": {"description": "Server error. Returns an object with an error message describing the failure.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the server error.", "type": "string"}}}, "examples": {"application/json": {"error": "Failed to create checkout session"}}}}, "tags": ["payment"], "security": [{"Bearer": []}]}, "parameters": []}, "/payment/invoices/upcoming/": {"get": {"operationId": "payment_invoices_upcoming_list", "summary": "Retrieve Upcoming Invoice Amount (for renewal)", "description": "### Retrieve Upcoming Invoice Amount\n\nThis endpoint retrieves the total amount due for the user's upcoming invoice, including any proration or discounts, based on their active subscription. The amount is converted into a major currency unit (e.g., dollars) and returned along with the currency code.\n\n**Response Structure (HTTP 200):**\n- **total_amount_due** *(number)*: The total amount due for the upcoming invoice in major currency units.\n- **currency** *(string)*: The currency code in uppercase (e.g., 'USD').\n\n**Error Responses:**\n- **401 Unauthorized**: Returned if authentication credentials are missing or invalid.\n- **403 Forbidden**: Returned if the user does not have permission to perform this action.\n- **404 Bad Request**: Returned if there is an error retrieving the upcoming invoice amount. The response includes an `error` field (string).\n- **500 Internal Server Error**: Returned if an unexpected error occurs during processing.", "parameters": [], "responses": {"200": {"description": "Upcoming invoice amount retrieved successfully.", "schema": {"required": ["total_amount_due", "currency"], "type": "object", "properties": {"total_amount_due": {"description": "The total amount due for the upcoming invoice in major currency units.", "type": "number"}, "currency": {"description": "The currency code (e.g., 'USD').", "type": "string"}}}, "examples": {"application/json": {"total_amount_due": 100.0, "currency": "USD"}}}, "404": {"description": "Error retrieving upcoming invoice amount.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "Failed to retrieve upcoming invoice amount"}}}, "401": {"description": "Unauthorized - Authentication credentials were not provided or are invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that authentication failed.", "type": "string"}}}, "examples": {"application/json": {"error": "Authentication credentials were not provided."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the server error.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["payment"], "security": [{"Bearer": []}]}, "parameters": []}, "/payment/portal-sessions/": {"get": {"operationId": "payment_portal-sessions_list", "summary": "Create Billing Portal Link", "description": "### Create Billing Portal Link\n\nThis endpoint creates a Stripe Billing Portal link that allows a user to manage their subscription. A valid Bearer token must be included in the Authorization header. The request requires a query parameter `returnUrl`, which specifies the URL to which the user will be redirected after they exit the billing portal.\n\n**Request Parameters:**\n- **returnUrl** *(string, required)*: A valid URI to redirect the user after they exit the billing portal.\n\n**Response Structure (HTTP 200):**\n- **url** *(string)*: The URL for the Stripe Billing Portal session.\n\n**Error Responses:**\n- **400 Bad Request**: Returned if the `returnUrl` parameter is missing or invalid. The response contains an `error` field (string).\n- **401 Unauthorized**: Returned if a valid Bearer token is not provided. The response contains an `error` field (string).\n- **404 Not Found**: Returned if the Stripe customer ID is not found. The response contains an `error` field (string).\n- **500 Internal Server Error**: Returned if an error occurs while creating the billing portal link. The response contains an `error` field (string).", "parameters": [{"name": "returnUrl", "in": "query", "description": "URL to redirect the user after they exit the billing portal. Must be a valid URI.", "required": true, "type": "string", "format": "uri"}], "responses": {"200": {"description": "Billing portal link created successfully. Returns a JSON object containing the billing portal URL.", "schema": {"required": ["url"], "type": "object", "properties": {"url": {"description": "The URL for the Stripe Billing Portal session.", "type": "string", "format": "uri"}}}, "examples": {"application/json": {"url": "https://billing.stripe.com/session_abc123"}}}, "400": {"description": "Invalid input data. Returns a JSON object with an error message (string).", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating that the 'returnUrl' parameter is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "Missing returnUrl query parameter"}}}, "401": {"description": "Unauthorized - Missing or invalid access token. Returns a JSON object with an error message (string).", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "404": {"description": "Stripe customer ID not found. Returns a JSON object with an error message (string).", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the Stripe customer ID was not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Stripe customer ID not found"}}}, "500": {"description": "Server error. Returns a JSON object with an error message (string) if the billing portal link could not be created.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the server error.", "type": "string"}}}, "examples": {"application/json": {"error": "Error creating billing portal link"}}}}, "tags": ["payment"], "security": [{"Bearer": []}]}, "parameters": []}, "/payment/subscriptions/": {"get": {"operationId": "payment_subscriptions_list", "summary": "Retrieve User's Payment Plan", "description": "### Retrieve User's Payment Plan\n\nThis endpoint retrieves the authenticated admin's current payment plan and billing interval. It obtains the admin document from Firestore based on the Firebase ID token provided in the Authorization header, then extracts the 'payment' field and subscription interval. \n\n**Response Structure (HTTP 200):**\n- **payment_plan** *(string)*: The subscription plan of the admin (e.g., 'Enterprise').\n- **interval** *(string)*: The billing interval for the subscription (e.g., 'year').\n\n**Error Responses:**\n- **400 Bad Request**: Returned if there is an error retrieving the payment plan. The response contains an `error` field (string).\n- **401 Unauthorized**: Returned if a valid Bearer token is not provided. The response contains an `error` field (string).\n- **403 Forbidden**: Returned if the user does not have permission to access this data. The response contains an `error` field (string).\n- **500 Internal Server Error**: Returned if an unexpected error occurs during processing. The response contains an `error` field (string).", "parameters": [], "responses": {"200": {"description": "User's payment plan and billing interval retrieved successfully.", "schema": {"required": ["payment_plan", "interval"], "type": "object", "properties": {"payment_plan": {"description": "The subscription plan of the admin (e.g., 'Enterprise').", "type": "string"}, "interval": {"description": "The billing interval (e.g., 'year').", "type": "string"}}}, "examples": {"application/json": {"payment_plan": "Enterprise", "interval": "year"}}}, "400": {"description": "Error retrieving payment plan.", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "Error getting payment plan"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Authentication credentials were not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "Authentication credentials were not provided."}}}, "403": {"description": "Forbidden - Insufficient permissions.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating lack of permission.", "type": "string"}}}, "examples": {"application/json": {"error": "You do not have permission to perform this action."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["payment"], "security": [{"Bearer": []}]}, "put": {"operationId": "payment_subscriptions_update", "summary": "Update Subscription Plan or Activity", "description": "### Update Subscription Plan or Activity\n\nThis endpoint allows an authenticated user to update their subscription plan or selected activities. The request must include the new plan, billing interval, and an array of activities for the updated subscription. A valid Bearer token is required in the Authorization header.\n\n**Request Body:**\n- **plan** *(string, required)*: The new subscription plan. Allowed values: 'Basic', 'Standard', 'Pro', 'Enterprise'.\n- **interval** *(string, required)*: The billing interval for the new plan. Allowed values: 'month', 'year'.\n- **activity** *(array of strings, required)*: The activities selected for the new subscription plan (e.g., 'Running', 'VerticalJump', 'Weightlifting').\n\n**Response Structure (HTTP 200):**\n- **status** *(string)*: A confirmation message indicating that the subscription was updated successfully.\n- **subscription_id** *(string)*: The updated subscription ID from Stripe.\n\n**Error Responses:**\n- **400 Bad Request**: Returned when required fields are missing or input data is invalid. The response includes an `error` field (string).\n- **401 Unauthorized**: Returned when a valid Bearer token is not provided. The response includes an `error` field (string).\n- **404 Not Found**: Returned when the subscription is not found or the update fails (for example, if the selected plan is the same as the current plan). The response includes an `error` field (string).\n- **500 Internal Server Error**: Returned if a server error occurs during the update process. The response includes an `error` field (string).", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["plan", "interval", "activity"], "type": "object", "properties": {"plan": {"description": "The new subscription plan (e.g., 'Basic', 'Standard', 'Pro', 'Enterprise').", "type": "string", "enum": ["Basic", "Standard", "Pro", "Enterprise"]}, "interval": {"description": "The billing interval for the new plan (e.g., 'month', 'year').", "type": "string", "enum": ["month", "year"]}, "activity": {"description": "The activities selected for the new subscription plan.", "type": "array", "items": {"description": "A selected activity (e.g., 'Running', 'VerticalJump', 'Weightlifting').", "type": "string"}}}, "example": {"plan": "Pro", "interval": "month", "activity": ["Running", "VerticalJump"]}}}], "responses": {"200": {"description": "Subscription updated successfully. Returns a confirmation message and the updated subscription ID.", "schema": {"required": ["status", "subscription_id"], "type": "object", "properties": {"status": {"description": "Confirmation message indicating the successful update.", "type": "string"}, "subscription_id": {"description": "The updated subscription ID from Stripe.", "type": "string"}}}, "examples": {"application/json": {"status": "Subscription updated successfully", "subscription_id": "sub_1234567890abcdef"}}}, "400": {"description": "Invalid input data. Returns an object with an error message describing the missing or invalid fields.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Missing required fields: plan, interval"}}}, "401": {"description": "Unauthorized - Missing or invalid access token. Returns an object with an error message.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "404": {"description": "Not Found - Subscription not found or update failed. Returns an object with an error message describing the failure.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Selected plan is the same as the current plan"}}}, "500": {"description": "Internal Server Error - A server error occurred during the update process. Returns an object with an error message.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the failure.", "type": "string"}}}, "examples": {"application/json": {"error": "Failed to update subscription: Invalid price ID"}}}}, "tags": ["payment"], "security": [{"Bearer": []}]}, "parameters": []}, "/payment/subscriptions/consent": {"post": {"operationId": "payment_subscriptions_consent_create", "summary": "Confirm Subscription Consent", "description": "### Confirm Subscription Consent\n\nThis endpoint processes user consent to continue their subscription after the trial period ends. The user must provide a valid JWT consent token in the request body. The token is validated and used to update the subscription accordingly. Upon success, the updated subscription ID is returned.\n\n**Request Body:**\n- **token** *(string, required)*: The JWT consent token.\n\n**Response Structure (HTTP 201):**\n- **subscription_id** *(string)*: The subscription ID confirming that the user's consent has been processed successfully.\n\n**Error Responses:**\n- **400 Bad Request**: Returned if the consent token is missing, invalid, or if processing fails. The response includes an `error` field (string).\n- **401 Unauthorized**: Returned if authentication credentials are missing or invalid.\n- **500 Internal Server Error**: Returned if a server error occurs during the consent processing. The response includes an `error` field (string).", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["token"], "type": "object", "properties": {"token": {"description": "JWT consent token", "type": "string"}}, "example": {"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}}}], "responses": {"201": {"description": "Consent confirmed successfully. Returns the subscription ID.", "schema": {"required": ["subscription_id"], "type": "object", "properties": {"subscription_id": {"description": "The subscription ID confirming consent.", "type": "string"}}}, "examples": {"application/json": {"subscription_id": "sub_1234567890abcdef"}}}, "400": {"description": "Error confirming consent. Returned if the token is missing or invalid, or if processing fails.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "Missing or invalid consent token"}}}, "401": {"description": "Unauthorized - Authentication credentials were not provided or are invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "Authentication credentials were not provided."}}}, "500": {"description": "Server error. Returns an object with an error message describing the failure.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the server error.", "type": "string"}}}, "examples": {"application/json": {"error": "Failed to process consent token"}}}}, "tags": ["payment"], "security": [{"Bearer": []}]}, "parameters": []}, "/payment/subscriptions/plan-charge/": {"post": {"operationId": "payment_subscriptions_plan-charge_create", "summary": "Calculate Plan Charge", "description": "### Calculate Plan Charge\n\nThis endpoint calculates the additional charge for upgrading or changing the subscription plan for a user. It requires the new subscription plan, billing interval, and a list of selected activities. Based on these inputs, the endpoint determines the extra charge for the upcoming invoice. A valid Bearer token must be included in the Authorization header.\n\n**Request Body:**\n- **plan** *(string, required)*: The new subscription plan. Allowed values: 'Basic', 'Standard', 'Pro', 'Enterprise'.\n- **interval** *(string, required)*: The billing interval for the new plan. Allowed values: 'month', 'year'.\n- **activity** *(array of strings, required)*: The list of activities selected for the new subscription plan (e.g., 'Running', 'VerticalJump', 'Weightlifting').\n\n**Response Structure (HTTP 201):**\n- **total_amount_due** *(number)*: The calculated additional charge amount for the new plan.\n- **currency** *(string)*: The currency in which the charge is denominated (e.g., 'USD').\n\n**Error Responses:**\n- **400 Bad Request**: Returned if required fields are missing or input data is invalid. The response contains an `error` field (string).\n- **401 Unauthorized**: Returned if a valid Bearer token is not provided. The response contains an `error` field (string).\n- **404 Not Found**: Returned if the charge calculation fails (e.g., subscription not found or the new plan is the same as the current plan).\n- **500 Internal Server Error**: Returned if a server error occurs (e.g., a Stripe error during calculation).", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["plan", "interval", "activity"], "type": "object", "properties": {"plan": {"description": "The new subscription plan. Allowed values: 'Basic', 'Standard', 'Pro', 'Enterprise'.", "type": "string", "enum": ["Basic", "Standard", "Pro", "Enterprise"]}, "interval": {"description": "The billing interval for the new plan. Allowed values: 'month', 'year'.", "type": "string", "enum": ["month", "year"]}, "activity": {"description": "The activities selected for the new subscription plan.", "type": "array", "items": {"description": "A selected activity (e.g., 'Running', 'VerticalJump', 'Weightlifting').", "type": "string"}}}, "example": {"plan": "Pro", "interval": "month", "activity": ["Running", "VerticalJump"]}}}], "responses": {"201": {"description": "Calculated charge for the new subscription plan. Returns the total additional amount due and the currency.", "schema": {"required": ["total_amount_due", "currency"], "type": "object", "properties": {"total_amount_due": {"description": "The calculated additional charge amount.", "type": "number"}, "currency": {"description": "The currency code (e.g., 'USD').", "type": "string"}}}, "examples": {"application/json": {"total_amount_due": 300, "currency": "USD"}}}, "400": {"description": "Invalid input data. Returns an object with an error message describing the missing or invalid fields.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Missing required fields: plan, interval"}}}, "401": {"description": "Unauthorized - Missing or invalid access token. Returns an object with an error message.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "404": {"description": "Not Found - Charge calculation failed. Returns an object with an error message indicating the reason (e.g., subscription not found or selected plan is the same as the current plan).", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Selected plan is the same as the current plan"}}}, "500": {"description": "Server error. Returns an object with an error message describing the failure.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the server error.", "type": "string"}}}, "examples": {"application/json": {"error": "Stripe error: The selected plan is the same as the current plan"}}}}, "tags": ["payment"], "security": [{"Bearer": []}]}, "parameters": []}, "/running/management/sessions/": {"post": {"operationId": "running_management_sessions_create", "summary": "Create a New Video Processing Session (Admin on Behalf of Another User)", "description": "This endpoint allows an **admin** (or sub-admin) to upload a **video file** for processing and create a new \"session\" resource **on behalf of another user**. The server will return a `session_id` that can be used to poll or retrieve the session details/results.\n\n### Request Body (Multipart/Form-Data)\n\nYou must supply the following fields:\n\n- **user_id** *(string, required)*: The ID of the user on whose behalf this session is created.\n- **video** *(file, required)*: The raw video file to be processed.\n- **session_name** *(string, optional)*: A human-readable name/title for the session.\n- **incline_degree** *(string or number, optional)*: Numeric value representing the incline degree.\n\n### Response Structure\n\nOn success (HTTP 200), the response is a JSON object with:\n\n- **session_id** *(string)*: A unique identifier for the created session.\n- **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).\n\n### Workflow\n1. **POST** a multipart/form-data request containing the required fields `user_id` and `video`, plus any optional fields.\n2. Provide a valid Bearer token in the `Authorization` header.\n3. The caller must have admin privileges to successfully create a session for another user.\n4. If successful, the server responds with `session_id` and `title`.\n5. If an error occurs (e.g., missing fields, lack of permissions), a JSON object with an `error` key is returned.\n\n#### Example cURL:\n\n```bash\ncurl -X POST \\\n     -H 'Content-Type: multipart/form-data' \\\n     -H 'Authorization: Bearer <YOUR_ADMIN_TOKEN>' \\\n     -F 'user_id=someUserId123' \\\n     -F 'video=@/path/to/video.mp4' \\\n     -F 'session_name=Custom Session' \\\n     -F 'incline_degree=5' \\\n     https://<backend-link>/running/management/sessions/\n```\n", "parameters": [{"name": "user_id", "in": "formData", "description": "**Required.** The ID of the user for whom this session is created (form field: text).", "required": true, "type": "string"}, {"name": "video", "in": "formData", "description": "**Required.** The raw video file to be processed (form field type: file).", "required": true, "type": "file"}, {"name": "session_name", "in": "formData", "description": "**Optional.** A descriptive name for the session (form field: text).", "required": false, "type": "string"}, {"name": "incline_degree", "in": "formData", "description": "**Optional.** A numeric string indicating the incline degree (form field: text).", "required": false, "type": "string"}], "responses": {"200": {"description": "Video processing session created successfully (HTTP 200).", "schema": {"required": ["session_id", "title"], "type": "object", "properties": {"session_id": {"description": "The unique identifier for the created session.", "type": "string"}, "title": {"description": "The session title (defaults if not provided).", "type": "string"}}}, "examples": {"application/json": {"session_id": "abcd1234efgh5678", "title": "Custom Session"}}}, "400": {"description": "Bad Request - Possibly due to missing `user_id`, missing `video`, or invalid form data.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "user_id is required"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating a missing or invalid token.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have admin permission to create sessions for others.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - Indicates business logic issues or resource limitations (e.g., session limit).", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "User has reached the maximum number of sessions."}}}, "500": {"description": "Internal Server Error - Unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "consumes": ["multipart/form-data", "application/x-www-form-urlencoded"], "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": []}, "/running/sessions/": {"post": {"operationId": "running_sessions_create", "summary": "Create a New Video Processing Session", "description": "This endpoint allows an authenticated (and authorized) user to upload a **video file** for processing and create a new \"session\" resource. The server will return a `session_id` that can be used to poll or retrieve the session details/results.\n\n### Request Body (Multipart/Form-Data)\n\nYou must supply the following fields:\n\n- **video** *(file, required)*: The raw video file to be processed. \n- **session_name** *(string, optional)*: A human-readable name/title for the session. \n- **incline_degree** *(string or number, optional)*: Numeric value representing the incline degree.\n\n### Response Structure\n\nOn success (HTTP 200), the response is a JSON object with:\n\n- **session_id** *(string)*: A unique identifier for the created session.\n- **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).\n\n### Workflow\n1. **POST** a multipart/form-data request containing the required `video` field and any optional fields.\n2. Provide a valid Bearer token in the `Authorization` header.\n3. If successful, the server responds with `session_id` and `title`.\n4. If an error occurs (e.g., missing video, lack of permissions), a JSON object with an `error` key is returned.\n\n#### Example cURL:\n\n```bash\ncurl -X POST \\\n     -H 'Content-Type: multipart/form-data' \\\n     -H 'Authorization: Bearer <YOUR_TOKEN>' \\\n     -F 'video=@/path/to/video.mp4' \\\n     -F 'session_name=Morning Run' \\\n     -F 'incline_degree=5' \\\n     https://<backend-link>/running/sessions/\n```\n", "parameters": [{"name": "video", "in": "formData", "description": "**Required.** The raw video file to be processed (form field type: file).", "required": true, "type": "file"}, {"name": "session_name", "in": "formData", "description": "**Optional.** A descriptive name for the session (form field type: text).", "required": false, "type": "string"}, {"name": "incline_degree", "in": "formData", "description": "**Optional.** A numeric string indicating the incline degree (form field type: text).", "required": false, "type": "string"}], "responses": {"200": {"description": "Video processing session created successfully (HTTP 200).", "schema": {"required": ["session_id", "title"], "type": "object", "properties": {"session_id": {"description": "The unique identifier for the created session.", "type": "string"}, "title": {"description": "The session title (defaults if not provided).", "type": "string"}}}, "examples": {"application/json": {"session_id": "abcd1234efgh5678", "title": "My Morning Run"}}}, "400": {"description": "Bad Request - Possibly due to missing video file or invalid form data.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No video file was provided"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating a missing or invalid token.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have permission to create sessions (admin-only).", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - Indicates business logic issues or resource limitations (e.g., session limit).", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "User has reached the maximum number of sessions."}}}, "500": {"description": "Internal Server Error - Unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "consumes": ["multipart/form-data", "application/x-www-form-urlencoded"], "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": []}, "/running/sessions/metrics/total/": {"get": {"operationId": "running_sessions_metrics_total_list", "summary": "Retrieve Total Metrics", "description": "Calculates and returns the average metrics for all running sessions of the admin user, along with the detailed metrics and creation timestamp of the most recent session.\n\n### Response Structure (HTTP 200)\n\nThe response is a JSON object with the following structure:\n\n- **avg_metrics** *(object)*: Contains the average values calculated across all sessions.\n  - **avg_speed** *(number)*: Average speed.\n  - **avg_power** *(number)*: Average power.\n  - **avg_cadence** *(number)*: Average cadence.\n  - **avg_flight_time** *(number)*: Average flight time.\n\n- **last_session_metrics** *(object)*: Contains detailed metrics for the most recent session.\n  - **speed** *(object)*: Speed metrics with:\n      - **avg** *(number)*: Average speed.\n      - **min** *(number)*: Minimum speed.\n      - **max** *(number)*: Maximum speed.\n  - **normalized_power** *(object)*: Normalized power metrics with keys `avg`, `min`, `max`.\n  - **cadence** *(object)*: Cadence metrics with keys `avg`, `min`, `max`.\n  - **total_distance** *(number)*: Total distance.\n  - **power** *(object)*: Power metrics with keys `avg`, `min`, `max`.\n  - **stride_time** *(object)*: Stride time metrics with keys `avg`, `min`, `max`.\n  - **total_time** *(number)*: Total session time.\n  - **contact_time** *(object)*: Contact time metrics with keys `avg`, `min`, `max`.\n  - **contact_angle** *(object)*: Contact angle metrics with keys `avg`, `min`, `max`.\n  - **incline** *(object)*: Incline metrics with keys `avg`, `min`, `max`.\n  - **pace** *(object)*: Pace metrics with keys `avg`, `min`, `max`.\n  - **stride_length** *(object)*: Stride length metrics with keys `avg`, `min`, `max`.\n  - **rbalance** *(object)*: Balance metrics with keys `avg`, `min`, `max`.\n  - **flight_time** *(object)*: Flight time metrics with keys `avg`, `min`, `max`.\n  - **footstrike** *(string)*: The footstrike type (e.g., 'midfoot').\n\n- **last_session_created_at** *(object)*: The creation timestamp of the most recent session, containing:\n  - **date** *(string)*: Date in DD/MM/YYYY format.\n  - **time** *(string)*: Time in HH:MM AM/PM format.\n\n### Error Handling\n\n- **400 Bad Request**: Invalid request parameters (e.g., invalid admin UID).\n- **401 Unauthorized**: Missing or invalid access token.\n- **403 Forbidden**: Insufficient privileges to retrieve total metrics.\n- **404 Not Found**: No sessions found or metrics unavailable.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [], "responses": {"200": {"description": "Total metrics successfully retrieved.", "schema": {"required": ["avg_metrics", "last_session_metrics", "last_session_created_at"], "type": "object", "properties": {"avg_metrics": {"description": "Average metrics across all sessions.", "required": ["avg_speed", "avg_power", "avg_cadence", "avg_flight_time"], "type": "object", "properties": {"avg_speed": {"description": "Average speed.", "type": "number"}, "avg_power": {"description": "Average power.", "type": "number"}, "avg_cadence": {"description": "Average cadence.", "type": "number"}, "avg_flight_time": {"description": "Average flight time.", "type": "number"}}}, "last_session_metrics": {"description": "Detailed metrics for the most recent session.", "required": ["speed", "normalized_power", "cadence", "total_distance", "power", "stride_time", "total_time", "contact_time", "contact_angle", "incline", "pace", "stride_length", "rbalance", "flight_time", "footstrike"], "type": "object", "properties": {"speed": {"description": "Speed metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average speed.", "type": "number"}, "min": {"description": "Minimum speed.", "type": "number"}, "max": {"description": "Maximum speed.", "type": "number"}}}, "normalized_power": {"description": "Normalized power metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average normalized power.", "type": "number"}, "min": {"description": "Minimum normalized power.", "type": "number"}, "max": {"description": "Maximum normalized power.", "type": "number"}}}, "cadence": {"description": "Cadence metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average cadence.", "type": "number"}, "min": {"description": "Minimum cadence.", "type": "number"}, "max": {"description": "Maximum cadence.", "type": "number"}}}, "total_distance": {"description": "Total distance covered in the session.", "type": "number"}, "power": {"description": "Power metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average power.", "type": "number"}, "min": {"description": "Minimum power.", "type": "number"}, "max": {"description": "Maximum power.", "type": "number"}}}, "stride_time": {"description": "Stride time metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average stride time.", "type": "number"}, "min": {"description": "Minimum stride time.", "type": "number"}, "max": {"description": "Maximum stride time.", "type": "number"}}}, "total_time": {"description": "Total time of the session.", "type": "number"}, "contact_time": {"description": "Contact time metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average contact time.", "type": "number"}, "min": {"description": "Minimum contact time.", "type": "number"}, "max": {"description": "Maximum contact time.", "type": "number"}}}, "contact_angle": {"description": "Contact angle metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average contact angle.", "type": "number"}, "min": {"description": "Minimum contact angle.", "type": "number"}, "max": {"description": "Maximum contact angle.", "type": "number"}}}, "incline": {"description": "Incline metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average incline.", "type": "number"}, "min": {"description": "Minimum incline.", "type": "number"}, "max": {"description": "Maximum incline.", "type": "number"}}}, "pace": {"description": "Pace metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average pace.", "type": "number"}, "min": {"description": "Minimum pace.", "type": "number"}, "max": {"description": "Maximum pace.", "type": "number"}}}, "stride_length": {"description": "Stride length metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average stride length.", "type": "number"}, "min": {"description": "Minimum stride length.", "type": "number"}, "max": {"description": "Maximum stride length.", "type": "number"}}}, "rbalance": {"description": "Balance metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average balance.", "type": "number"}, "min": {"description": "Minimum balance.", "type": "number"}, "max": {"description": "Maximum balance.", "type": "number"}}}, "flight_time": {"description": "Flight time metrics.", "required": ["avg", "min", "max"], "type": "object", "properties": {"avg": {"description": "Average flight time.", "type": "number"}, "min": {"description": "Minimum flight time.", "type": "number"}, "max": {"description": "Maximum flight time.", "type": "number"}}}, "footstrike": {"description": "The footstrike type (e.g., 'midfoot').", "type": "string"}}}, "last_session_created_at": {"description": "Creation timestamp of the most recent session.", "required": ["date", "time"], "type": "object", "properties": {"date": {"description": "Creation date in DD/MM/YYYY format.", "type": "string"}, "time": {"description": "Creation time in HH:MM AM/PM format.", "type": "string"}}}}}, "examples": {"application/json": {"avg_metrics": {"avg_speed": 2.4107943924101263, "avg_power": 299.24035514304535, "avg_cadence": 157.35377125682285, "avg_flight_time": 0.10803262246023908}, "last_session_metrics": {"speed": {"avg": 2.760333333333333, "min": 2.693, "max": 2.828}, "normalized_power": {"avg": 3.04, "min": 2.99, "max": 3.13}, "cadence": {"avg": 169.96666666666667, "min": 167.8, "max": 173.9}, "total_distance": 24.802, "power": {"avg": 212.66666666666666, "min": 209.0, "max": 219.0}, "stride_time": {"avg": 0.35305666666666663, "min": 0.345, "max": 0.3575}, "total_time": 8.985, "contact_time": {"avg": 0.23916666666666667, "min": 0.23688, "max": 0.24312}, "contact_angle": {"avg": 84.581, "min": 84.06, "max": 85.514}, "incline": {"avg": 0.0, "min": 0.0, "max": 0.0}, "pace": {"avg": 6.040326197822259, "min": 5.893446487505894, "max": 6.188884762965713}, "stride_length": {"avg": 0.6600536533333333, "min": 0.6537888, "max": 0.67165}, "rbalance": {"avg": 45.86, "min": 44.47, "max": 46.67}, "flight_time": {"avg": 0.11389, "min": 0.10812, "max": 0.11917}, "footstrike": "midfoot"}, "last_session_created_at": {"date": "05/02/2025", "time": "06:00 PM"}}}}, "400": {"description": "Bad Request - Invalid parameters (e.g., invalid admin UID).", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message explaining the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have sufficient privileges to retrieve total metrics.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient permissions.", "type": "string"}}}, "examples": {"application/json": {"error": "Access denied."}}}, "404": {"description": "Not Found - No sessions found or metrics unavailable.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that no sessions or metrics were found.", "type": "string"}}}, "examples": {"application/json": {"error": "Session not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": []}, "/running/sessions/{session_id}/": {"get": {"operationId": "running_sessions_read", "summary": "Retrieve Running Session Details", "description": "Retrieves detailed information for a specific running session identified by the `session_id`.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session to retrieve.\n\n### Response Structure\nOn success (HTTP 200), the response is a JSON object containing the following fields:\n\n- **metrics** *(object)*: A dictionary of metric arrays (e.g., speed, cadence, distance). Each key maps to an array of numbers.\n- **angles** *(object)*: A dictionary of angle arrays (e.g., lhip_angle, rsho_angle). Each key maps to an array of numbers.\n- **all_timestamps** *(array[number])*: A list of timestamps (in seconds) for the session data.\n- **analyzed_video_url** *(string, URI)*: The URL for the analyzed video (with keypoints overlay).\n- **video_url** *(string, URI)*: The URL for the original uploaded video.\n- **segments** *(integer)*: The number of segments processed.\n- **created_at** *(object)*: An object containing:\n    - **date** *(string)*: The creation date in DD/MM/YYYY format.\n    - **time** *(string)*: The creation time in HH:MM AM/PM format.\n- **user_name** *(string)*: The name of the user associated with the session.\n- **activity** *(string)*: The activity type (e.g., 'Running').\n- **title** *(string)*: The title of the session.\n- **calculated_metrics** *(object)*: A dictionary containing computed statistics (such as averages, minima, and maxima) for various metrics.\n- **summary** *(string)*: An optional textual summary of the session.\n\n### Error Handling\n- **400 Bad Request**: The request parameters are invalid (e.g., invalid admin UID).\n- **401 Unauthorized**: The access token is missing or invalid.\n- **403 Forbidden**: The user does not have sufficient privileges to access the session.\n- **404 Not Found**: The session does not exist or is not valid for the specified activity.\n- **500 Internal Server Error**: An unexpected server-side error occurred.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The unique session identifier.", "required": true, "type": "string"}], "responses": {"200": {"description": "Session data successfully retrieved.", "schema": {"required": ["metrics", "angles", "all_timestamps", "activity"], "type": "object", "properties": {"metrics": {"description": "A dictionary of metric arrays.", "type": "object", "additionalProperties": {"type": "number"}}, "angles": {"description": "A dictionary of angle arrays.", "type": "object", "additionalProperties": {"type": "number"}}, "all_timestamps": {"description": "List of timestamps associated with the session.", "type": "array", "items": {"type": "number"}}, "analyzed_video_url": {"description": "The public URL of the analyzed video.", "type": "string", "format": "uri"}, "video_url": {"description": "The public URL of the original video.", "type": "string", "format": "uri"}, "segments": {"description": "The number of segments processed.", "type": "integer"}, "created_at": {"description": "Timestamp when the session was created.", "type": "object", "properties": {"date": {"description": "Creation date in DD/MM/YYYY format.", "type": "string"}, "time": {"description": "Creation time in HH:MM AM/PM format.", "type": "string"}}}, "user_name": {"description": "The name of the user associated with this session.", "type": "string"}, "activity": {"description": "The type of activity (e.g., 'Running').", "type": "string"}, "title": {"description": "The session title.", "type": "string"}, "calculated_metrics": {"description": "Computed metrics (average, min, max values) for the session.", "type": "object", "additionalProperties": {"type": "number"}}, "summary": {"description": "An optional summary of the session.", "type": "string"}}}, "examples": {"application/json": {"metrics": {"speed": [2.899, 3.047, 2.905], "cadence": [173.9, 168.6, 170.2]}, "angles": {"lelb_angle": [30, 35, 33], "lhip_angle": [40, 42, 41]}, "all_timestamps": [0.033, 0.067, 0.1], "analyzed_video_url": "https://storage.googleapis.com/your-bucket/analyzed_video.mp4", "video_url": "https://storage.googleapis.com/your-bucket/original_video.mov", "segments": 3, "created_at": {"date": "19/12/2024", "time": "11:57 PM"}, "user_name": "Lee Jhon", "activity": "Running", "title": "Session Title", "calculated_metrics": {"speed": {"avg": 2.95, "min": 2.899, "max": 3.047}, "cadence": {"avg": 170.9, "min": 168.6, "max": 173.9}, "total_distance": 26.509, "total_time": 8.985}, "summary": "Optional session summary text."}}}, "400": {"description": "Bad Request - Invalid parameters or admin UID.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message explaining the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user is not authorized to access this session.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient permissions to access the session data.", "type": "string"}}}, "examples": {"application/json": {"error": "Access denied."}}}, "404": {"description": "Not Found - The requested session does not exist or the activity is not 'Running'.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the session was not found.", "type": "string"}}}, "examples": {"application/json": {"error": "The session does not exist."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/running/sessions/{session_id}/export/": {"get": {"operationId": "running_sessions_export_list", "summary": "Export Running Session Data", "description": "Retrieves detailed session data for exporting a specific running session identified by the `session_id`.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session to export.\n\n### Response Structure (HTTP 200)\nThe response is a JSON object that includes:\n\n- **metrics** *(object)*: A dictionary where each key represents a metric (e.g., 'speed', 'cadence') and its value is an array of numbers.\n- **keypoints** *(object)*: A dictionary where each key represents a keypoint (e.g., 'lknev', 'ltoev') and its value is an array of numbers.\n- **angles** *(object)*: A dictionary where each key represents an angle (e.g., 'lelb_angle', 'lhip_angle') and its value is an array of numbers.\n- **all_timestamps** *(array[number])*: An array of timestamps (in seconds) corresponding to the data points.\n- **contact** *(array[boolean])*: An array of boolean values indicating contact status.\n- **activity** *(string)*: The activity type (e.g., 'Running').\n\n### Error Handling\n- **400 Bad Request**: The request parameters are invalid (e.g., an invalid admin UID).\n- **401 Unauthorized**: The access token is missing or invalid.\n- **403 Forbidden**: The user does not have sufficient privileges to access this session data.\n- **404 Not Found**: The requested session does not exist or is invalid for the activity.\n- **500 Internal Server Error**: An unexpected server error occurred.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The unique identifier of the session to export.", "required": true, "type": "string"}], "responses": {"200": {"description": "Session data successfully exported.", "schema": {"required": ["metrics", "keypoints", "angles", "all_timestamps", "contact", "activity"], "type": "object", "properties": {"metrics": {"description": "A dictionary of metric arrays (e.g., speed, cadence, etc.).", "type": "object", "additionalProperties": {"type": "number"}}, "keypoints": {"description": "A dictionary of keypoint arrays.", "type": "object", "additionalProperties": {"type": "array", "items": {"type": "number"}}}, "angles": {"description": "A dictionary of angle arrays.", "type": "object", "additionalProperties": {"type": "array", "items": {"type": "number"}}}, "all_timestamps": {"description": "List of timestamps (in seconds).", "type": "array", "items": {"type": "number"}}, "contact": {"description": "Array indicating contact status (true/false).", "type": "array", "items": {"type": "boolean"}}, "activity": {"description": "The activity type (e.g., 'Running').", "type": "string"}}}, "examples": {"application/json": {"metrics": {"technique": [0, 0, 0], "push_angle": [72.035, 71.204, 71.663], "contact_stability": [0.604, 0.793, 0.511], "power": [209, 219, 210]}, "keypoints": {"lknev": [0.1, 0.2, 0.3], "ltoev": [0.4, 0.5, 0.6], "relbv": [0.7, 0.8, 0.9], "rtoey": [1.0, 1.1, 1.2], "headv": [1.3, 1.4, 1.5]}, "angles": {"lelb_angle": [30, 35, 33], "lhip_angle": [40, 42, 41]}, "all_timestamps": [0.033, 0.067, 0.1], "contact": [false, true, false], "activity": "Running"}}}, "400": {"description": "Bad Request - The request parameters are invalid (e.g., invalid admin UID).", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message explaining the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that the access token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have sufficient privileges to access this session data.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient permissions.", "type": "string"}}}, "examples": {"application/json": {"error": "Access denied."}}}, "404": {"description": "Not Found - The requested session does not exist or the activity is not valid.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the session was not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Session not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/running/sessions/{session_id}/form-analysis/": {"post": {"operationId": "running_sessions_form-analysis_create", "summary": "Generate Form Analysis Images (Deprecated)", "description": "Generates (or retrieves) form analysis images for a given running session. Requires a valid payment plan and admin privileges.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session.\n\n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON object categorizing image URLs by language:\n\n- **contact_angles** *(object)*: URLs for contact angle plots.\n  - **en** *(string, URI)*: English version of the contact angle plot.\n  - **ru** *(string, URI)*: Russian version of the contact angle plot.\n- **push_angles** *(object)*: URLs for push angle plots.\n  - **en** *(string, URI)*: English version of the push angle plot.\n  - **ru** *(string, URI)*: Russian version of the push angle plot.\n- **knee_ankle** *(object)*: URLs for knee-ankle plots.\n  - **en** *(string, URI)*: English version of the knee-ankle plot.\n  - **ru** *(string, URI)*: Russian version of the knee-ankle plot.\n\n### Error Handling\n\n- **400 Bad Request**: Invalid parameters (e.g., invalid admin UID).\n- **401 Unauthorized**: Missing or invalid access token.\n- **403 Forbidden**: User does not have a supported payment plan.\n- **404 Not Found**: Images could not be generated or session not found.\n- **500 Internal Server Error**: An unexpected error occurred.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The session ID for which form analysis images are generated/retrieved.", "required": true, "type": "string"}], "responses": {"200": {"description": "Form analysis images retrieved or generated successfully.", "schema": {"type": "object", "properties": {"contact_angles": {"description": "URLs for contact angle images (English & Russian).", "type": "object", "properties": {"en": {"description": "URL for the English contact angle image.", "type": "string", "format": "uri"}, "ru": {"description": "URL for the Russian contact angle image.", "type": "string", "format": "uri"}}}, "push_angles": {"description": "URLs for push angle images (English & Russian).", "type": "object", "properties": {"en": {"description": "URL for the English push angle image.", "type": "string", "format": "uri"}, "ru": {"description": "URL for the Russian push angle image.", "type": "string", "format": "uri"}}}, "knee_ankle": {"description": "URLs for knee-ankle images (English & Russian).", "type": "object", "properties": {"en": {"description": "URL for the English knee-ankle image.", "type": "string", "format": "uri"}, "ru": {"description": "URL for the Russian knee-ankle image.", "type": "string", "format": "uri"}}}}}, "examples": {"application/json": {"contact_angles": {"en": "https://storage.googleapis.com/.../plot_contact_angle_en.png", "ru": "https://storage.googleapis.com/.../plot_contact_angle_ru.png"}, "push_angles": {"en": "https://storage.googleapis.com/.../plot_push_angle_en.png", "ru": "https://storage.googleapis.com/.../plot_push_angle_ru.png"}, "knee_ankle": {"en": "https://storage.googleapis.com/.../plot_knee_ankle_en.png", "ru": "https://storage.googleapis.com/.../plot_knee_ankle_ru.png"}}}}, "400": {"description": "Bad Request - Potentially invalid parameters or admin UID.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message about invalid parameters.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Access token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - Payment plan not supported or insufficient permissions.", "schema": {"type": "object", "properties": {"error": {"description": "User does not have a supported payment plan.", "type": "string"}}}, "examples": {"application/json": {"error": "Payment plan not supported."}}}, "404": {"description": "Not Found - Failed to generate or retrieve images, or session not found.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating why images or session were not found.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred."}}}, "500": {"description": "Internal Server Error - A server-side error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message about server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/running/sessions/{session_id}/gait-analysis/": {"post": {"operationId": "running_sessions_gait-analysis_create", "summary": "Gait Analysis Report", "description": "Retrieves a detailed gait analysis report for a given session. The endpoint requires the user to have a valid admin token and an active subscription plan (Pro, Premium, Enterprise, or Standard). \n\n### Request\n- **Path Parameter**: \n    - **session_id** *(string, required)*: The unique identifier of the session for which the gait analysis report is requested.\n\n### Response Structure (HTTP 200)\n\nThe response is a JSON object containing:\n- **peak_time** *(number)*: The peak time value identified in the gait analysis.\n- **phases** *(object)*: An object containing phase details. Each phase (e.g.:\n    - **flight** and **takeoff**) is an object with:\n      - **video_frame** *(integer)*: The video frame corresponding to the phase.\n      - **graph_phase** *(integer)*: The phase value used for graph representations.\n      - **video_phase** *(integer)*: The phase value as seen in the video.\n      - **image_url** *(string, URI)*: The public URL for the image representing the phase.\n\n- **angles** *(object)*: An object containing angle measurements for specific joints. For example:\n    - **lank_angle** and **lkne_angle** are objects with:\n      - **current** *(array[number])*: The current measured angle values.\n      - **next** *(array[number])*: The subsequent measured angle values.\n      - **std_dev** *(array[number])*: The standard deviation of these measurements.\n\n- **user_info** *(object)*: Contains information about the user associated with the session, including:\n    - **age** *(string)*: The user's age.\n    - **height** *(number)*: The user's height in centimeters.\n    - **weight** *(number)*: The user's weight in kilograms.\n    - **email** *(string, email)*: The user's email address.\n\n- **date** *(string)*: The date of the gait analysis report in DD/MM/YYYY format.\n\n### Error Handling\n\n- **400 Bad Request**: Invalid token or parameters.\n- **401 Unauthorized**: Token is missing or invalid.\n- **403 Forbidden**: Admin access is required.\n- **404 Not Found**: The session was not found or the user does not have a valid payment plan.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The unique identifier of the session for which the gait analysis report is requested.", "required": true, "type": "string"}], "responses": {"200": {"description": "Gait Analysis Report retrieved successfully.", "schema": {"required": ["peak_time", "phases", "angles", "user_info", "date"], "type": "object", "properties": {"peak_time": {"description": "The peak time value identified in the gait analysis.", "type": "number"}, "phases": {"description": "Phase details for gait analysis.", "type": "object", "properties": {"flight": {"description": "Details for the flight phase.", "required": ["video_frame", "graph_phase", "video_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "The video frame corresponding to the flight phase.", "type": "integer"}, "graph_phase": {"description": "The phase value used in graph representations for the flight phase.", "type": "integer"}, "video_phase": {"description": "The phase value as seen in the video for the flight phase.", "type": "integer"}, "image_url": {"description": "The public URL of the flight phase image.", "type": "string", "format": "uri"}}}, "takeoff": {"description": "Details for the takeoff phase.", "required": ["video_frame", "graph_phase", "video_phase", "image_url"], "type": "object", "properties": {"video_frame": {"description": "The video frame corresponding to the takeoff phase.", "type": "integer"}, "graph_phase": {"description": "The phase value used in graph representations for the takeoff phase.", "type": "integer"}, "video_phase": {"description": "The phase value as seen in the video for the takeoff phase.", "type": "integer"}, "image_url": {"description": "The public URL of the takeoff phase image.", "type": "string", "format": "uri"}}}}}, "angles": {"description": "Angle measurements for specific joints.", "type": "object", "properties": {"lank_angle": {"description": "Angle data for the left ankle.", "required": ["current", "next", "std_dev"], "type": "object", "properties": {"current": {"description": "The current measured angle values.", "type": "array", "items": {"type": "number"}}, "next": {"description": "The next measured angle values.", "type": "array", "items": {"type": "number"}}, "std_dev": {"description": "The standard deviation of the angle values.", "type": "array", "items": {"type": "number"}}}}, "lkne_angle": {"description": "Angle data for the left knee.", "required": ["current", "next", "std_dev"], "type": "object", "properties": {"current": {"description": "The current measured angle values.", "type": "array", "items": {"type": "number"}}, "next": {"description": "The next measured angle values.", "type": "array", "items": {"type": "number"}}, "std_dev": {"description": "The standard deviation of the angle values.", "type": "array", "items": {"type": "number"}}}}}}, "user_info": {"description": "User information associated with the session.", "required": ["age", "height", "weight", "email"], "type": "object", "properties": {"age": {"description": "The age of the user.", "type": "string"}, "height": {"description": "The user's height in centimeters.", "type": "number"}, "weight": {"description": "The user's weight in kilograms.", "type": "number"}, "email": {"description": "The user's email address.", "type": "string", "format": "email"}}}, "date": {"description": "The date of the gait analysis report in DD/MM/YYYY format.", "type": "string"}}}, "examples": {"application/json": {"peak_time": 46, "phases": {"flight": {"video_frame": 139, "graph_phase": 270, "video_phase": 323, "image_url": "https://storage.googleapis.com/.../flight.png"}, "takeoff": {"video_frame": 137, "graph_phase": 255, "video_phase": 308, "image_url": "https://storage.googleapis.com/.../takeoff.png"}}, "angles": {"lank_angle": {"current": [1.23, 2.34, 3.45], "next": [1.11, 2.22, 3.33], "std_dev": [0.12, 0.23, 0.34]}, "lkne_angle": {"current": [1.23, 2.34, 3.45], "next": [1.11, 2.22, 3.33], "std_dev": [0.12, 0.23, 0.34]}}, "user_info": {"age": "20", "height": 180, "weight": 79.8, "email": "leejhon5555@gmail.com"}, "date": "20/12/2024"}}}, "400": {"description": "Bad Request - Invalid token or parameters.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message describing the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid session data."}}}, "401": {"description": "Unauthorized - Token is invalid or expired.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that the token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - Admin access is required.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that admin privileges are required.", "type": "string"}}}, "examples": {"application/json": {"error": "Admin access required."}}}, "404": {"description": "Not Found - Session not found or user does not have a valid payment plan.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the session was not found or payment plan is invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "Session not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "Internal server error."}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/running/sessions/{session_id}/metrics/": {"get": {"operationId": "running_sessions_metrics_list", "summary": "Retrieve Report Metrics (Deprecated)", "description": "Retrieves aggregated report metrics for a running session identified by the `session_id`. \n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session for which metrics are to be retrieved.\n\n### Response Structure (HTTP 200)\nThe response is a JSON object that includes the following keys:\n\n- **metrics** *(object)*: A dictionary where each key (e.g., 'technique', 'push_angle', etc.) maps to an array of numeric values representing various performance metrics.\n- **keypoints** *(object)*: A dictionary where each key (e.g., 'lknev', 'ltoev', etc.) maps to an array of numeric values representing keypoint data.\n- **angles** *(object)*: A dictionary where each key (e.g., 'lelb_angle', 'lhip_angle', etc.) maps to an array of numeric values representing angle measurements.\n- **all_timestamps** *(array[number])*: An array of timestamp values (in seconds) corresponding to the collected data points.\n- **activity** *(string)*: The type of activity (e.g., 'Running').\n- **user_status** *(string)*: The status of the user (e.g., 'user' or 'admin').\n- **user_id** *(string)*: The unique identifier of the user associated with the session.\n- **segments** *(integer)*: The number of segments processed for the session.\n- **user_data** *(object)*: An object containing detailed user information, including:\n    - **ycom** *(number)*: The YCOM value.\n    - **weight** *(number)*: The user's weight in kilograms.\n    - **age** *(string)*: The user's age.\n    - **height** *(number)*: The user's height in centimeters.\n    - **phone** *(string)*: The user's phone number.\n    - **leg_length** *(number)*: The user's leg length in meters.\n    - **display_name** *(string)*: The user's display name.\n    - **shoeSize** *(string)*: The user's shoe size.\n    - **email** *(string, email)*: The user's email address.\n    - **gender** *(string)*: The user's gender.\n    - **brand** *(string)*: The brand of the user's shoes.\n    - **shoeModel** *(string)*: The model of the user's shoes.\n    - **uid** *(string)*: The unique user ID.\n\n### Error Handling\n- **400 Bad Request**: The request parameters are invalid (e.g., invalid admin UID).\n- **401 Unauthorized**: The access token is missing or invalid.\n- **403 Forbidden**: The user does not have sufficient privileges to access the metrics.\n- **404 Not Found**: The session does not exist or is invalid.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The unique session identifier.", "required": true, "type": "string"}], "responses": {"200": {"description": "Report metrics successfully retrieved.", "schema": {"required": ["metrics", "keypoints", "angles", "all_timestamps", "activity", "user_status", "user_id", "segments", "user_data"], "type": "object", "properties": {"metrics": {"description": "A dictionary of metric arrays.", "type": "object", "additionalProperties": {"type": "number"}}, "keypoints": {"description": "A dictionary of keypoint arrays.", "type": "object", "additionalProperties": {"type": "array", "items": {"type": "number"}}}, "angles": {"description": "A dictionary of angle arrays.", "type": "object", "additionalProperties": {"type": "array", "items": {"type": "number"}}}, "all_timestamps": {"description": "Array of timestamps (in seconds) corresponding to the data points.", "type": "array", "items": {"type": "number"}}, "activity": {"description": "The activity type (e.g., 'Running').", "type": "string"}, "user_status": {"description": "The status of the user (e.g., 'user' or 'admin').", "type": "string"}, "user_id": {"description": "The unique identifier of the user associated with the session.", "type": "string"}, "segments": {"description": "The number of segments processed for the session.", "type": "integer"}, "user_data": {"description": "An object containing detailed user information.", "type": "object", "properties": {"ycom": {"description": "The YCOM value.", "type": "number"}, "weight": {"description": "The user's weight in kilograms.", "type": "number"}, "age": {"description": "The user's age.", "type": "string"}, "height": {"description": "The user's height in centimeters.", "type": "number"}, "phone": {"description": "The user's phone number.", "type": "string"}, "leg_length": {"description": "The user's leg length in meters.", "type": "number"}, "display_name": {"description": "The user's display name.", "type": "string"}, "shoeSize": {"description": "The user's shoe size.", "type": "string"}, "email": {"description": "The user's email address.", "type": "string", "format": "email"}, "gender": {"description": "The user's gender.", "type": "string"}, "brand": {"description": "The brand of the user's shoes.", "type": "string"}, "shoeModel": {"description": "The model of the user's shoes.", "type": "string"}, "uid": {"description": "The unique user identifier (UID).", "type": "string"}}}}}, "examples": {"application/json": {"metrics": {"technique": [0, 0, 0], "push_angle": [72.035, 71.204, 71.663], "contact_stability": [0.604, 0.793, 0.511], "power": [209, 219, 210], "scale": [4.24944, 4.2623, 4.28003], "distance": [8.267, 8.468, 8.067], "contact_angle": [84.169, 84.06, 85.514], "incline": [0, 0, 0], "pyd": [1.082, 1.108, 1.114], "speed_rh": [2.85, 2.878, 2.873], "pace": [6.03865, 5.89345, 6.18888], "stride_length": [0.6537888, 0.67165, 0.65472216], "run_duration": [2.995, 2.995, 2.995], "mean_markers_validity": [0.952, 0.96, 0.934], "speed": [2.76, 2.828, 2.693], "ycom": [0.957, 0.957, 0.957], "elevation": [0, 0, 0], "cadence": [173.9, 168.2, 167.8], "pyd0": [1.082, 1.108, 1.114], "stride_time": [0.345, 0.35667, 0.3575], "mass": [70, 70, 70], "contact_time": [0.23688, 0.2375, 0.24312], "angular_speed": [-30.275, -31.368, -28.132], "speed_rt": [3.08, 3.107, 3.11], "power0": [209, 219, 210], "speed_lt": [2.721, 2.805, 2.653], "speed_lh": [2.21, 2.349, 1.981], "rbalance": [46.44, 46.67, 44.47], "rbalance_stability": [80.85, 87.36, 83.9], "incline_toe": [0.09347, 0.08225, 0.07673], "flight_time": [0.10812, 0.11917, 0.11438], "power_for_1kg": [2.99, 3.13, 3]}, "keypoints": {"lknev": [0.1, 0.2, 0.3], "ltoev": [0.4, 0.5, 0.6], "relbv": [0.7, 0.8, 0.9], "rtoey": [1.0, 1.1, 1.2], "headv": [1.3, 1.4, 1.5]}, "angles": {"lelb_angle": [30, 35, 33], "lhip_angle": [40, 42, 41]}, "all_timestamps": [0.033, 0.067, 0.1], "activity": "Running", "user_status": "user", "user_id": "CMQe1HuAg4uMXqHE6dVO", "segments": 3, "user_data": {"ycom": 0.957, "weight": 70, "age": "22", "height": 174, "phone": "8328889011", "leg_length": 0.90915, "display_name": "Natalia Alioth", "shoeSize": "6", "email": "natalia3@gmail.com", "gender": "Female", "brand": "Fabletics", "shoeModel": "The Everyday Sneaker II", "uid": "CMQe1HuAg4uMXqHE6dVO"}}}}, "400": {"description": "Bad Request - Invalid parameters (e.g., invalid admin UID).", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message explaining the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - Insufficient privileges to access the report metrics.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient permissions to access the requested metrics.", "type": "string"}}}, "examples": {"application/json": {"error": "Access denied."}}}, "404": {"description": "Not Found - The session does not exist or is invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the session was not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Session not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/running/sessions/{session_id}/recommendation/": {"post": {"operationId": "running_sessions_recommendation_create", "summary": "Generate Recommendations for a Session (Deprecated)", "description": "Generates and returns a set of report recommendations for a given session. \n\nThe endpoint requires the user to have a valid admin token and an active subscription plan (Pro, Premium, Enterprise, or Standard). \n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session for which recommendations are generated.\n\n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON object containing recommendations. Each recommendation field is an object with language keys, for example:\n\n- **text_contact_angle** *(object)*:\n    - **en** *(string)*: Recommendation text in English for adjusting the contact angle.\n    - **ru** *(string)*: Recommendation text in Russian for adjusting the contact angle.\n\n- **text_push_angle** *(object)*: Recommendation text for the push angle.\n- **text_knee_ankle** *(object)*: Recommendation text for knee-ankle alignment.\n- **text_right_ankle_angle** *(object)*: Detailed recommendation for the right ankle angle.\n- **text_right_knee_angle** *(object)*: Detailed recommendation for the right knee angle.\n- **text_left_ankle_angle** *(object)*: Recommendation text for the left ankle angle.\n- **text_left_knee_angle** *(object)*: Recommendation text for the left knee angle.\n- **text_hip_angle** *(object)*: Recommendation text for the hip angle.\n- **text_summary** *(object)*: Overall recommendations and summary text.\n\n### Error Handling\n\n- **400 Bad Request**: The request parameters are invalid (e.g., missing admin UID).\n- **401 Unauthorized**: The access token is missing or invalid.\n- **403 Forbidden**: Admin access is required to generate recommendations.\n- **404 Not Found**: Session data not found or the user does not have a valid payment plan.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The unique identifier of the session for which recommendations are generated.", "required": true, "type": "string"}], "responses": {"200": {"description": "Recommendations for the session generated successfully.", "schema": {"type": "object", "properties": {"text_contact_angle": {"description": "Recommendation for adjusting the contact angle.", "type": "object", "properties": {"en": {"description": "Recommendation in English.", "type": "string"}, "ru": {"description": "Recommendation in Russian.", "type": "string"}}}, "text_push_angle": {"description": "Recommendation for the push angle.", "type": "object", "properties": {"en": {"description": "Recommendation in English.", "type": "string"}, "ru": {"description": "Recommendation in Russian.", "type": "string"}}}, "text_knee_ankle": {"description": "Recommendation for knee-ankle alignment.", "type": "object", "properties": {"en": {"description": "Recommendation in English.", "type": "string"}, "ru": {"description": "Recommendation in Russian.", "type": "string"}}}, "text_right_ankle_angle": {"description": "Detailed recommendation for the right ankle angle. For example, it may suggest a range (e.g., 20° dorsiflexion to 30° plantarflexion) to support a natural gait.", "type": "object", "properties": {"en": {"description": "Recommendation in English.", "type": "string"}, "ru": {"description": "Recommendation in Russian.", "type": "string"}}}, "text_right_knee_angle": {"description": "Recommendation for the right knee angle, including suggested flexion and extension ranges to ensure proper shock absorption and propulsion.", "type": "object", "properties": {"en": {"description": "Recommendation in English.", "type": "string"}, "ru": {"description": "Recommendation in Russian.", "type": "string"}}}, "text_left_ankle_angle": {"description": "Recommendation for the left ankle angle.", "type": "object", "properties": {"en": {"description": "Recommendation in English.", "type": "string"}, "ru": {"description": "Recommendation in Russian.", "type": "string"}}}, "text_left_knee_angle": {"description": "Recommendation for the left knee angle.", "type": "object", "properties": {"en": {"description": "Recommendation in English.", "type": "string"}, "ru": {"description": "Recommendation in Russian.", "type": "string"}}}, "text_hip_angle": {"description": "Recommendation for the hip angle.", "type": "object", "properties": {"en": {"description": "Recommendation in English.", "type": "string"}, "ru": {"description": "Recommendation in Russian.", "type": "string"}}}, "text_summary": {"description": "Overall summary and recommendations.", "type": "object", "properties": {"en": {"description": "Summary in English.", "type": "string"}, "ru": {"description": "Summary in Russian.", "type": "string"}}}}}, "examples": {"application/json": {"text_contact_angle": {"en": "Ensure the contact angle with the center of mass is adjusted", "ru": "Убедитесь, что угол контакта с центром массы отрегулирован"}, "text_push_angle": {"en": "Text for push angle", "ru": "Текст для угла толчка"}, "text_knee_ankle": {"en": "Text for knee ankle", "ru": "Текст для коленного голеностопного угла"}, "text_right_ankle_angle": {"en": "Ensure your right ankle moves within a range of 20° dorsiflexion to 30° plantarflexion during the step cycle. This range supports a natural walking pattern, enhances efficiency, and reduces the risk of ankle injuries.", "ru": "Убедитесь, что ваш правый голеностоп проходит диапазон движения от 20° дорсифлексии до 30° плантарной флексии во время цикла шага. Этот диапазон поддерживает естественный рисунок походки, повышает эффективность и снижает вероятность травм голеностопа."}, "text_right_knee_angle": {"en": "Aim for your right knee to flex to about 40° during the foot strike and extend to roughly 180° during the take-off phase. Maintaining this range allows for better shock absorption and propulsion, reducing stress on the knee joints.", "ru": "Стремитесь к тому, чтобы ваше правое колено сгибалось до 40° при ударе ноги о землю и разгибалось до примерно 180° в фазе отрыва. Сохранение этого диапазона позволяет лучше поглощать удары и обеспечивать толчок, снижая нагрузку на коленные суставы."}, "text_left_ankle_angle": {"en": "During a step cycle, your left ankle should move within a range between 20° dorsiflexion to 30° plantarflexion, mirroring the right ankle. This balance helps maintain a symmetric and efficient gait, minimizing the risk of imbalance-related injuries.", "ru": "В течение цикла шага ваш левый голеностоп должен двигаться в диапазоне от 20° дорсифлексии до 30° плантарной флексии, аналогично правому голеностопу. Этот баланс помогает поддерживать симметричную и эффективную походку, минимизируя риск травм, связанных с дисбалансом."}, "text_left_knee_angle": {"en": "The left knee should flex to about 40° upon foot strike and extend to roughly 180° during take-off. This consistency with the right knee ensures balanced load distribution and effective shock absorption throughout the step cycle.", "ru": "Левое колено должно сгибаться до примерно 40° при ударе ноги о землю и разгибаться до 180° в фазе отрыва. Это согласование с правым коленом обеспечит сбалансированное распределение нагрузки и эффективное поглощение ударов."}, "text_hip_angle": {"en": "Your hip angle should vary between 10° flexion and 20° extension throughout the step cycle. Maintaining this range allows for an effective transfer of energy and appropriate shock absorption, aiding in both performance and injury prevention.", "ru": "Угол сгибания бедра должен варьироваться от 10° при сгибании до 20° при разгибании в течение цикла шага. Поддержание этого диапазона способствует эффективной передаче энергии и надлежащему поглощению ударов, что способствует улучшению производительности и предотвращению травм."}, "text_summary": {"en": "To enhance your running performance, focus on increasing your cadence to around 180 steps per minute, which helps improve speed and reduce impact forces. Balance your gait by ensuring symmetrical ankle and knee angles. Opt for neutral running shoes with good cushioning and a heel drop between 8-10mm, like the Asics Gel-Nimbus, to provide sufficient support and shock absorption.", "ru": "Для улучшения ваших результатов в беге сосредоточьтесь на увеличении частоты шагов до примерно 180 шагов в минуту, что помогает повысить скорость и уменьшить ударные нагрузки. Сбалансируйте свою походку, обеспечив симметричные углы голеностопных и коленных суставов. Выберите нейтральные беговые кроссовки с хорошей амортизацией и перепадом пятка-носок между 8-10 мм, такие как Asics Gel-Nimbus, чтобы обеспечить достаточную поддержку и поглощение ударов."}}}}, "400": {"description": "Bad Request - Invalid parameters or token.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message describing the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Access token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - Admin privileges required to generate recommendations.", "schema": {"type": "object", "properties": {"error": {"description": "User must have admin privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - Session data not found or user does not have a valid payment plan.", "schema": {"type": "object", "properties": {"error": {"description": "Session not found or invalid payment plan.", "type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/running/sessions/{session_id}/report-comments/": {"get": {"operationId": "running_sessions_report-comments_list", "summary": "Retrieve Session Comments", "description": "Retrieves the report comments for a specific session. \n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session for which comments are requested.\n\n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON object containing language-specific comments. For example:\n\n- **text_summary** *(object)*: Contains summary comments in different languages.\n    - **en** *(string)*: Summary in English.\n    - **ru** *(string)*: Summary in Russian.\n- **text_contact_angle** *(object)*: Contact angle comments.\n- **text_push_angle** *(object)*: Push angle comments.\n- **text_knee_ankle** *(object)*: Knee-ankle comments.\n- **text_hip_angle** *(object)*: Hip angle comments.\n- **text_left_ankle_angle** *(object)*: Left ankle angle comments.\n- **text_left_knee_angle** *(object)*: Left knee angle comments.\n- **text_right_ankle_angle** *(object)*: Right ankle angle comments.\n- **text_right_knee_angle** *(object)*: Right knee angle comments.\n\n### Error Handling\n\n- **400 Bad Request**: Invalid request parameters.\n- **401 Unauthorized**: Missing or invalid access token.\n- **403 Forbidden**: Insufficient privileges (admin access required).\n- **404 Not Found**: Comments not found for the given session.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The unique session identifier.", "required": true, "type": "string"}], "responses": {"200": {"description": "Session comments retrieved successfully.", "schema": {"type": "object", "properties": {"text_summary": {"description": "Summary comments in multiple languages.", "type": "object", "properties": {"en": {"description": "Summary in English.", "type": "string"}, "ru": {"description": "Summary in Russian.", "type": "string"}}}, "text_contact_angle": {"description": "Contact angle comments.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_push_angle": {"description": "Push angle comments.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_knee_ankle": {"description": "Knee ankle comments.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_hip_angle": {"description": "Hip angle comments.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_left_ankle_angle": {"description": "Left ankle angle comments.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_left_knee_angle": {"description": "Left knee angle comments.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_right_ankle_angle": {"description": "Right ankle angle comments.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_right_knee_angle": {"description": "Right knee angle comments.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}}}, "examples": {"application/json": {"text_summary": {"en": "Summary text in English", "ru": "Summary text in Russian"}, "text_contact_angle": {"en": "Contact angle text in English", "ru": "Contact angle text in Russian"}, "text_push_angle": {"en": "Push angle text in English", "ru": "Push angle text in Russian"}, "text_knee_ankle": {"en": "Knee ankle text in English", "ru": "Knee ankle text in Russian"}, "text_hip_angle": {"en": "Hip angle text in English", "ru": "Hip angle text in Russian"}, "text_left_ankle_angle": {"en": "Left ankle angle text in English", "ru": "Left ankle angle text in Russian"}, "text_left_knee_angle": {"en": "Left knee angle text in English", "ru": "Left knee angle text in Russian"}, "text_right_ankle_angle": {"en": "Right ankle angle text in English", "ru": "Right ankle angle text in Russian"}, "text_right_knee_angle": {"en": "Right knee angle text in English", "ru": "Right knee angle text in Russian"}}}}, "400": {"description": "Bad Request - Error getting comments due to invalid parameters.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Error getting comments"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - Admin access is required.", "schema": {"type": "object", "properties": {"error": {"description": "User does not have admin privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - Comments not found for the given session.", "schema": {"type": "object", "properties": {"error": {"description": "Comments not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Comments not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred."}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "post": {"operationId": "running_sessions_report-comments_create", "summary": "Update Session Comments", "description": "Updates the report comments for a specific session. The request body must include the comment fields for various aspects of the session (e.g., summary, contact angle, push angle, etc.) in multiple languages. \n\n### Request Body (JSON)\n\nThe following fields are expected (all fields are objects with language keys):\n\n- **text_summary** *(object)*: Summary comments (e.g., `{'en': 'English text', 'ru': 'Russian text'}`).\n- **text_contact_angle** *(object)*: Contact angle comments.\n- **text_push_angle** *(object)*: Push angle comments.\n- **text_knee_ankle** *(object)*: Knee ankle comments.\n- **text_hip_angle** *(object)*: Hip angle comments.\n- **text_left_ankle_angle** *(object)*: Left ankle angle comments.\n- **text_left_knee_angle** *(object)*: Left knee angle comments.\n- **text_right_ankle_angle** *(object)*: Right ankle angle comments.\n- **text_right_knee_angle** *(object)*: Right knee angle comments.\n\n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON object with:\n- **message** *(string)*: A confirmation message indicating that comments were updated.\n\n### Error Handling\n\n- **400 Bad Request**: If the input data is missing or invalid.\n- **401 Unauthorized**: If the access token is missing or invalid.\n- **403 Forbidden**: If the user does not have admin privileges.\n- **500 Internal Server Error**: If an unexpected error occurs on the server.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"type": "object", "properties": {"text_summary": {"description": "Summary comments in different languages.", "type": "object", "properties": {"en": {"description": "English summary text.", "type": "string"}, "ru": {"description": "Russian summary text.", "type": "string"}}}, "text_contact_angle": {"description": "Contact angle comments in different languages.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_push_angle": {"description": "Push angle comments in different languages.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_knee_ankle": {"description": "Knee ankle comments in different languages.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_hip_angle": {"description": "Hip angle comments in different languages.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_left_ankle_angle": {"description": "Left ankle angle comments in different languages.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_left_knee_angle": {"description": "Left knee angle comments in different languages.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_right_ankle_angle": {"description": "Right ankle angle comments in different languages.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}, "text_right_knee_angle": {"description": "Right knee angle comments in different languages.", "type": "object", "properties": {"en": {"description": "English text.", "type": "string"}, "ru": {"description": "Russian text.", "type": "string"}}}}, "example": {"text_summary": {"en": "Summary text in English", "ru": "Summary text in Russian"}, "text_contact_angle": {"en": "Contact angle text in English", "ru": "Contact angle text in Russian"}, "text_push_angle": {"en": "Push angle text in English", "ru": "Push angle text in Russian"}, "text_knee_ankle": {"en": "Knee ankle text in English", "ru": "Knee ankle text in Russian"}, "text_hip_angle": {"en": "Hip angle text in English", "ru": "Hip angle text in Russian"}, "text_left_ankle_angle": {"en": "Left ankle angle text in English", "ru": "Left ankle angle text in Russian"}, "text_left_knee_angle": {"en": "Left knee angle text in English", "ru": "Left knee angle text in Russian"}, "text_right_ankle_angle": {"en": "Right ankle angle text in English", "ru": "Right ankle angle text in Russian"}, "text_right_knee_angle": {"en": "Right knee angle text in English", "ru": "Right knee angle text in Russian"}}}}], "responses": {"200": {"description": "Comments updated successfully.", "schema": {"required": ["message"], "type": "object", "properties": {"message": {"description": "A confirmation message indicating the comments were updated.", "type": "string"}}}, "examples": {"application/json": {"message": "Comments updated"}}}, "400": {"description": "Bad Request - Error updating comments due to missing or invalid data.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Error updating comments"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - Admin privileges are required.", "schema": {"type": "object", "properties": {"error": {"description": "User does not have admin access.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "delete": {"operationId": "running_sessions_report-comments_delete", "summary": "Delete Report Comments", "description": "Deletes all report comments for a given session. \n\n### Request\n\n- **Path Parameter**:\n    - **session_id** *(string, required)*: The unique identifier of the session whose report comments will be deleted.\n\n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON object with:\n- **message** *(string)*: A success message indicating that the comments have been deleted.\n\n### Error Handling\n\n- **400 Bad Request**: Indicates that the request parameters are invalid or that an error occurred during deletion.\n- **401 Unauthorized**: The access token is missing or invalid.\n- **403 Forbidden**: The user does not have admin privileges to delete report comments.\n- **404 Not Found**: The session or report comments were not found.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The unique identifier of the session for which report comments will be deleted.", "required": true, "type": "string"}], "responses": {"200": {"description": "Comments deleted successfully.", "schema": {"required": ["message"], "type": "object", "properties": {"message": {"description": "A message indicating that the comments were deleted successfully.", "type": "string"}}}, "examples": {"application/json": {"message": "Comments deleted"}}}, "400": {"description": "Bad Request - Error deleting comments (e.g., invalid parameters).", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message explaining why deletion failed.", "type": "string"}}}, "examples": {"application/json": {"error": "Error deleting comments"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "An error message indicating that the token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have admin privileges to delete report comments.", "schema": {"type": "object", "properties": {"error": {"description": "An error message indicating that admin access is required.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - The session or report comments were not found.", "schema": {"type": "object", "properties": {"error": {"description": "An error message indicating that the session or comments were not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Session not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/running/sessions/{session_id}/report/": {"post": {"operationId": "running_sessions_report_create", "summary": "Retrieve Report Analysis Images (Deprecated)", "description": "Retrieves (or generates) analysis images for a specific running session. Requires a valid payment plan and admin privileges.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session.\n\n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON object containing image URLs in both English and Russian for each angle or position:\n\n- **hip_angle** *(object)*:\n  - **en** *(string, URI)*: Hip angle image in English.\n  - **ru** *(string, URI)*: Hip angle image in Russian.\n- **left_ankle_angle** *(object)*:\n  - **en** *(string, URI)*: Left ankle angle image in English.\n  - **ru** *(string, URI)*: Left ankle angle image in Russian.\n- **left_knee_angle** *(object)*:\n  - **en** *(string, URI)*: Left knee angle image in English.\n  - **ru** *(string, URI)*: Left knee angle image in Russian.\n- **right_ankle_angle** *(object)*:\n  - **en** *(string, URI)*: Right ankle angle image in English.\n  - **ru** *(string, URI)*: Right ankle angle image in Russian.\n- **right_knee_angle** *(object)*:\n  - **en** *(string, URI)*: Right knee angle image in English.\n  - **ru** *(string, URI)*: Right knee angle image in Russian.\n- **positions** *(object)*:\n  - **en** *(string, URI)*: Positions image in English.\n  - **ru** *(string, URI)*: Positions image in Russian.\n\n### Error Handling\n\n- **400 Bad Request**: Invalid parameters or admin UID.\n- **401 Unauthorized**: Missing or invalid access token.\n- **403 Forbidden**: Payment plan not supported or user lacks admin privileges.\n- **404 Not Found**: Images could not be generated or session not found.\n- **500 Internal Server Error**: An unexpected error occurred.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The session ID for which the report images are retrieved (or generated).", "required": true, "type": "string"}], "responses": {"200": {"description": "Report analysis images retrieved or generated successfully.", "schema": {"type": "object", "properties": {"hip_angle": {"description": "Hip angle images in English and Russian.", "type": "object", "properties": {"en": {"description": "URL for the English hip angle image.", "type": "string", "format": "uri"}, "ru": {"description": "URL for the Russian hip angle image.", "type": "string", "format": "uri"}}}, "left_ankle_angle": {"description": "Left ankle angle images in English and Russian.", "type": "object", "properties": {"en": {"description": "URL for the English left ankle angle image.", "type": "string", "format": "uri"}, "ru": {"description": "URL for the Russian left ankle angle image.", "type": "string", "format": "uri"}}}, "left_knee_angle": {"description": "Left knee angle images in English and Russian.", "type": "object", "properties": {"en": {"description": "URL for the English left knee angle image.", "type": "string", "format": "uri"}, "ru": {"description": "URL for the Russian left knee angle image.", "type": "string", "format": "uri"}}}, "right_ankle_angle": {"description": "Right ankle angle images in English and Russian.", "type": "object", "properties": {"en": {"description": "URL for the English right ankle angle image.", "type": "string", "format": "uri"}, "ru": {"description": "URL for the Russian right ankle angle image.", "type": "string", "format": "uri"}}}, "right_knee_angle": {"description": "Right knee angle images in English and Russian.", "type": "object", "properties": {"en": {"description": "URL for the English right knee angle image.", "type": "string", "format": "uri"}, "ru": {"description": "URL for the Russian right knee angle image.", "type": "string", "format": "uri"}}}, "positions": {"description": "Positions images in English and Russian.", "type": "object", "properties": {"en": {"description": "URL for the English positions image.", "type": "string", "format": "uri"}, "ru": {"description": "URL for the Russian positions image.", "type": "string", "format": "uri"}}}}}, "examples": {"application/json": {"hip_angle": {"en": "https://storage.googleapis.com/.../hip_angle_en.png", "ru": "https://storage.googleapis.com/.../hip_angle_ru.png"}, "left_ankle_angle": {"en": "https://storage.googleapis.com/.../left_ankle_angle_en.png", "ru": "https://storage.googleapis.com/.../left_ankle_angle_ru.png"}, "left_knee_angle": {"en": "https://storage.googleapis.com/.../left_knee_angle_en.png", "ru": "https://storage.googleapis.com/.../left_knee_angle_ru.png"}, "right_ankle_angle": {"en": "https://storage.googleapis.com/.../right_ankle_angle_en.png", "ru": "https://storage.googleapis.com/.../right_ankle_angle_ru.png"}, "right_knee_angle": {"en": "https://storage.googleapis.com/.../right_knee_angle_en.png", "ru": "https://storage.googleapis.com/.../right_knee_angle_ru.png"}, "positions": {"en": "https://storage.googleapis.com/.../positions_en.png", "ru": "https://storage.googleapis.com/.../positions_ru.png"}}}}, "400": {"description": "Bad Request - Possibly invalid parameters or admin UID.", "schema": {"type": "object", "properties": {"error": {"description": "Details about why the request is invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - Payment plan not supported or lack of admin privileges.", "schema": {"type": "object", "properties": {"error": {"description": "Insufficient privileges or unsupported payment plan.", "type": "string"}}}, "examples": {"application/json": {"error": "Payment plan not supported."}}}, "404": {"description": "Not Found - Unable to find or generate images, or session not found.", "schema": {"type": "object", "properties": {"error": {"description": "Reason why the requested resources could not be found.", "type": "string"}}}, "examples": {"application/json": {"error": "Data not found."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/running/sessions/{session_id}/summary/": {"post": {"operationId": "running_sessions_summary_create", "summary": "Generate Summary for a Session (Deprecated)", "description": "Generates a summary (in English and Russian) for a specific running session based on calculated metrics. Requires a valid admin token and a valid payment plan (Pro, Premium, Enterprise, or Standard).\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session for which to generate a summary.\n\n### Response Structure (HTTP 200)\n\nOn success, the response contains a `summary` object with:\n\n- **full_original** *(string)*: The complete original text containing both English and Russian segments.\n- **en** *(string)*: The English version of the summary.\n- **ru** *(string)*: The Russian version of the summary.\n- **token_used** *(integer, optional)*: The number of tokens used in the generative AI request.\n\n### Error Handling\n\n- **400 Bad Request**: Indicates invalid parameters (e.g., missing or invalid admin UID).\n- **401 Unauthorized**: The access token is missing or invalid.\n- **403 Forbidden**: The user does not have the required plan or admin privileges.\n- **404 Not Found**: Session data not found, or the user lacks a valid payment plan.\n- **500 Internal Server Error**: An unexpected server-side error occurred.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The session ID for which the summary will be generated.", "required": true, "type": "string"}], "responses": {"200": {"description": "Summary generated successfully.", "schema": {"type": "object", "properties": {"summary": {"description": "Object containing the summary text in multiple languages, plus the original text.", "required": ["full_original", "en", "ru"], "type": "object", "properties": {"full_original": {"description": "Full text containing both the English and Russian segments as returned by the generative AI.", "type": "string"}, "en": {"description": "The English version of the generated summary.", "type": "string"}, "ru": {"description": "The Russian version of the generated summary.", "type": "string"}, "token_used": {"description": "Number of tokens used by the generative AI request (optional).", "type": "integer"}}}}}, "examples": {"application/json": {"summary": {"full_original": "ENGLISH: Greetings! Your metrics showcase an impressive performance, ...\n\nRUSSIAN: Приветствую! Ваши показатели демонстрируют впечатляющую эффективность, ...", "en": "Greetings! Your metrics showcase an impressive performance...", "ru": "Приветствую! Ваши показатели демонстрируют впечатляющую эффективность...", "token_used": 653}}}}, "400": {"description": "Bad Request - Possibly invalid parameters or missing admin UID.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Access token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User does not have the required plan or privileges.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges or invalid plan.", "type": "string"}}}, "examples": {"application/json": {"error": "User does not have a valid payment plan."}}}, "404": {"description": "Not Found - Session data was not found or user does not have a valid payment plan.", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the missing session data or plan issue.", "type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - An unexpected server error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["running"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/session-management/sessions/": {"get": {"operationId": "session-management_sessions_list", "summary": "Retrieve User Sessions", "description": "Retrieves all sessions for the authenticated user, ordered by `created_at` in descending order.\n\n### Response Structure\n\nOn success (HTTP 200), the response is a JSON object containing:\n\n```json\n{\n  \"sessions\": {\n    \"<session_id>\": {\n      \"created_at\": {\n        \"date\": \"DD/MM/YYYY\",\n        \"time\": \"HH:MM AM/PM\"\n      },\n      \"video_url\": \"...\",\n      \"segments\": <number>,\n      \"analyzed_video_url\": \"...\",\n      \"activity\": \"...\",\n      \"title\": \"...\",\n      \"user_id\": \"...\",\n      \"user_name\": \"...\",\n      \"report_comments\": {...},\n      \"metrics\": {...}\n      // other session fields\n    },\n    \"...\": {...}\n  }\n}\n```\n\n### Error Handling\n- **400 Bad Request**: Invalid parameters (e.g., missing or malformed token).\n- **401 Unauthorized**: The token is missing or invalid.\n- **403 Forbidden**: The user lacks admin privileges.\n- **404 Not Found**: Unable to retrieve sessions (e.g., no sessions found).\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [], "responses": {"200": {"description": "User sessions retrieved successfully.", "schema": {"type": "object", "properties": {"sessions": {"description": "A dictionary of sessions keyed by their session IDs.", "type": "object", "additionalProperties": {"type": "object"}}}}, "examples": {"application/json": {"sessions": {"5d5c8d7fcd6945f2936ced84f9a20562": {"video_url": "...", "analyzed_video_url": "...", "segments": 10, "created_at": {"date": "10/01/2025", "time": "04:39 PM"}, "exercise": "clean_and_jerk", "user_name": "Lee Jhon", "report_comments": {}, "activity": "Weightlifting", "user_id": "hWWb9eK3DLWaGHCIs7ltDB8474u1", "title": "new-test-w", "metrics": {}}, "eb10229c6bf04c4394b547201d1a96f7": {"video_url": "...", "analyzed_video_url": "...", "segments": 5, "created_at": {"date": "26/12/2024", "time": "08:48 PM"}, "user_name": "Suzan", "activity": "Vertical Jump", "user_id": "hLT10sKbCumCUIsNAk3h", "title": "djias-jump", "report_comments": {}, "metrics": {}}}}}}, "400": {"description": "Bad Request - Invalid parameters or missing token.", "schema": {"type": "object", "properties": {"error": {"description": "Explanation of the bad request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid or missing token."}}}, "401": {"description": "Unauthorized - The token is missing or invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Error message for authentication failure.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user lacks the required privileges.", "schema": {"type": "object", "properties": {"error": {"description": "User is not permitted to access sessions.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - Sessions could not be retrieved (e.g., none found).", "schema": {"type": "object", "properties": {"error": {"description": "Error message if sessions are not found.", "type": "string"}}}, "examples": {"application/json": {"error": "No sessions found for this user."}}}, "500": {"description": "Internal Server Error - An unexpected issue occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message for server-side failures.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error>"}}}}, "tags": ["session-management"], "security": [{"Bearer": []}]}, "parameters": []}, "/session-management/sessions/filter/": {"get": {"operationId": "session-management_sessions_filter_list", "summary": "Fetch Filtered Sessions", "description": "Retrieves user sessions filtered by optional parameters such as date range, activity type, title, or user ID. It also supports pagination via `start_after_id` or `end_before_id` when no filters are applied.\n\n### Query Parameters\n- **start_after_id** *(string, optional)*: Session ID after which to start pagination. Used only if no filters are set.\n- **end_before_id** *(string, optional)*: Session ID before which to end pagination. Used only if no filters are set.\n- **limit** *(integer, optional)*: Maximum number of sessions to fetch (default=10).\n- **activity** *(string, optional)*: Filter by activity type (e.g., 'Running', 'Vertical Jump').\n- **start_date** *(string, optional, format: dd/mm/yyyy)*: Filter sessions created on or after this date.\n- **end_date** *(string, optional, format: dd/mm/yyyy)*: Filter sessions created on or before this date.\n- **title** *(string, optional)*: Filter by sessions whose title contains this substring (case-insensitive).\n- **user_id** *(string, optional)*: Filter by user ID stored in the session.\n\n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON object containing:\n- **query_count** *(integer)*: The total number of matching sessions.\n- **sessions** *(object)*: A dictionary of session documents keyed by their session IDs.\n- **first_doc_id** *(string or null)*: The ID of the first document in the returned set.\n- **last_doc_id** *(string or null)*: The ID of the last document in the returned set.\n\nEach session object may include fields such as `video_url`, `activity`, `created_at`, `title`, etc., plus nested data (e.g. `report_comments`, `metrics`). Note that `created_at` is returned as a nested object with `date` and `time`.\n\n### Error Handling\n\n- **400 Bad Request**: Invalid parameters (e.g., malformed date string) or missing user token.\n- **401 Unauthorized**: The token is missing or invalid.\n- **403 Forbidden**: The user lacks admin privileges.\n- **404 Not Found**: No matching sessions found.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "start_after_id", "in": "query", "description": "Session ID after which to start pagination (only used if no filters are set).", "required": false, "type": "string"}, {"name": "end_before_id", "in": "query", "description": "Session ID before which to end pagination (only used if no filters are set).", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "Maximum number of sessions to fetch (default=10).", "required": false, "type": "integer"}, {"name": "activity", "in": "query", "description": "Activity type filter (e.g., 'Running' or 'Vertical Jump').", "required": false, "type": "string"}, {"name": "start_date", "in": "query", "description": "Filter sessions created on or after this date (dd/mm/yyyy).", "required": false, "type": "string"}, {"name": "end_date", "in": "query", "description": "Filter sessions created on or before this date (dd/mm/yyyy).", "required": false, "type": "string"}, {"name": "title", "in": "query", "description": "Filter by sessions whose title contains this substring (case-insensitive).", "required": false, "type": "string"}, {"name": "user_id", "in": "query", "description": "Filter by user ID stored in the session document.", "required": false, "type": "string"}], "responses": {"200": {"description": "Filtered sessions retrieved successfully.", "schema": {"type": "object", "properties": {"query_count": {"description": "Total matching sessions.", "type": "integer"}, "sessions": {"description": "Dictionary of session documents keyed by their IDs.", "type": "object", "additionalProperties": {"type": "object"}}, "first_doc_id": {"description": "ID of the first session in the result or null if none.", "type": "string"}, "last_doc_id": {"description": "ID of the last session in the result or null if none.", "type": "string"}}}, "examples": {"application/json": {"query_count": 111, "sessions": {"5d5c8d7fcd6945f2936ced84f9a20562": {"activity": "Weightlifting", "created_at": {"date": "10/01/2025", "time": "04:39 PM"}, "analyzed_video_url": "...", "video_url": "...", "segments": 10, "exercise": "clean_and_jerk", "user_name": "Lee Jhon", "report_comments": {"...": "..."}, "metrics": {"...": "..."}, "user_status": "admin", "user_id": "hWWb9eK3DLWaGHCIs7ltDB8474u1", "title": "new-test-w"}, "...": {"...": "..."}}, "first_doc_id": "5d5c8d7fcd6945f2936ced84f9a20562", "last_doc_id": "bd977842e3e64845991b77d78db8b7e9"}}}, "400": {"description": "Bad Request - Potentially invalid parameters (malformed date, etc.) or missing user token.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the reason for the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid date format (expected dd/mm/yyyy)."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Authentication error.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user lacks admin privileges.", "schema": {"type": "object", "properties": {"error": {"description": "Authorization error.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - No matching sessions found or resource unavailable.", "schema": {"type": "object", "properties": {"error": {"description": "Message indicating the sessions could not be retrieved.", "type": "string"}}}, "examples": {"application/json": {"error": "No sessions found for the given criteria."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message for server-side issues.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "tags": ["session-management"], "security": [{"Bearer": []}]}, "parameters": []}, "/session-management/sessions/{session_id}": {"put": {"operationId": "session-management_sessions_update", "summary": "Update Session Data", "description": "Updates session details (such as title and created_at timestamp) for a specific session. Requires admin privileges and a valid payment plan.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique session identifier.\n\n### Request Body (JSON)\n- **title** *(string, optional)*: The updated title for the session.\n- **created_at** *(string, optional, format: `YYYY-MM-DD HH:MM:SS`)*: The updated session timestamp.\n\n### Response Structure\n\nOn success, the response contains:\n- **success** *(string)*: Confirmation that the session was updated.\n\n### Error Responses\n- **400 Bad Request**: Invalid request parameters or missing required data.\n- **401 Unauthorized**: Missing or invalid access token.\n- **403 Forbidden**: Insufficient privileges or invalid payment plan.\n- **404 Not Found**: Session not found.\n- **500 Internal Server Error**: An unexpected error occurred.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"type": "object", "properties": {"title": {"description": "New title for the session.", "type": "string"}, "created_at": {"description": "Updated session timestamp in `YYYY-MM-DD HH:MM:SS` format.", "type": "string", "format": "date-time"}}, "example": {"title": "Updated Running Session", "created_at": "2025-02-06 14:30:00"}}}, {"name": "session_id", "in": "path", "description": "The session ID for which details will be updated.", "required": true, "type": "string"}], "responses": {"200": {"description": "Session updated successfully.", "schema": {"type": "object", "properties": {"success": {"description": "Confirmation message.", "type": "string"}}}, "examples": {"application/json": {"success": "session_123 was successfully updated"}}}, "400": {"description": "Bad Request - Invalid parameters or missing data.", "schema": {"type": "object", "properties": {"error": {"description": "Error message explaining why the request was invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating that a valid Bearer token was not provided.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have sufficient privileges to retrieve total metrics.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient permissions.", "type": "string"}}}, "examples": {"application/json": {"error": "Access denied."}}}, "404": {"description": "Not Found - The specified session ID does not exist.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating session was not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Session session_123 not found"}}}, "500": {"description": "Internal Server Error - An unexpected issue occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Error message for debugging.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error>"}}}}, "tags": ["session-management"], "security": [{"Bearer": []}]}, "delete": {"operationId": "session-management_sessions_delete", "summary": "Delete a Session", "description": "Deletes a specified session and all associated resources, including session data, video files, subcollections, and reports.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique session identifier.\n\n### Response Structure\n\nOn success, the response contains:\n- **success** *(string)*: Confirmation that the session was deleted.\n\n### Error Responses\n- **400 Bad Request**: Invalid request parameters.\n- **401 Unauthorized**: Token is invalid or missing.\n- **403 Forbidden**: User does not have admin privileges.\n- **404 Not Found**: Session not found.\n- **500 Internal Server Error**: An unexpected error occurred.", "parameters": [{"name": "session_id", "in": "path", "description": "The session ID to be deleted.", "required": true, "type": "string"}], "responses": {"200": {"description": "Session deleted successfully.", "schema": {"type": "object", "properties": {"success": {"description": "Confirmation message.", "type": "string"}}}, "examples": {"application/json": {"success": "session_123 was successfully deleted"}}}, "400": {"description": "Bad Request - Invalid parameters or missing data.", "schema": {"type": "object", "properties": {"error": {"description": "Error message explaining why the request was invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID"}}}, "401": {"description": "Unauthorized - Token is invalid or expired.", "schema": {"type": "object", "properties": {"error": {"description": "Authentication error.", "type": "string"}}}, "examples": {"application/json": {"error": "Unauthorized: Token is missing or invalid"}}}, "403": {"description": "Forbidden - User lacks necessary privileges.", "schema": {"type": "object", "properties": {"error": {"description": "Authorization error.", "type": "string"}}}, "examples": {"application/json": {"error": "Forbidden: You must be an admin to delete this session"}}}, "404": {"description": "Not Found - The specified session ID does not exist.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating session was not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Session session_123 not found"}}}, "500": {"description": "Internal Server Error - An unexpected issue occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Error message for debugging.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error>"}}}}, "tags": ["session-management"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/session-management/sessions/{session_id}/analyzed-video/": {"get": {"operationId": "session-management_sessions_analyzed-video_list", "summary": "Retrieve Analyzed Video URL", "description": "Retrieves the analyzed video URL for a specific session, or attempts to create it if it does not exist.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session.\n\n### Query Parameters\nThese optional flags determine which kind of analysis to perform if the video doesn't exist:\n- **is_jump** *(boolean, optional)*: Indicates whether this session is for jump analysis.\n- **is_weight** *(boolean, optional)*: Indicates whether this session is for weightlifting analysis.\n\n### Response (HTTP 200)\n\nReturns a JSON object with an `analyzed_video_url` key if successful:\n\n```json\n{\n  \"analyzed_video_url\": \"https://storage.googleapis.com/.../analyzed_video.mp4\"\n}\n```\n\n### Error Handling\n\n- **400 Bad Request**: Invalid parameters (e.g., missing or invalid admin UID).\n- **401 Unauthorized**: Token is missing or invalid.\n- **403 Forbidden**: The user does not have the right privileges or plan.\n- **404 Not Found**: The session data or resources could not be found.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The session ID for which to retrieve or create an analyzed video.", "required": true, "type": "string"}, {"name": "is_jump", "in": "query", "description": "Indicates whether this session is for jump analysis.", "required": false, "type": "boolean"}, {"name": "is_weight", "in": "query", "description": "Indicates whether this session is for weightlifting analysis.", "required": false, "type": "boolean"}], "responses": {"200": {"description": "Analyzed video URL retrieved successfully.", "schema": {"type": "object", "properties": {"analyzed_video_url": {"description": "URL of the analyzed video.", "type": "string", "format": "uri"}}}, "examples": {"application/json": {"analyzed_video_url": "https://storage.googleapis.com/.../analyzed_video.mp4"}}}, "400": {"description": "Bad Request - Possibly invalid parameters.", "schema": {"description": "Error schema for invalid requests (e.g., malformed UID)", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID"}}}, "401": {"description": "Unauthorized - Token is invalid or missing.", "schema": {"description": "Error schema for missing or invalid token", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User lacks privileges or plan.", "schema": {"description": "Error schema for forbidden access", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "User does not have a valid payment plan"}}}, "404": {"description": "Not Found - Session data or resource not found.", "schema": {"description": "Error schema for missing session or resource", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - A server-side error occurred.", "schema": {"description": "Error schema for unexpected server failures", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error>"}}}}, "tags": ["session-management"], "security": [{"Bearer": []}]}, "post": {"operationId": "session-management_sessions_analyzed-video_create", "summary": "Upload/Generate Analyzed Video", "description": "Uploads or generates an analyzed video for a specific session, returning its URL.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session.\n\n### Request Body (JSON)\n```json\n{\n  \"is_jump\": true,\n  \"is_weight\": false\n}\n```\n- **is_jump** *(boolean, optional)*: If true, treat this as a jump session.\n- **is_weight** *(boolean, optional)*: If true, treat this as a weightlifting session.\n\n### Response Structure (HTTP 200)\nOn success, returns a JSON object with the `analyzed_video_url`:\n\n```json\n{\n  \"analyzed_video_url\": \"https://storage.googleapis.com/.../analyzed_video.mp4\"\n}\n```\n### Error Handling\n\n- **400 Bad Request**: Invalid parameters or session already analyzed.\n- **401 Unauthorized**: Token is missing or invalid.\n- **403 Forbidden**: The user does not have a valid plan.\n- **404 Not Found**: Session data not found.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"type": "object", "properties": {"is_jump": {"description": "Whether this session is jump-related.", "type": "boolean"}, "is_weight": {"description": "Whether this session is weightlifting-related.", "type": "boolean"}}, "example": {"is_jump": true, "is_weight": false}}}, {"name": "session_id", "in": "path", "description": "The session ID for which to upload/generate an analyzed video.", "required": true, "type": "string"}], "responses": {"200": {"description": "Analyzed video URL generated or updated successfully.", "schema": {"type": "object", "properties": {"analyzed_video_url": {"description": "URL of the newly generated or updated analyzed video.", "type": "string", "format": "uri"}}}, "examples": {"application/json": {"analyzed_video_url": "https://storage.googleapis.com/.../analyzed_video.mp4"}}}, "400": {"description": "Bad Request - Possibly invalid session data or video already analyzed.", "schema": {"description": "Error schema for invalid requests or already analyzed video", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "Video already analyzed"}}}, "401": {"description": "Unauthorized - The token is missing or invalid.", "schema": {"description": "Error schema for missing or invalid token", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have a valid payment plan.", "schema": {"description": "Error schema for insufficient plan privileges", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "User does not have a valid payment plan"}}}, "404": {"description": "Not Found - Session not found or creation failed.", "schema": {"description": "Error schema for missing session data or resource", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "Session data not found"}}}, "500": {"description": "Internal Server Error - A server-side error occurred.", "schema": {"description": "Error schema for unexpected server failures", "type": "object", "properties": {"error": {"type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error>"}}}}, "tags": ["session-management"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/user-management/organization-status/": {"get": {"operationId": "user-management_organization-status_list", "summary": "Retrieve Organization Status", "description": "### Retrieve Organization Status\n\nThis endpoint allows an authenticated user (admin or sub-admin) to retrieve organization status details. The response includes various details such as the session number, user UID, role, payment type, and associated activities. \n\n**Response Structure (HTTP 200):**\n- **session_number** *(integer)*: The number of sessions associated with the organization.\n- **uid** *(string)*: The unique identifier of the authenticated user.\n- **role** *(string)*: The role of the user, which can be either `admin` or `sub_admin`.\n- **payment_type** *(string)*: The type of payment plan for the organization.\n- **activity** *(array of strings)*: A list of activities associated with the organization.\n- **companyName** *(string or null)*: The name of the company, if available.\n- **name** *(string or null)*: The name of the user.\n\n**Example Successful Response:**\n```json\n{\n  \"session_number\": 50,\n  \"uid\": \"aB3xYz1PqW8LmTnK4R9VfJ0gHsCd\",\n  \"role\": \"admin\",\n  \"payment_type\": \"Enterprise\",\n  \"activity\": [\"Running\", \"Weightlifting\", \"VerticalJump\"],\n  \"companyName\": \"Apple\",\n  \"name\": \"Username\"\n}\n```\n\n**Notes:**\n- A valid Bearer token is required to access this endpoint.\n- If the organization status is not found or the data is invalid (e.g. missing session_number), a 404 error is returned.", "parameters": [], "responses": {"200": {"description": "Organization status details retrieved successfully.", "schema": {"required": ["session_number", "uid", "role", "payment_type", "activity", "companyName", "name"], "type": "object", "properties": {"session_number": {"description": "The number of sessions associated with the organization.", "type": "integer"}, "uid": {"description": "The unique identifier of the authenticated user.", "type": "string"}, "role": {"description": "The user's role; either 'admin' or 'sub_admin'.", "type": "string"}, "payment_type": {"description": "The payment plan type for the organization.", "type": "string"}, "activity": {"description": "A list of activities associated with the organization.", "type": "array", "items": {"description": "An activity associated with the organization.", "type": "string"}}, "companyName": {"description": "The name of the company, if available.", "type": "string", "nullable": true}, "name": {"description": "The name of the user, if available.", "type": "string", "nullable": true}}}, "examples": {"application/json": {"session_number": 50, "uid": "aB3xYz1PqW8LmTnK4R9VfJ0gHsCd", "role": "admin", "payment_type": "Enterprise", "activity": ["Running", "Weightlifting", "VerticalJump"], "companyName": "Apple", "name": "Username"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating authentication failure.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The requester does not have sufficient privileges.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - The user was not found or the organization status data is invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "User not found or invalid status data"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["user-management"], "security": [{"Bearer": []}]}, "parameters": []}, "/user-management/users/": {"get": {"operationId": "user-management_users_list", "summary": "Retrieve a Paginated List of Users", "description": "### Retrieve a Paginated List of Users\n\nThis endpoint allows an administrator to retrieve a paginated list of users under their account. The response includes detailed information for each user such as personal attributes, contact details, and metadata related to their account.\n\n**Usage Example:**\nSend a `GET` request to `user-management/users/` with the appropriate Bearer token in the Authorization header.\n\n**Response Structure:**\n- **users** *(array)*: A list of user objects, where each object includes the following fields:\n  - **created_at** *(string, date-time)*: Timestamp when the user was created.\n  - **weight** *(number)*: The user’s weight.\n  - **age** *(string)*: The user’s age.\n  - **ycom** *(number)*: The user’s YCOM value.\n  - **height** *(number)*: The user’s height.\n  - **phone** *(string)*: The user’s phone number.\n  - **leg_length** *(number)*: The user’s leg length.\n  - **display_name** *(string)*: The user’s display name.\n  - **shoeSize** *(string)*: The user’s shoe size.\n  - **email** *(string)*: The user’s email address.\n  - **gender** *(string)*: The user’s gender.\n  - **brand** *(string)*: The brand associated with the user.\n  - **shoeModel** *(string)*: The model of the user’s shoe.\n  - **user_uid** *(string)*: The unique identifier for the user.\n\n**Notes:**\n- A valid Bearer token is required to access this endpoint.\n- If there are no users or an error occurs, an appropriate error message is returned.", "parameters": [], "responses": {"200": {"description": "Successfully retrieved the list of users.", "schema": {"required": ["users"], "type": "object", "properties": {"users": {"description": "An array of user objects.", "type": "array", "items": {"required": ["created_at", "weight", "age", "ycom", "height", "phone", "leg_length", "display_name", "shoeSize", "email", "gender", "brand", "shoeModel", "user_uid"], "type": "object", "properties": {"created_at": {"description": "Timestamp when the user was created.", "type": "string", "format": "date-time"}, "weight": {"description": "The user’s weight.", "type": "number"}, "age": {"description": "The user’s age.", "type": "string"}, "ycom": {"description": "The user’s YCOM value.", "type": "number"}, "height": {"description": "The user’s height.", "type": "number"}, "phone": {"description": "The user’s phone number.", "type": "string"}, "leg_length": {"description": "The user’s leg length.", "type": "number"}, "display_name": {"description": "The user’s display name.", "type": "string"}, "shoeSize": {"description": "The user’s shoe size.", "type": "string"}, "email": {"description": "The user’s email address.", "type": "string", "format": "email"}, "gender": {"description": "The user’s gender.", "type": "string"}, "brand": {"description": "Brand associated with the user.", "type": "string"}, "shoeModel": {"description": "Model of the user's shoe.", "type": "string"}, "user_uid": {"description": "Unique identifier for the user.", "type": "string"}}}}}}, "examples": {"application/json": {"users": [{"created_at": "2024-12-02T19:17:30.371Z", "weight": 79.78699276972904, "age": "30", "ycom": 1.0134599999999998, "height": 177.79999999999998, "phone": "92039023232", "leg_length": 0.9627869999999997, "display_name": "User2", "shoeSize": "8", "email": "User2@example.com", "gender": "Male", "brand": "Nike", "shoeModel": "Peak-smart", "user_uid": "hLT10sKbCumCUIsNAk3h"}, {"created_at": "2024-08-16T00:29:21.349Z", "weight": 70.0, "age": "22", "ycom": 0.9570000000000001, "height": 174.0, "phone": "8328889011", "leg_length": 0.90915, "display_name": "User1", "shoeSize": "6", "email": "user1@example.com", "gender": "Female", "brand": "Fabletics", "shoeModel": "The Everyday Sneaker II", "user_uid": "CMQe1HuAg4uMXqHE6dVO"}]}}}, "400": {"description": "Bad Request - Invalid query parameters or missing required data.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid parameters provided."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Unauthorized error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User does not have the required permissions.", "schema": {"type": "object", "properties": {"error": {"description": "Forbidden error message.", "type": "string"}}}, "examples": {"application/json": {"error": "You do not have permission to access this data."}}}, "404": {"description": "Not Found - Users not found or retrieval failed.", "schema": {"type": "object", "properties": {"error": {"description": "Error message when no users are found.", "type": "string"}}}, "examples": {"application/json": {"error": "Admin does not exist."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["user-management"], "security": [{"Bearer": []}]}, "post": {"operationId": "user-management_users_create", "summary": "Create a New User", "description": "### Create a New User\n\nThis endpoint allows an authenticated admin to create a new user under their account. The admin must provide the user's email and display name, and may optionally include a phone number. \n\n**Usage Example:**\nSend a `POST` request to `/users/` with a JSON payload containing the required fields. A valid Bearer token must be included in the Authorization header.\n\n**Request Body:**\n- **email** *(string, required)*: The email address of the new user.\n- **display_name** *(string, required)*: The display name of the new user.\n- **phone** *(string, optional)*: The phone number of the new user.\n\n**Response Structure:**\nUpon success (HTTP 201), the endpoint returns a JSON object with a `userData` field containing the following keys and data types:\n- **user_uid** *(string)*: A unique identifier for the newly created user.\n- **email** *(string)*: The email address of the user.\n- **display_name** *(string)*: The display name of the user.\n- **phone** *(string)*: The phone number of the user.\n\nIn case of an error (e.g., missing parameters, unauthorized access, or an internal error), a JSON object with an `error` field (string) is returned.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["email", "display_name"], "type": "object", "properties": {"email": {"description": "The email address of the user.", "type": "string", "format": "email"}, "display_name": {"description": "The display name of the user.", "type": "string"}, "phone": {"description": "The phone number of the user (optional).", "type": "string"}}, "example": {"email": "user@gmail.com", "display_name": "User", "phone": "932323232"}}}], "responses": {"201": {"description": "User created successfully.", "schema": {"type": "object", "properties": {"userData": {"required": ["user_uid", "email", "display_name", "phone"], "type": "object", "properties": {"user_uid": {"description": "Unique identifier of the newly created user.", "type": "string"}, "email": {"description": "Email address of the user.", "type": "string", "format": "email"}, "display_name": {"description": "Display name of the user.", "type": "string"}, "phone": {"description": "Phone number of the user.", "type": "string"}}}}}, "examples": {"application/json": {"userData": {"user_uid": "MYmC7MzsPBNU6uSQBnJ0", "email": "user@gmail.com", "display_name": "User", "phone": "932323232"}}}}, "400": {"description": "Bad Request - Missing or invalid parameters.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing the input issue.", "type": "string"}}}, "examples": {"application/json": {"error": "Email and display name are required."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User is not authorized to create users.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - User creation limit reached for Pro plan.", "schema": {"type": "object", "properties": {"error": {"description": "User creation limit reached for Pro plan", "type": "string"}}}, "examples": {"application/json": {"error": "User creation limit reached for Pro plan."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["user-management"], "security": [{"Bearer": []}]}, "put": {"operationId": "user-management_users_update", "summary": "Update User Information", "description": "### Update User Information\n\nThis endpoint allows an authenticated admin to update information for an existing user under their account. \n\n**Request Body:**\n- **user_uid** *(string, required)*: The unique identifier of the user to be updated.\n- **display_name** *(string, optional)*: The new display name for the user.\n- **email** *(string, optional)*: The new email address for the user.\n- **height** *(number, optional)*: The user's height.\n- **ycom** *(number, optional)*: The user's YCOM value.\n- **leg_length** *(number, optional)*: The user's leg length.\n- **weight** *(number, optional)*: The user's weight.\n- **gender** *(string, optional)*: The user's gender.\n- **age** *(string, optional)*: The user's age.\n- **shoeSize** *(string, optional)*: The user's shoe size.\n- **brand** *(string, optional)*: The brand associated with the user.\n- **shoeModel** *(string, optional)*: The model of the user's shoe.\n\n**Response Structure:**\nUpon success (HTTP 200), the endpoint returns a JSON object with the following field:\n- **message** *(string)*: Confirmation that the user information was updated successfully.\n\nIn case of an error (e.g., missing required fields, invalid data, or unauthorized access), a JSON object with an **error** field (string) is returned.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["user_uid"], "type": "object", "properties": {"user_uid": {"description": "Unique identifier of the user to update.", "type": "string"}, "display_name": {"description": "The new display name of the user (optional).", "type": "string"}, "email": {"description": "The new email address of the user (optional).", "type": "string", "format": "email"}, "height": {"description": "The user's height (optional).", "type": "number"}, "ycom": {"description": "The user's YCOM value (optional).", "type": "number"}, "leg_length": {"description": "The user's leg length (optional).", "type": "number"}, "weight": {"description": "The user's weight (optional).", "type": "number"}, "gender": {"description": "The user's gender (optional).", "type": "string"}, "age": {"description": "The user's age (optional).", "type": "string"}, "shoeSize": {"description": "The user's shoe size (optional).", "type": "string"}, "brand": {"description": "The brand associated with the user (optional).", "type": "string"}, "shoeModel": {"description": "The model of the user's shoe (optional).", "type": "string"}}, "example": {"user_uid": "DSdmk3mKd9Dmsmsd", "display_name": "User1", "email": "User1@example.com", "height": 175.0, "ycom": 0.95, "leg_length": 0.91, "weight": 68.0, "gender": "Female", "age": "23", "shoeSize": "7", "brand": "Adidas", "shoeModel": "UltraBoost"}}}], "responses": {"200": {"description": "User information updated successfully.", "schema": {"type": "object", "properties": {"message": {"description": "Confirmation message indicating successful update.", "type": "string"}}}, "examples": {"application/json": {"message": "User information updated successfully."}}}, "400": {"description": "Bad Request - Missing required fields or invalid data.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message describing what went wrong.", "type": "string"}}}, "examples": {"application/json": {"error": "User UID is required."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User is not authorized to update user information.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["user-management"], "security": [{"Bearer": []}]}, "delete": {"operationId": "user-management_users_delete", "summary": "Delete a User", "description": "### Delete a User\n\nThis endpoint allows an authenticated admin to delete a user from their account. The admin must supply the unique identifier of the user to be deleted in the request body.\n\n**Request Body:**\n- **user_uid** *(string, required)*: The unique identifier of the user to be deleted.\n\n**Response Structure:**\nUpon success (HTTP 200), the endpoint returns a JSON object with a **message** field of type string confirming the deletion. In case of an error (for example, if the user UID is missing, the user is not found, or an internal error occurs), a JSON object with an **error** field (string) is returned.", "parameters": [{"name": "data", "in": "body", "required": true, "schema": {"required": ["user_uid"], "type": "object", "properties": {"user_uid": {"description": "The unique identifier of the user to be deleted.", "type": "string"}}, "example": {"user_uid": "MYmC7MzsPBNU6uSQBnJ0"}}}], "responses": {"200": {"description": "User deleted successfully.", "schema": {"type": "object", "properties": {"message": {"description": "Confirmation message indicating that the user has been deleted.", "type": "string"}}}, "examples": {"application/json": {"message": "User with UID MYmC7MzsPBNU6uSQBnJ0 deleted from admin"}}}, "400": {"description": "Bad Request - Missing required user UID.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating that the user UID is missing.", "type": "string"}}}, "examples": {"application/json": {"error": "User UID is required."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User is not authorized to delete users.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - User not found or not under admin.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the user is not found under the admin's account.", "type": "string"}}}, "examples": {"application/json": {"error": "User is not under admin."}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["user-management"], "security": [{"Bearer": []}]}, "parameters": []}, "/user-management/users/filter/": {"get": {"operationId": "user-management_users_filter_list", "summary": "Filter and Paginate Users", "description": "### Filter and Paginate Users\n\nThis endpoint allows an authenticated admin to filter and paginate through the users under their account. You can optionally specify query parameters to control pagination:\n\n- **start_after_id** *(string, optional)*: The UID after which to start retrieving users (for forward pagination).\n- **end_before_id** *(string, optional)*: The UID before which to retrieve users (for backward pagination).\n- **limit** *(integer, optional)*: The maximum number of users to retrieve. Defaults to 5 if not provided.\n\n**Response Structure (HTTP 200):**\nThe response returns a JSON object with the following fields:\n\n- **query_count** *(integer)*: Total number of users under the admin.\n- **users** *(array)*: An array of user objects. Each user object contains:\n  - **created_at** *(string, date-time)*: User creation timestamp.\n  - **weight** *(number)*: The user's weight.\n  - **age** *(string)*: The user's age.\n  - **ycom** *(number)*: The user's YCOM value.\n  - **height** *(number)*: The user's height.\n  - **phone** *(string)*: The user's phone number.\n  - **leg_length** *(number)*: The user's leg length.\n  - **display_name** *(string)*: The user's display name.\n  - **shoeSize** *(string)*: The user's shoe size.\n  - **email** *(string)*: The user's email address.\n  - **gender** *(string)*: The user's gender.\n  - **brand** *(string)*: The brand associated with the user.\n  - **shoeModel** *(string)*: The model of the user's shoe.\n  - **user_uid** *(string)*: The unique identifier of the user.\n\n- **first_uid** *(string)*: The UID of the first user in the current page.\n- **last_uid** *(string)*: The UID of the last user in the current page.\n\n**Notes:**\n- A valid Bearer token is required.\n- If no users are found, an error message is returned with status code 404.", "parameters": [{"name": "start_after_id", "in": "query", "description": "The UID after which to start retrieving users (for forward pagination).", "required": false, "type": "string"}, {"name": "end_before_id", "in": "query", "description": "The UID before which to retrieve users (for backward pagination).", "required": false, "type": "string"}, {"name": "limit", "in": "query", "description": "The maximum number of users to retrieve. Must be a positive integer. Defaults to 5.", "required": false, "type": "integer", "default": 5, "minimum": 1}], "responses": {"200": {"description": "Successfully retrieved the filtered list of users.", "schema": {"required": ["query_count", "users", "first_uid", "last_uid"], "type": "object", "properties": {"query_count": {"description": "Total number of users under the admin.", "type": "integer"}, "users": {"description": "An array of user objects.", "type": "array", "items": {"required": ["created_at", "weight", "age", "ycom", "height", "phone", "leg_length", "display_name", "shoeSize", "email", "gender", "brand", "shoeModel", "user_uid"], "type": "object", "properties": {"created_at": {"description": "User creation timestamp.", "type": "string", "format": "date-time"}, "weight": {"description": "User's weight.", "type": "number"}, "age": {"description": "User's age.", "type": "string"}, "ycom": {"description": "User's YCOM value.", "type": "number"}, "height": {"description": "User's height.", "type": "number"}, "phone": {"description": "User's phone number.", "type": "string"}, "leg_length": {"description": "User's leg length.", "type": "number"}, "display_name": {"description": "User's display name.", "type": "string"}, "shoeSize": {"description": "User's shoe size.", "type": "string"}, "email": {"description": "User's email address.", "type": "string", "format": "email"}, "gender": {"description": "User's gender.", "type": "string"}, "brand": {"description": "The brand associated with the user.", "type": "string"}, "shoeModel": {"description": "The model of the user's shoe.", "type": "string"}, "user_uid": {"description": "Unique identifier for the user.", "type": "string"}}}}, "first_uid": {"description": "UID of the first user in the current page.", "type": "string"}, "last_uid": {"description": "UID of the last user in the current page.", "type": "string"}}}, "examples": {"application/json": {"query_count": 2, "users": [{"created_at": "2024-12-02T19:17:30.371Z", "weight": 79.79, "age": "30", "ycom": 1.01, "height": 177.8, "phone": "92039023232", "leg_length": 0.96, "display_name": "User1", "shoeSize": "8", "email": "user1@gmail.com", "gender": "Male", "brand": "Nike", "shoeModel": "Peak-smart", "user_uid": "idsKbCumCUIsNAk3h"}, {"created_at": "2024-08-16T00:29:21.349Z", "weight": 70.0, "age": "22", "ycom": 0.96, "height": 174.0, "phone": "8328889011", "leg_length": 0.91, "display_name": "User2", "shoeSize": "6", "email": "user2@gmail.com", "gender": "Female", "brand": "Fabletics", "shoeModel": "The Everyday Sneaker II", "user_uid": "slsKbCumCUIsNAk3h"}], "first_uid": "idsKbCumCUIsNAk3h", "last_uid": "slsKbCumCUIsNAk3h"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Authentication error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The requester does not have admin privileges.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - No users found under the admin or an error occurred during retrieval.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "No users found under admin"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred during retrieval.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Error fetching user records: <error details>"}}}}, "tags": ["user-management"], "security": [{"Bearer": []}]}, "parameters": []}, "/user-management/users/{user_uid}": {"get": {"operationId": "user-management_users_read", "summary": "Retrieve Details for a Specific User", "description": "### Retrieve User Details\n\nThis endpoint allows an authenticated admin to retrieve detailed information for a specific user under their account. The user is identified by the unique `user_uid` provided in the URL.\n\n**Path Parameter:**\n- **user_uid** *(string, required)*: The unique identifier of the user.\n\n**Response Structure (HTTP 200):**\nReturns a JSON object with the following fields and data types:\n\n- **created_at** *(string, date-time)*: Timestamp when the user was created.\n- **weight** *(number)*: The user's weight.\n- **age** *(string)*: The user's age.\n- **ycom** *(number)*: The user's YCOM value.\n- **height** *(number)*: The user's height.\n- **phone** *(string)*: The user's phone number.\n- **leg_length** *(number)*: The user's leg length.\n- **display_name** *(string)*: The user's display name.\n- **shoeSize** *(string)*: The user's shoe size.\n- **email** *(string)*: The user's email address.\n- **gender** *(string)*: The user's gender.\n- **brand** *(string)*: The brand associated with the user.\n- **shoeModel** *(string)*: The model of the user's shoe.\n- **user_uid** *(string)*: The unique identifier for the user.\n\n**Example Successful Response:**\n```json\n{\n  \"created_at\": \"2024-12-02T19:17:30.371Z\",\n  \"weight\": 79,\n  \"age\": \"30\",\n  \"ycom\": 1.1,\n  \"height\": 177,\n  \"phone\": \"92039023232\",\n  \"leg_length\": 0.9,\n  \"display_name\": \"User1\",\n  \"shoeSize\": \"8\",\n  \"email\": \"user1@gmail.com\",\n  \"gender\": \"Male\",\n  \"brand\": \"Nike\",\n  \"shoeModel\": \"Peak-smart\",\n  \"user_uid\": \"hoEwsdv2fsFs2fav\"\n}\n```\n\n**Notes:**\n- A valid Bearer token with admin privileges is required.\n- If the specified user does not exist or is not under the admin, a 404 error is returned.", "parameters": [{"name": "user_uid", "in": "path", "description": "The unique identifier of the user.", "required": true, "type": "string"}], "responses": {"200": {"description": "User details retrieved successfully.", "schema": {"required": ["created_at", "weight", "age", "ycom", "height", "phone", "leg_length", "display_name", "shoeSize", "email", "gender", "brand", "shoeModel", "user_uid"], "type": "object", "properties": {"created_at": {"description": "Timestamp when the user was created.", "type": "string", "format": "date-time"}, "weight": {"description": "The user's weight.", "type": "number"}, "age": {"description": "The user's age.", "type": "string"}, "ycom": {"description": "The user's YCOM value.", "type": "number"}, "height": {"description": "The user's height.", "type": "number"}, "phone": {"description": "The user's phone number.", "type": "string"}, "leg_length": {"description": "The user's leg length.", "type": "number"}, "display_name": {"description": "The user's display name.", "type": "string"}, "shoeSize": {"description": "The user's shoe size.", "type": "string"}, "email": {"description": "The user's email address.", "type": "string", "format": "email"}, "gender": {"description": "The user's gender.", "type": "string"}, "brand": {"description": "The brand associated with the user.", "type": "string"}, "shoeModel": {"description": "The model of the user's shoe.", "type": "string"}, "user_uid": {"description": "The unique identifier for the user.", "type": "string"}}}, "examples": {"application/json": {"created_at": "2024-12-02T19:17:30.371Z", "weight": 80, "age": "30", "ycom": 1.1, "height": 177, "phone": "92039023232", "leg_length": 0.9, "display_name": "User1", "shoeSize": "8.5", "email": "user1@example.com", "gender": "Male", "brand": "Nike", "shoeModel": "Ps-1", "user_uid": "mKbCumCUIsNAk3h"}}}, "400": {"description": "Bad Request - The user UID is missing or invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the problem.", "type": "string"}}}, "examples": {"application/json": {"error": "User UID is required."}}}, "401": {"description": "Unauthorized - Missing or invalid token.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that authentication failed.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The requester does not have admin privileges.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - The user is not found or is not under the admin.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the user was not found.", "type": "string"}}}, "examples": {"application/json": {"error": "User is not under this admin"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "Error fetching user data: <error details>"}}}}, "tags": ["user-management"], "security": [{"Bearer": []}]}, "parameters": [{"name": "user_uid", "in": "path", "required": true, "type": "string"}]}, "/weightlifting/management/sessions/": {"post": {"operationId": "weightlifting_management_sessions_create", "summary": "Create a New Video Processing Session (Admin on Behalf of Another User)", "description": "This endpoint allows an **admin** (or sub-admin) to upload a **video file** for processing and create a new \"session\" resource **on behalf of another user**. The server will return a `session_id` that can be used to poll or retrieve the session details/results.\n\n### Request Body (Multipart/Form-Data)\n\nYou must supply the following fields:\n\n- **user_id** *(string, required)*: The ID of the user on whose behalf this session is created.\n- **video** *(file, required)*: The raw video file to be processed.\n- **session_name** *(string, optional)*: A human-readable name/title for the session.\n- **exercise_name** *(string, required)*: The name of the exercise. Choose one of the following: 'snatch', 'clean', or 'clean_and_jerk'.\n- **barbell_mass** *(string, optional)*: The mass of the barbell used (numeric string). If not provided, a default value of 100 kg (or 220 lb) is assigned.\n\n### Response Structure\n\nOn success (HTTP 200), the response is a JSON object with:\n\n- **session_id** *(string)*: A unique identifier for the created session.\n- **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).\n\n### Workflow\n1. **POST** a multipart/form-data request containing the required fields `user_id` and `video`, plus any optional fields.\n2. Provide a valid Bearer token in the `Authorization` header.\n3. The caller must have admin privileges to successfully create a session for another user.\n4. If successful, the server responds with `session_id` and `title`.\n5. If an error occurs (e.g., missing fields, lack of permissions), a JSON object with an `error` key is returned.\n\n#### Example cURL:\n\n```bash\ncurl -X POST \\\n     -H 'Content-Type: multipart/form-data' \\\n     -H 'Authorization: Bearer <YOUR_ADMIN_TOKEN>' \\\n     -F 'user_id=someUserId123' \\\n     -F 'video=@/path/to/video.mp4' \\\n     -F 'session_name=Custom Session' \\\n     -F 'exercise_name=clean' \\\n     -F 'barbell_mass=30' \\\n     https://<backend-link>/weightlifting/management/sessions/\n```\n", "parameters": [{"name": "user_id", "in": "formData", "description": "**Required.** The ID of the user for whom this session is created (form field: text).", "required": true, "type": "string"}, {"name": "video", "in": "formData", "description": "**Required.** The raw video file to be processed (form field type: file).", "required": true, "type": "file"}, {"name": "session_name", "in": "formData", "description": "**Optional.** A descriptive name for the session (form field: text).", "required": false, "type": "string"}, {"name": "exercise_name", "in": "formData", "description": "**Required.** The name of the exercise. Choose one of the following: 'snatch', 'clean', or 'clean_and_jerk'.", "required": true, "type": "string", "enum": ["snatch", "clean", "clean_and_jerk"]}, {"name": "barbell_mass", "in": "formData", "description": "**Optional.** The mass of the barbell used (numeric string). Defaults to 100 kg (or 220 lb) if not provided.", "required": false, "type": "string"}], "responses": {"200": {"description": "Video processing session created successfully (HTTP 200).", "schema": {"required": ["session_id", "title"], "type": "object", "properties": {"session_id": {"description": "The unique identifier for the created session.", "type": "string"}, "title": {"description": "The session title (defaults if not provided).", "type": "string"}}}, "examples": {"application/json": {"session_id": "abcd1234efgh5678", "title": "Custom Session"}}}, "400": {"description": "Bad Request - Possibly due to missing `user_id`, missing `video`, or invalid form data.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "user_id is required"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating a missing or invalid token.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have admin permission to create sessions for others.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - Indicates business logic issues or resource limitations (e.g., session limit).", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "User has reached the maximum number of sessions."}}}, "500": {"description": "Internal Server Error - Unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "consumes": ["multipart/form-data", "application/x-www-form-urlencoded"], "tags": ["weightlifting"], "security": [{"Bearer": []}]}, "parameters": []}, "/weightlifting/sessions/": {"post": {"operationId": "weightlifting_sessions_create", "summary": "Create a New Video Processing Session", "description": "This endpoint allows an authenticated (and authorized) user to upload a **video file** for processing and create a new \"session\" resource. The server will return a `session_id` that can be used to poll or retrieve the session details/results.\n\n### Request Body (Multipart/Form-Data)\n\nYou must supply the following fields:\n\n- **video** *(file, required)*: The raw video file to be processed.\n- **session_name** *(string, optional)*: A human-readable name/title for the session.\n- **exercise_name** *(string, required)*: The name of the exercise. Choose one of the following: 'snatch', 'clean', or 'clean_and_jerk'.\n- **barbell_mass** *(string, optional)*: The mass of the barbell used (numeric string). If not provided, a default value of 100 kg (or 220 lb) is assigned.\n\n### Response Structure\n\nOn success (HTTP 200), the response is a JSON object with:\n\n- **session_id** *(string)*: A unique identifier for the created session.\n- **title** *(string)*: The session title (defaults to a fallback if `session_name` was not provided).\n\n### Workflow\n1. **POST** a multipart/form-data request containing the required `video` field and any optional fields.\n2. Provide a valid Bearer token in the `Authorization` header.\n3. If successful, the server responds with `session_id` and `title`.\n4. If an error occurs (e.g., missing video, lack of permissions), a JSON object with an `error` key is returned.\n\n#### Example cURL:\n\n```bash\ncurl -X POST \\\n     -H 'Content-Type: multipart/form-data' \\\n     -H 'Authorization: Bearer <YOUR_TOKEN>' \\\n     -F 'video=@/path/to/video.mp4' \\\n     -F 'session_name=Morning Lift' \\\n     -F 'exercise_name=snatch' \\\n     -F 'barbell_mass=20' \\\n     https://<backend-link>/weightlifting/sessions/\n```\n", "parameters": [{"name": "video", "in": "formData", "description": "**Required.** The raw video file to be processed (form field type: file).", "required": true, "type": "file"}, {"name": "session_name", "in": "formData", "description": "**Optional.** A descriptive name for the session (form field type: text).", "required": false, "type": "string"}, {"name": "exercise_name", "in": "formData", "description": "**Required.** The name of the exercise. Choose one of the following: 'snatch', 'clean', or 'clean_and_jerk'.", "required": true, "type": "string", "enum": ["snatch", "clean", "clean_and_jerk"]}, {"name": "barbell_mass", "in": "formData", "description": "**Optional.** The mass of the barbell used (numeric string). Defaults to 100 kg (or 220 lb) if not provided.", "required": false, "type": "string"}], "responses": {"200": {"description": "Video processing session created successfully (HTTP 200).", "schema": {"required": ["session_id", "title"], "type": "object", "properties": {"session_id": {"description": "The unique identifier for the created session.", "type": "string"}, "title": {"description": "The session title (defaults if not provided).", "type": "string"}}}, "examples": {"application/json": {"session_id": "abcd1234efgh5678", "title": "My Morning Run"}}}, "400": {"description": "Bad Request - Possibly due to missing video file or invalid form data.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message.", "type": "string"}}}, "examples": {"application/json": {"error": "No video file was provided"}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating a missing or invalid token.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have permission to create sessions (admin-only).", "schema": {"type": "object", "properties": {"error": {"description": "Error indicating insufficient privileges.", "type": "string"}}}, "examples": {"application/json": {"error": "You must be an admin to access this data."}}}, "404": {"description": "Not Found - Indicates business logic issues or resource limitations (e.g., session limit).", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the issue.", "type": "string"}}}, "examples": {"application/json": {"error": "User has reached the maximum number of sessions."}}}, "500": {"description": "Internal Server Error - Unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "consumes": ["multipart/form-data", "application/x-www-form-urlencoded"], "tags": ["weightlifting"], "security": [{"Bearer": []}]}, "parameters": []}, "/weightlifting/sessions/{session_id}/": {"get": {"operationId": "weightlifting_sessions_read", "summary": "Retrieve Weightlifting Session Details", "description": "Retrieves the details of a weightlifting session specified by its `session_id`. The returned data includes URLs to the original and analyzed videos, session creation timestamp, exercise type, user information, metrics, angles, report metrics, and timestamps. \n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session to retrieve.\n\n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON object with the following properties:\n\n- **analyzed_video_url** *(string, URI)*: Public URL of the analyzed video.\n- **video_url** *(string, URI)*: Public URL of the original video.\n- **created_at** *(object)*: A dictionary with:\n    - **date** *(string)*: Creation date in `DD/MM/YYYY` format.\n    - **time** *(string)*: Creation time in `HH:MM AM/PM` format.\n- **exercise** *(string)*: The exercise performed (e.g., 'snatch').\n- **user_name** *(string)*: The name of the user associated with the session.\n- **activity** *(string)*: The activity type (should be 'Weightlifting').\n- **title** *(string)*: The title of the session.\n- **metrics** *(object)*: A dictionary of numeric metric values (e.g., speed, power). Each key maps to a number.\n- **angles** *(object)*: A dictionary where each key maps to an array of numeric values representing angles.\n- **report_metrics** *(object)*: A dictionary where each key maps to an array of numeric values representing report-specific metrics.\n- **all_timestamps** *(array[number])*: An array of timestamps (e.g., in seconds) for the session data.\n\n### Error Handling\n\n- **400 Bad Request**: Invalid parameters (e.g., invalid admin UID).\n- **401 Unauthorized**: Missing or invalid access token.\n- **403 Forbidden**: Insufficient privileges.\n- **404 Not Found**: Session not found or the activity is not Weightlifting.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The unique identifier of the weightlifting session to retrieve.", "required": true, "type": "string"}], "responses": {"200": {"description": "Weightlifting session details retrieved successfully.", "schema": {"required": ["analyzed_video_url", "video_url", "created_at", "exercise", "user_name", "activity", "title", "metrics", "angles", "report_metrics", "all_timestamps"], "type": "object", "properties": {"analyzed_video_url": {"description": "Public URL of the analyzed video.", "type": "string", "format": "uri"}, "video_url": {"description": "Public URL of the original video.", "type": "string", "format": "uri"}, "created_at": {"description": "Session creation timestamp.", "required": ["date", "time"], "type": "object", "properties": {"date": {"description": "Date in DD/MM/YYYY format.", "type": "string"}, "time": {"description": "Time in HH:MM AM/PM format.", "type": "string"}}}, "exercise": {"description": "The exercise performed (e.g., 'snatch').", "type": "string"}, "user_name": {"description": "Name of the user associated with the session.", "type": "string"}, "activity": {"description": "Activity type, expected to be 'Weightlifting'.", "type": "string"}, "title": {"description": "The title of the session.", "type": "string"}, "metrics": {"description": "A dictionary of numeric metrics.", "type": "object", "additionalProperties": {"type": "number"}}, "angles": {"description": "A dictionary where keys map to arrays of angle values.", "type": "object", "additionalProperties": {"type": "array", "items": {"type": "number"}}}, "report_metrics": {"description": "A dictionary where keys map to arrays of report metric values.", "type": "object", "additionalProperties": {"type": "array", "items": {"type": "number"}}}, "all_timestamps": {"description": "List of timestamps corresponding to session data.", "type": "array", "items": {"type": "number"}}}}, "examples": {"application/json": {"analyzed_video_url": "https://storage.googleapis.com/aikonweb001.appspot.com/analyzed_videos/.../analyzed_video.mp4", "video_url": "https://storage.googleapis.com/aikonweb001.appspot.com/analyzed_videos/.../snatch_weightlift.MOV", "created_at": {"date": "08/02/2025", "time": "02:17 AM"}, "exercise": "snatch", "user_name": "Violet Snow", "activity": "Weightlifting", "title": "snatch-w", "metrics": {"bar_past_the_knee_speed": 1.2634576485766442, "bar_past_the_knee_acceleration": -0.9553989355246633, "max_GRF": 1090205.6278922595, "first_pull_end": 954, "second_pull_end": 1036, "scale": 1.98963, "total_time": 3200, "transition": 983, "barbell_weight": 50, "start_of_lifting": 537, "catch_end": 1089, "max_power": 10633983.025107784, "clean_time": 2760, "recovery_end": 1177, "mean_markers_validity": 0.612, "max_bar_speed": 33.22927464315564}, "angles": {"lank_angle": [30, 35, 33], "lkne_angle": [40, 42, 41], "rank_angle": [38, 40, 39], "hip_intersection_angle": [50, 55, 52], "rkne_angle": [42, 44, 43]}, "report_metrics": {"bar": [0.5, 0.6, 0.7], "vhipy": [1.2, 1.3, 1.1]}, "all_timestamps": [16, 25]}}}, "400": {"description": "Bad Request - Invalid parameters or admin UID.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message for invalid requests.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Access token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - Insufficient privileges.", "schema": {"type": "object", "properties": {"error": {"description": "User is not permitted to access this data.", "type": "string"}}}, "examples": {"application/json": {"error": "Access denied."}}}, "404": {"description": "Not Found - Session not found or invalid activity.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating that the session was not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Session not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error message>"}}}}, "tags": ["weightlifting"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/weightlifting/sessions/{session_id}/export/": {"get": {"operationId": "weightlifting_sessions_export_list", "summary": "Export Weightlifting Session Data", "description": "Retrieves a user's weightlifting session data from Firestore, including keypoints, angles, and timestamps. The session's activity must be 'Weightlifting'.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session to export data for.\n\n### Response Structure (HTTP 200)\n\nOn success, the response is a JSON object containing:\n- **keypoints** *(object)*: A dictionary where each key (e.g., 'lknev', 'lknex', etc.) maps to an array of numbers representing keypoint data.\n- **angles** *(object)*: A dictionary where each key (e.g., 'lank_angle', 'lkne_angle', etc.) maps to an array of numbers representing angle measurements.\n- **all_timestamps** *(array[number])*: An array of timestamps corresponding to the session data.\n- **metrics** *(object)*: A dictionary of numeric metric values (e.g., max_GRF, max_bar_speed). Each key maps to a number.\n- **activity** *(string)*: The session activity, expected to be 'Weightlifting'.\n\n### Error Handling\n\n- **400 Bad Request**: Invalid parameters (e.g., admin UID error).\n- **401 Unauthorized**: Missing or invalid access token.\n- **403 Forbidden**: Insufficient privileges.\n- **404 Not Found**: Session not found or invalid activity.\n- **500 Internal Server Error**: An unexpected server-side error occurred.\n\n### Security\n\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The session ID for which to export weightlifting data.", "required": true, "type": "string"}], "responses": {"200": {"description": "Weightlifting session data retrieved successfully.", "schema": {"required": ["keypoints", "angles", "all_timestamps", "metrics", "activity"], "type": "object", "properties": {"keypoints": {"description": "A dictionary of keypoints. Each key maps to an array of numeric values.", "type": "object", "additionalProperties": {"type": "array", "items": {"type": "number"}}}, "angles": {"description": "A dictionary of angles. Each key maps to an array of numeric values.", "type": "object", "additionalProperties": {"type": "array", "items": {"type": "number"}}}, "all_timestamps": {"description": "An array of timestamps (in seconds) for the session data.", "type": "array", "items": {"type": "number"}}, "metrics": {"description": "A dictionary of numeric metrics. Each key maps to a number.", "type": "object", "additionalProperties": {"type": "number"}}, "activity": {"description": "The session activity (expected to be 'Weightlifting').", "type": "string"}}}, "examples": {"application/json": {"keypoints": {"lknev": [1.0, 2.0, 3.0], "lknex": [1.5, 2.5, 3.5]}, "angles": {"lank_angle": [30, 35, 33], "lkne_angle": [40, 42, 41], "rank_angle": [38, 40, 39], "hip_intersection_angle": [50, 55, 52], "rkne_angle": [42, 44, 43]}, "all_timestamps": [16, 25], "metrics": {"bar_past_the_knee_speed": 1.2634576485766442, "bar_past_the_knee_acceleration": -0.9553989355246633, "max_GRF": 1090205.6278922595, "first_pull_end": 954, "second_pull_end": 1036, "scale": 1.98963, "total_time": 3200, "transition": 983, "barbell_weight": 50, "start_of_lifting": 537, "catch_end": 1089, "max_power": 10633983.025107784, "clean_time": 2760, "recovery_end": 1177, "mean_markers_validity": 0.612, "max_bar_speed": 33.22927464315564}, "activity": "Weightlifting"}}}, "400": {"description": "Bad Request - Invalid parameters or admin UID error.", "schema": {"type": "object", "properties": {"error": {"description": "Error message describing the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Token is missing or invalid.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - User does not have sufficient privileges.", "schema": {"type": "object", "properties": {"error": {"description": "User is not authorized to access this data.", "type": "string"}}}, "examples": {"application/json": {"error": "Access denied."}}}, "404": {"description": "Not Found - The session was not found or its activity is not 'Weightlifting'.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating the session was not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Session not found"}}}, "500": {"description": "Internal Server Error - An unexpected error occurred on the server.", "schema": {"type": "object", "properties": {"error": {"description": "Detailed error message indicating a server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error details>"}}}}, "tags": ["weightlifting"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/weightlifting/sessions/{session_id}/lift-analysis/": {"post": {"operationId": "weightlifting_sessions_lift-analysis_create", "summary": "Analyze Weightlifting Lift", "description": "Analyzes a user's weightlifting lift for a given `session_id`. If corresponding images already exist, they are returned. Otherwise, new images are generated.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the weightlifting session.\n\n### Response Structure (HTTP 200)\n\nIf successful, the response is a JSON object where each key (e.g., 'hip_height', 'bar_speed', etc.) maps to a dictionary of URLs for English (`en`) and Russian (`ru`) versions of the image:\n\n```json\n{\n  \"hip_height\": {\n    \"en\": \"...\",\n    \"ru\": \"...\"\n  },\n  \"bar_height\": {\n    \"en\": \"...\",\n    \"ru\": \"...\"\n  },\n  \"positions\": {\n    \"en\": \"...\",\n    \"ru\": \"...\"\n  }\n  // Other measurements\n}\n```\n\nmaps to a dictionary of URLs for English (`en`) and Russian (`ru`) versions of the image:\n\n- **400 Bad Request**: Invalid parameters (e.g., missing or malformed admin UID).\n- **401 Unauthorized**: Token is missing or invalid.\n- **403 Forbidden**: The user does not have a valid payment plan.\n- **404 Not Found**: Session data not found or images cannot be generated.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "The session ID for which images will be retrieved or generated.", "required": true, "type": "string"}], "responses": {"200": {"description": "Weightlifting lift images retrieved or generated successfully.", "schema": {"description": "A dictionary of images keyed by measurement type.", "type": "object", "additionalProperties": {"description": "Contains 'en' and 'ru' URLs for each measurement.", "type": "object", "properties": {"en": {"description": "Public URL of the English version of the image.", "type": "string", "format": "uri"}, "ru": {"description": "Public URL of the Russian version of the image.", "type": "string", "format": "uri"}}}}, "examples": {"application/json": {"hip_height": {"en": "https://storage.googleapis.com/.../hip_height_en.png", "ru": "https://storage.googleapis.com/.../hip_height_ru.png"}, "bar_speed": {"en": "https://storage.googleapis.com/.../bar_speed_en.png", "ru": "https://storage.googleapis.com/.../bar_speed_ru.png"}, "positions": {"en": "https://storage.googleapis.com/.../positions_en.png", "ru": "https://storage.googleapis.com/.../positions_ru.png"}}}}, "400": {"description": "Bad Request - Possibly due to invalid parameters or missing user ID.", "schema": {"type": "object", "properties": {"error": {"description": "Explanation of the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID."}}}, "401": {"description": "Unauthorized - Missing or invalid access token.", "schema": {"type": "object", "properties": {"error": {"description": "Authentication error.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have a valid payment plan.", "schema": {"type": "object", "properties": {"error": {"description": "Error message indicating insufficient privileges or invalid plan.", "type": "string"}}}, "examples": {"application/json": {"error": "User does not have a valid payment plan"}}}, "404": {"description": "Not Found - Session data not found or images cannot be generated.", "schema": {"type": "object", "properties": {"error": {"description": "Error message if the session or images are not found.", "type": "string"}}}, "examples": {"application/json": {"error": "Session not found or images generation failed."}}}, "500": {"description": "Internal Server Error - Unexpected server-side error.", "schema": {"type": "object", "properties": {"error": {"description": "Details of the server-side failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error>"}}}}, "tags": ["weightlifting"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}, "/weightlifting/sessions/{session_id}/recommendation/": {"post": {"operationId": "weightlifting_sessions_recommendation_create", "summary": "Generate Weightlifting Recommendations", "description": "Generates a set of weightlifting recommendations (in English and Russian) for a given session. The user must have a valid payment plan (Pro, Premium, Enterprise, or Standard). The resulting recommendations are saved and returned as a JSON object.\n\n### Path Parameter\n- **session_id** *(string, required)*: The unique identifier of the session for which to generate recommendations.\n\n### Response Structure (HTTP 200)\n\nIf successful, the response is a JSON object where each key corresponds to a specific recommendation field (e.g., 'text_bar_speed', 'text_hip_speed', etc.), mapping to an object with **'en'** and **'ru'** keys:\n\n```json\n{\n  \"text_bar_speed\": {\n    \"en\": \"Maintain an upright torso...\",\n    \"ru\": \"Сохраняйте прямое положение туловища...\"\n  },\n  \"text_hip_speed\": {\n    \"en\": \"Ensure the hips reach full extension...\",\n    \"ru\": \"Убедитесь, что бедра полностью выпрямляются...\"\n  },\n  // Additional fields for each metric\n}\n```\n\n### Error Handling\n\n- **400 Bad Request**: Invalid parameters (e.g., incorrect admin UID) or missing user token.\n- **401 Unauthorized**: The access token is missing or invalid.\n- **403 Forbidden**: The user does not have a valid payment plan.\n- **404 Not Found**: Unable to generate or retrieve session data.\n- **500 Internal Server Error**: An unexpected error occurred on the server.\n\n### Security\nA valid Bearer token must be provided in the `Authorization` header.", "parameters": [{"name": "session_id", "in": "path", "description": "Session ID for which the recommendations will be generated.", "required": true, "type": "string"}], "responses": {"200": {"description": "Recommendations generated successfully.", "schema": {"description": "A dictionary of recommendations keyed by text_<metric>, each mapping to 'en'/'ru' text.", "type": "object", "additionalProperties": {"description": "Contains English and Russian text for each recommendation.", "type": "object", "properties": {"en": {"description": "The recommendation in English.", "type": "string"}, "ru": {"description": "The recommendation in Russian.", "type": "string"}}}}, "examples": {"application/json": {"text_bar_speed": {"en": "Maintain an upright torso during the squatting phases...", "ru": "Сохраняйте прямое положение туловища во время фаз приседания..."}, "text_hip_speed": {"en": "Ensure the hips reach full extension during the pull...", "ru": "Убедитесь, что бедра полностью выпрямляются во время тяги..."}}}}, "400": {"description": "Bad Request - Possibly invalid admin UID or missing token.", "schema": {"type": "object", "properties": {"error": {"description": "Explanation of the invalid request.", "type": "string"}}}, "examples": {"application/json": {"error": "Invalid admin UID"}}}, "401": {"description": "Unauthorized - The token is missing or invalid.", "schema": {"type": "object", "properties": {"error": {"description": "Authentication error.", "type": "string"}}}, "examples": {"application/json": {"error": "No token provided."}}}, "403": {"description": "Forbidden - The user does not have a valid payment plan.", "schema": {"type": "object", "properties": {"error": {"description": "User's plan is insufficient.", "type": "string"}}}, "examples": {"application/json": {"error": "User does not have a valid payment plan"}}}, "404": {"description": "Not Found - Session data not found or generation failed.", "schema": {"type": "object", "properties": {"error": {"description": "Error message if the session or data could not be retrieved.", "type": "string"}}}, "examples": {"application/json": {"error": "Unable to generate or retrieve session data"}}}, "500": {"description": "Internal Server Error - Unexpected server-side issue.", "schema": {"type": "object", "properties": {"error": {"description": "A detailed error message indicating a server failure.", "type": "string"}}}, "examples": {"application/json": {"error": "An unexpected error occurred: <error>"}}}}, "tags": ["weightlifting"], "security": [{"Bearer": []}]}, "parameters": [{"name": "session_id", "in": "path", "required": true, "type": "string"}]}}, "definitions": {}}